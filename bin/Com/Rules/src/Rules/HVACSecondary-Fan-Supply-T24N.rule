// HVAC Secondary Systems - Fans - Supply
//
// -------------------------------------------------------------------------
//  Copyright (c) 2013-2014, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------


//  This rule file addresses the following building descriptors:

//      Fan System Modeling Method
//      Supply Fan Design Air Rated Capacity
//      Fan Control Method
//      Supply Fan Static Pressure
//      Supply Fan Efficiency
//      Supply Fan Brake Horspower 
//      Supply Fan Motor Efficiency
//      Supply Fan Motor Position
//      Fan Part-Flow Power Curve
//      Supply Fan Power Index
//      Process and Filtration Pressure Drop



// ********** Fan System Modeling Method ***************************************
RULE Fan:ModelingMthd
  DESCRIPTION
    "The method used to describe the design power consumption of a fan"  
  HELP
    "Software commonly models fans in three ways. The simple method is for the 
     user to enter the electric power per unit of flow (W/cfm). This method is 
     commonly used for unitary equipment and other small fan systems. A more 
     detailed method is to model the fan as a system whereby the static pressure, 
     fan efficiency, part-load curve, and motor efficiency are specified at 
     design conditions. A third method is to specify brake horsepower at design 
     conditions instead of fan efficiency and static pressure. This is a variation 
     of the second method whereby brake horsepower is specified in lieu of static 
     pressure and fan efficiency. The latter two methods are commonly used for 
     VAV and other larger fan systems.

     The simplified 'PowerPerFlow' method is not currently supported for compliance
     analysis."  
  REFERENCE 
    NACM Section 5.7.3.2    
  INPUTCLASS
    Default
//OPTION - Defined in BEMEnums, shown here for reference
//  StaticPressure
//  BrakeHorsePower
//  PowerPerUnitFlow
//DEFAULT
//  "StaticPressure"
  CHECKCODE
     if( Proj:AnalysisType != "Research" .AND. ModelingMthd = "PowerPerUnitFlow" )
     then 
       PostError("ModelingMethod for fan '%s' is 'PowerPerUnitFlow', which is 
                  is not allowed for compliance analysis.  Revise to 'Detailed'
                  and provide the necessary inputs'", Name)
     else UNCHANGED
     endif
  SIZING
    if( BaseSysNum > 0 )
    then "StaticPressure"
    else u:ModelingMthd  
    endif
  ANNUAL
    if( BaseSysNum > 0 )
    then
      if( ParentComponentType() = "ZnSys" )
      then "PowerPerUnitFlow"
      else if( ParentComponentType() = "AirSeg" )
      then 
        if( AirSys:SubType = "CRAC" .OR. AirSys:SubType = "CRAH" )
        then "PowerPerUnitFlow"
        else "StaticPressure"
        endif
      else "StaticPressure"
      endif endif
    else z:ModelingMthd  
    endif
ENDRULE



// ********** Supply Fan Power Index *******************************************
; Not used as input for AirSystem, only BASELINE ZnSys:Type = FPFC and fan-powered boxes
RULE Fan:PwrIdx
  DESCRIPTION
    "The supply fan power, in Watts, per unit of flow, in CFM"
  HELP
    "This is a required input if ModelingMethod = 'PowerPerFlow'. However, 
     this modeling method is not currently supported for compliance analysis.
     This value is calculated from other inputs and shown for reference only." 
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    NotInput
  MINIMUM
    0
  COMMONMINIMUM
    0.25
  COMMONMAXIMUM
    1.5 
  UNITS 
    W/cfm 
  REPORTPRECISION
    3          
  DEFAULT
    if( Proj:AutoEffInput = 1 )
    then // For PROPOSED AutoEfficiency input only
      if( ParentComponentType() = "ZnSys" ) 
      then 
        if( IfValidAnd( ParentValid( Type ) = "Baseboard" ) )
        then UNDEFINED
        else if( ZnSys:IsResExhSys )
        then UNCHANGED // See HVACSecondary-Fan-Exhaust.rule
        else 0.35 // Baseline system 1 or 2
        endif endif
      else
      if( IfValidAnd( Parent2Valid( SubType ) = "CRAC" ) .OR.
          IfValidAnd( Parent2Valid( SubType ) = "CRAH" ) )
      then 
        if( IfValidAnd( Parent2Valid( ClgCap ) > 54000 ) )
        then 0.49
        else 0.39
        endif
      else UNDEFINED
      endif endif
    else UNDEFINED
    endif
  SIZING
    if( BaseSysNum > 0 )
    then UNDEFINED
    else u:PwrIdx
    endif
  ANNUAL
    if( BaseSysNum > 0 .AND. ModelingMthd = "PowerPerUnitFlow" )
    then
      if( ParentComponentType() = "ZnSys" ) 
      then 
        if( ZnSys:Type = "FPFC" .OR. ZnSys:Type = "PTAC" )
        then 0.35
        else UNDEFINED
        endif
      else if( ParentComponentType() = "AirSeg" )
      then 
        if( AirSys:SubType = "CRAC" .OR.  AirSys:SubType = "CRAH" )
        then 0.39 // Adjustment for economizer is performed in OutsideAirControl.rule
        else UNDEFINED
        endif
      else UNDEFINED
      endif endif
    else z:PwrIdx
    endif
ENDRULE


// ********** Supply Fan Efficiency ********************************************
// =========================== AirSystem =======================================
RULE AirSys:AirSeg:Fan:FlowEff
  DESCRIPTION
    "The efficiency of the fan at design conditions."  
  HELP
    "This efficiency term includes belt/drive losses, but does not include 
     motor losses.
     This is a required input if ModelingMethod = 'StaticPressure'." 
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    Default
  MINIMUM
    0.35
  COMMONMINIMUM
    0.4
  COMMONMAXIMUM
    0.7
  MAXIMUM
    1.0
  REPORTPRECISION
    3  
  DEFAULT
    if( AirSeg:Type = "Supply" )
    then
      if( IfValidAnd( FlowCap < 2000 ) )
       then 0.5
      else if( IfValidAnd( FlowCap < 10000 ) )
       then 0.6
      else 0.62
      endif  endif
    else if( AirSeg:Type = "Relief" )
    then 
      if( IfValidAnd( FlowCap < 10000 ) )
       then 0.4
      else 0.5
      endif 
    else 0.6
    endif endif
  CHECKCODE
    if( ModelingMthd = "StaticPressure" .AND. LocalStatus( FlowEff ) = 0 )
    then 
      PostError("FlowEfficiency must be defined for fan '%s' if the StaticPressure 
                 fan power method is used", Name)
    else UNCHANGED
    endif  
  SIZING
    if( BaseSysNum > 0 )
    then 1.0 // Fan efficiency set to 1.0 for sizing
    else if( ModelingMthd = "StaticPressure" )
    then u:FlowEff 
    else if( AirSeg:Type = "Supply" )
// Value needed for simulation, so use baseline rules to set set value for 
// BrakeHorsePower and PowerPerUnitFlow methods
    then
      if( FlowCap < 2000 )
       then 0.5
      else if( FlowCap < 10000 )
       then 0.6
      else 0.62
      endif  endif
    else if( AirSeg:Type = "Relief" )
    then 
      if( FlowCap < 10000 )
       then 0.4
      else 0.5
      endif 
    else 0.6 // Default assumption for all other fans
    endif endif endif endif
  ANNUAL
    if( BaseSysNum > 0 )
    then
      if( AirSeg:Type = "Supply" )
      then
        if( IfValidAnd( FlowCap < 2000 ) )
         then 0.5
        else if( IfValidAnd( FlowCap < 10000 ) )
         then 0.6
        else 0.62
        endif endif
      else 
      if( AirSeg:Type = "Relief" .OR. 
          AirSeg:Type = "Return" )
      then // Is Return/Relief fan
        if( IfValidAnd( FlowCap < 10000 ) )
         then 0.4
        else 0.5
        endif 
      else UNDEFINED
      endif endif   
    else z:FlowEff 
    endif
ENDRULE
// =========================== ZoneSystem ======================================
RULE ZnSys:Fan:FlowEff
  DEFAULT
    0.5    
  CHECKSIM
    if( LocalStatus( FlowEff ) = 0 )
    then 
      PostError("FlowEff for fan '%s' must be defined for simulation", Name)
    else UNCHANGED
    endif 
  SIZING
    if( BaseSysNum > 0 )
    then 1.0 // Fan efficiency set to 1.0 for sizing
    else u:FlowEff
    endif
  ANNUAL
    if( BaseSysNum > 0 )
    then 0.5   
    else z:FlowEff 
    endif
ENDRULE


// ********** Supply Fan Static Pressure **************************************

// =========================== AirSystem =======================================
RULE AirSys:AirSeg:Fan:TotStaticPress
  DESCRIPTION
    "The total static pressure drop across the fan at design conditions."  
  HELP
    "The total static pressure (TSP) drop includes the pressure drop across 
     components both internal and external to an air handler. 
     This is a required input if ModelingMethod = 'StaticPressure'." 
  REFERENCE 
    NACM Section 5.7.3.2
    NACM Section 5.7.3.3
  INPUTCLASS
    CondRequired
  MINIMUM
    0.00001
  COMMONMINIMUM
    0.1
  COMMONMAXIMUM
    6.0  
  UNITS 
    inH2O 
  REPORTPRECISION
    3  
  DEFAULT
    if( ModelingMthd = "BrakeHorsePower" .OR. 
        ModelingMthd = "PowerPerFlow" .OR.
        LocalStatus( PwrIdx ) > 0 )
    then UNDEFINED
    else if( AirSys:IsExhSys .AND. AirSys:IsResExhSys = 0 )
    then 0.5 // See HVACSecondary-Fan-Exhaust.rule
    else if( Proj:AutoEffInput = 1 ) 
    then // For PROPOSED AutoEfficiency input only
      if( AirSeg:Type = "Supply" )
      then
        if( AirSys:IsMultiZnSys = 0 )
          then // Is single-zone system
          if( IfValidAnd( FlowCap < 2000 ) )
          then 2.5
          else if( IfValidAnd( FlowCap < 10000 ) ) 
          then 3.0
          else 3.5
          endif endif
        // Is a multi-zone system
        else if( Parent3(TotStoryCnt) <= 6 )   
        then
          if( IfValidAnd( FlowCap < 2000 ) )
          then 3.0
          else if( IfValidAnd( FlowCap < 10000 ) ) 
          then 3.5
          else 4.0
          endif endif
        else if( IfValidAnd( FlowCap < 2000 ) )
        then 3.5
        else if( IfValidAnd( FlowCap < 10000 ) ) 
        then 4.0
        else 4.5
        endif endif endif endif
      else if( AirSeg:Type = "Relief" )
      then
        if( IfValidAnd( FlowCap < 10000 ) )
        then 0.75
        else 1.0
        endif
      else UNDEFINED
      endif endif
    else UNDEFINED
    endif endif endif
  CHECKSIM
    if( ModelingMthd = "StaticPressure" .AND. LocalStatus( TotStaticPress ) = 0 )
    then 
      PostError("TotalStaticPressure must be defined for fan '%s' if the StaticPressure 
                 fan power method is used", Name)
    else UNCHANGED
    endif
  SIZING
    if( BaseSysNum > 0 )
    then // Fan power is set to near 0 for sizing.
      0.00001 // Using 0 can caus E+ sim failures. See GC 618 for background
    else if( ModelingMthd = "StaticPressure" )
    then u:TotStaticPress 
    else UNDEFINED 
    endif endif
  ANNUAL
// See rule below to calculate TotStatPress for simulation of other ModelingMthds
    if( BaseSysNum > 0 )
    then
      if( AirSeg:Type = "Supply" )
      then
        if( AirSys:IsMultiZnSys = 0 )
        then // Baseline design is single-zone system
          if( IfValidAnd( FlowCap < 2000 ) )
          then 2.5
          else if( IfValidAnd( FlowCap < 10000 ) ) 
          then 3.0
          else 3.5
          endif endif
        // Baseline design is multi-zone system
        else if( Parent3(TotStoryCnt) <= 6 )  
        then
          if( IfValidAnd( FlowCap < 2000 ) )
          then 3.0
          else if( IfValidAnd( FlowCap < 10000 ) ) 
          then 3.5
          else 4.0
          endif endif
        else if( IfValidAnd( FlowCap < 2000 ) )
        then 3.5
        else if( IfValidAnd( FlowCap < 10000 ) ) 
        then 4.0
        else 4.5
        endif endif endif endif
      else if( AirSeg:Type = "Relief" )
      then // 
        if( IfValidAnd( FlowCap < 10000 ) )
        then 0.75
        else 1.0
        endif
      else UNDEFINED
      endif endif
    else z:TotStaticPress
    endif
ENDRULE

// =========================== ZoneSystem ======================================
RULE ZnSys:Fan:TotStaticPress
  DEFAULT
    if( ModelingMthd = "BrakeHorsePower" .OR. 
        ModelingMthd = "PowerPerFlow" .OR.
        LocalStatus( PwrIdx ) > 0 )
    then UNDEFINED
    else if( ZnSys:IsResExhSys = 0 )
    then 0.5 
    else UNCHANGED // See HVACSecondary-Fan-Exhaust.rule
    endif endif
// TotStaticPress for other ZnSys fans calculated by separate rule below
ENDRULE



// ********** Supply Fan Motor Horsepower *************************************
// For AutoEffInput rules
RULE NEW Fan:AutoEffInputMtrBHP
  DATATYPE
    Float
  LONGFORM
    AutomaticEfficiencyInputMotorBHP
  DESCRIPTION
    "Intermediate value used if AutoEffInput = 1"
  UNITS 
    hp
  INPUTCLASS 
    NotInput     
  DEFAULT
    // For PROPOSED AutoEfficiency input only
    // Calculate a BHP from TotStatPress and other inputs
    if( ( LocalStatus( MtrBHP ) < 5 .OR. ModelingMthd = "StaticPressure" ) .AND.
        // only set if user had not defined MtrBHP or this is StaticPressure method
        IfValidAnd( FlowCap > 0 ) .AND. 
        IfValidAnd( TotStaticPress > 0 ) .AND. 
        IfValidAnd( FlowEff > 0 ) )
    then FlowCap * TotStaticPress * ( 0.1175 /  745.6 ) / FlowEff
    else UNDEFINED
    endif
ENDRULE

RULE Fan:MtrHP
  DESCRIPTION
    "The motor nameplate horsepower of the fan."  
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    Required
  UNITS 
    hp
  MINIMUM
    0
  COMMONMINIMUM
    0.08333
  COMMONMAXIMUM
    200 
  REPORTPRECISION
    3   
  DEFAULT
    if( Proj:AutoEffInput = 1 )
    then // For PROPOSED AutoEfficiency input only
      // Find next largest motor size in Std motor table based on
      // user-input,auto-calculated MtrBHP, or PwrIdx
      if( LocalStatus( MtrBHP ) > 0 )
      then StdElecMtrSize:MotorHPValue("InputMotorHP", MtrBHP)
      else if( LocalStatus( AutoEffInputMtrBHP ) > 0 )
      then StdElecMtrSize:MotorHPValue("InputMotorHP", AutoEffInputMtrBHP)
      else 
      if( IfValidAnd( PwrIdx > 0 ) .AND. 
          IfValidAnd( FlowCap > 0 ) )
      then StdElecMtrSize:MotorHPValue("InputMotorHP", PwrIdx * FlowCap / 745.6)
      else UNDEFINED
      endif endif endif
    else UNDEFINED
    endif  
  SIZING
    if( BaseSysNum > 0 )
    then UNDEFINED
    else u:MtrHP
    endif
  ANNUAL
    if( BaseSysNum > 0 )
    then 
      if( IfValidAnd( PwrIdx > 0 ) .AND. 
          IfValidAnd( FlowCap > 0 ) )
      then // For fans specified by PowerPerUnitFlow method, otherwise, see rule below
        StdElecMtrSize:MotorHPValue("InputMotorHP", PwrIdx * FlowCap / 745.6)
      else UNDEFINED
      endif
    else z:MtrHP
    endif
ENDRULE

// Proposed motor indices, based on the list of standard motor sizes
RULE NEW Fan:MtrHPIdx_i
  DATATYPE
    Integer
  LONGFORM
    MotorHPIndex_i
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrHP > 0 ) )
    then // Look up index of MtrHP in standard motor size table. If input is 
         // not equal to Std motor size, the table look-up will return index 
         // of next largest Std size
      StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrHP)
    else UNDEFINED
    endif
  SIZING
    if( BaseSysNum > 0 )
    then UNDEFINED
    else u:MtrHPIdx_i
    endif
ENDRULE

// Determine index of next motor size below 
RULE NEW Fan:MtrHPIdx_iminus1
  DATATYPE
    Integer
  LONGFORM
    MotorHPIndex_iminus1
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrHPIdx_i > 1 ) )
    then MtrHPIdx_i - 1
    else 1
    endif
  SIZING
    if( BaseSysNum > 0 )
    then UNDEFINED
    else u:MtrHPIdx_iminus1
    endif
ENDRULE

// Calculate the minimum allowed MtrBHP per NACM rules
RULE NEW Fan:MinMtrBHP
  DATATYPE
    Float
  LONGFORM
    MinimumMotorBHP
  DESCRIPTION
    "The minimum allowed MtrBHP used in the Proposed model simulation based on
     user specified MtrHP."
  HELP
    "The minimum Proposed model MtrBHP is Max(User MtrBHP, 95% x MHPi-1)"
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrHP >= 0.083 ) .AND. // Only applicable to motors >= 1/12 hp
        IfValidAnd( MtrBHP > 0 ) .AND. 
        LocalStatus( MtrHPIdx_iminus1 ) > 0 )
    then StdElecMtrPerf:MotorHPValue("MotorHPIndex", MtrHPIdx_iminus1) * 0.95
    else UNDEFINED
    endif
  SIZING
    if( BaseSysNum > 0 )
    then UNDEFINED
    else u:MinMtrBHP
    endif
  ANNUAL
    z:MinMtrBHP
ENDRULE


// ********** Supply Fan Brake Horspower ***************************************
RULE Fan:MtrBHP
  DESCRIPTION
    "The design motor shaft brake horsepower of the fan."  
  HELP
    "The motor brake horse power is the power at the motor shaft, including fan
     and drive efficiencies.
     This is a required input if ModelingMethod = 'BrakeHorsePower'." 
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    CondRequired
  UNITS 
    hp
  MINIMUM
    0
  COMMONMINIMUM
    0.05
  COMMONMAXIMUM
    200
  REPORTPRECISION
    3  
  DEFAULT
    if( Proj:AutoEffInput = 1 .OR. IfValidAnd( ModelingMthd = "StaticPressure" ) )
    then // For PROPOSED AutoEfficiency input only
         // Determine MtrBHP based on user-input or auto-calculated MtrBHP 
      if( LocalStatus( AutoEffInputMtrBHP ) > 0 )
      then AutoEffInputMtrBHP
      else // 
      if( IfValidAnd( FlowCap > 0 ) .AND. 
          IfValidAnd( TotStaticPress > 0 ) .AND. 
          IfValidAnd( FlowEff > 0 ) )
      then FlowCap * TotStaticPress * ( 0.1175 / 745.6 ) / FlowEff    
      else UNDEFINED
      endif endif
    else UNDEFINED
    endif  
  CHECKCODE
    if( Proj:IsNoMech .OR. ( IsNoAddMech .AND. IsExisting ) )
    then // Partial envelope or is existing, skip check
      UNCHANGED
    else if( IfValidAnd( MtrBHP > 0 ) = 0 .AND. ModelingMthd = "BrakeHorsePower" )
    then // MtrBHP is UNDEFINED or is 0
      PostError("MotorBHP is a required input for fan '%s' if ModelingMethod = 
                 'BrakeHorsePower'.", Name)   
    else if( IfValidAnd( MtrBHP < MinMtrBHP ) .AND.
             IfValidAnd( MtrHP > 0.75 ) )
    then // User specified MtrBHP is less than ACM required BHP based on user
         // specified MtrHP (applies only to non-fractional hp motors)
      PostWarning("MotorBHP for fan '%s' is less than the ACM required value
                   for the user-specified MotorHP. The proposed MotorBHP will
                   be set to %.3f hp for compliance analysis.", Name, MinMtrBHP)
    else UNCHANGED
    endif endif endif
  SIZING
    if( BaseSysNum > 0 )
    then // Fan power for sizing is set to 0
      0
    else if( IfValidAnd( u:MtrBHP < MinMtrBHP ) .AND. 
             IfValidAnd( MtrHP > 0.75 ) .AND. IsNew )
    then // Use NACM calculated MinMtrBHP
         // MinMtrBHP = 95% x MtrHPi-1, only applies to non-fractional HP motors
      MinMtrBHP 
    else // Use user-defined MtrBHP
      u:MtrBHP
    endif endif
  ANNUAL
    if( BaseSysNum > 0 )
    then // Calculate baseline MtrBHP for reporting of 'StaticPressue' method
         // See rule below for 'PowerPerUnitFlow' method
      if( IfValidAnd( FlowCap > 0 ) .AND. 
          IfValidAnd( TotStaticPress > 0 ) .AND. 
          IfValidAnd( FlowEff > 0 ) )
      then FlowCap * TotStaticPress * ( 0.1175 / 745.6 ) / FlowEff  
      else UNDEFINED
      endif
    else z:MtrBHP
    endif
ENDRULE


// ********** Motor Efficiency *************************************************
// Determine baseline MtrHP and MtrEff for baseline systems that do not use PwrPerFlow
RULE Fan:MtrHP
  ANNUAL
    if( BaseSysNum > 0 .AND. 
        LocalStatus( MtrBHP ) > 0 .AND.
        LocalStatus( PwrIdx ) = 0 )
    then StdElecMtrSize:MotorHPValue("InputMotorHP", MtrBHP)
    else UNCHANGED
    endif
ENDRULE

// Determine index in table of Std motor sizes based on MtrHP
RULE NEW Fan:MtrPerfIdx
  DATATYPE
    Integer
  LONGFORM
    MotorPerformanceIndex
  DESCRIPTION
    "The index of motor size according to a list of standard sizes."
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrHP > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrHP)
    else
    if( IfValidAnd( PwrIdx > 0 ) .AND.
        IfValidAnd( FlowCap >= 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", PwrIdx * FlowCap / 745.6)
    else UNDEFINED
    endif endif
  SIZING
    if( IfValidAnd( MtrHP > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrHP)
    else UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( MtrHP > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrHP)
    else
    if( IfValidAnd( PwrIdx > 0 ) .AND.
        IfValidAnd( FlowCap >= 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", PwrIdx * FlowCap / 745.6)
    else UNDEFINED
    endif endif
ENDRULE

// -----------------------------------------------------------------------------
//
RULE Fan:MtrEffRpt
  DESCRIPTION
    "The motor efficiency value to be used for reporting."
  INPUTCLASS
    NotInput
  MINIMUM
    0.4
  COMMONMINIMUM
    0.6
  COMMONMAXIMUM
    0.98
  REPORTPRECISION
    3  
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 )
    then
      if( IfValidAnd( MtrPerfIdx > 0 ) )
      then // Look-up MtrEff
        StdElecMtrPerf:MotorEfficiency("MotorHPIndex", MtrPerfIdx)   
      else 0
      endif
    else u:MtrEff
    endif
ENDRULE

// -----------------------------------------------------------------------------
//
RULE NEW Fan:DuctLeakAdjReq
  DATATYPE
    Integer
  LONGFORM
    DuctLeakageAdjustmentRequired
  DESCRIPTION
    "A flag to indicate that the fan motor efficiency needs to be adjusted
     due to system duct leakage."
  INPUTCLASS
    NotInput
  MINIMUM
    0.4
  REPORTPRECISION
    3  
  SIZING
    if( BaseSysNum > 0 )
    then 0
    else
      if( ParentComp = "AirSys" )
      then
        if( IfValidAnd( Parent2Valid( DuctLeakage ) > 0 ) )
        then 1       
        else 0
        endif
      else if( ParentComp = "ZnSys" )
      then
        if( IfValidAnd( ParentValid( DuctLeakage ) > 0 ) )
        then 1       
        else 0
        endif
      else 0
      endif endif
    endif
  ANNUAL
    z:DuctLeakAdjReq
ENDRULE


// -----------------------------------------------------------------------------
// Look up MtrEff based on index in table of Std motor sizes
RULE Fan:MtrEff
  DESCRIPTION
    "Indicates how well the motor converts electrical power into mechanical power
     and is defined as output power divided by input power expressed as a ratio."
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    Required
  MINIMUM
    0.4
  COMMONMINIMUM
    0.6
  COMMONMAXIMUM
    0.98
  REPORTPRECISION
    3  
  DEFAULT
    if( Proj:AutoEffInput = 1 .AND. IfValidAnd( MtrPerfIdx > 0 ) )
    then // For PROPOSED AutoEfficiency input only
      StdElecMtrPerf:MotorEfficiency("MotorHPIndex", MtrPerfIdx)   
    else UNDEFINED
    endif   
  SIZING
    if( BaseSysNum > 0 )
    then 1.0 // Fan power for sizing is set to 0
    else
      u:MtrEff
    endif
  ANNUAL
    if( BaseSysNum > 0 )
    then
      if( IfValidAnd( MtrPerfIdx > 0 ) )
      then // Look-up MtrEff
        StdElecMtrPerf:MotorEfficiency("MotorHPIndex", MtrPerfIdx)   
      else 0
      endif
    else
      z:MtrEff
    endif
ENDRULE

// -----------------------------------------------------------------------------
// Calculate MtrBHP for PowerPerUnitFlow method 
// Pfan_motor (W) = 0.1175 * FlowCap * TotStatPress / ( FlowEff * MtrEff )
RULE Fan:MtrBHP
  REPORTPRECISION
    3
  DEFAULT
    if( LocalStatus( AutoEffInputMtrBHP ) = 0 .AND.
        LocalStatus( PwrIdx ) > 0 .AND. 
        LocalStatus( FlowCap ) > 0 .AND.
        LocalStatus( MtrEff ) > 0 ) 
    then PwrIdx * FlowCap * MtrEff / 745.6
    else UNCHANGED
    endif
  ANNUAL
    if( BaseSysNum > 0 .AND. 
        LocalStatus( PwrIdx ) > 0 .AND. 
        LocalStatus( FlowCap ) > 0 .AND.
        LocalStatus( MtrEff ) > 0 ) 
    then PwrIdx * FlowCap * MtrEff / 745.6
    else UNCHANGED
    endif
ENDRULE



// ********** Motor Position *****************************************************
RULE Fan:MtrPos
  DESCRIPTION
    "The position of the supply fan motor relative to the cooling air stream."  
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    Default
  OPTION
    InAirStream
    NotInAirStream   
  DEFAULT
    "InAirStream"
  SIZING
    if( BaseSysNum > 0 )
    then "InAirStream"
    else u:MtrPos
    endif
  ANNUAL
    z:MtrPos
ENDRULE


// Fan heat at design conditions
// =========================== AirSystem ======================================
RULE NEW Fan:SupFanHtDsgn
  DATATYPE
   Float
  LONGFORM
    SupplyFanHeatDsgn
  DESCRIPTION
    "The amount of heat generated by the supply fan at design conditions."
  HELP
    "Used for reporting or to adjust baseline system coil capacities."
  INPUTCLASS
    NotInput  
  SIZING
    if( BaseSysNum > 0 )
    then 0
    else 
    if( IfValidAnd( MtrBHP > 0 ) .AND.
        IfValidAnd( MtrEff > 0 ) )
    then 
      if( MtrPos = "InAirStream" )
      then MtrBHP * 2544.4 / MtrEff
      else MtrBHP * 2544.4
      endif
    else 0
    endif endif 
  ANNUAL
    if( BaseSysNum > 0 )
    then
      if( IfValidAnd( MtrBHP > 0 ) .AND.
          IfValidAnd( MtrEff > 0 ) )
      then 
        if( MtrPos = "InAirStream" )
        then MtrBHP * 2544.4 / MtrEff
        else MtrBHP * 2544.4
        endif
      else 0
      endif
    else z:SupFanHtDsgn
    endif
ENDRULE


// ********** Supply Fan Part-Flow Power Curve *********************************
// =========================== AirSystem ======================================
RULE AirSys:AirSeg:Fan:Pwr_fPLRCrvRef
  DESCRIPTION
    "A part-load power curve which represents the percentage full-load power 
     draw of the supply fan as a function of the percentage full-load air flow."
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    Prescribed
  SIZING
    if( CtrlMthd = "ConstantVolume" )    
    then UNDEFINED
    else if( BaseSysNum > 0 )
    then // For Baseline systems
      if( CtrlMthd = "VariableSpeedDrive" ) 
      then
        if( AirSys:Type = "SZVAVAC" .OR. AirSys:Type = "SZVAVHP" )
        then Rulelibrary(CrvCubic, "FanVSDPerfSpResetPwrRatio_fCFMRatio")
        else Rulelibrary(CrvCubic, "FanVSDGoodSpResetPwrRatio_fCFMRatio")
        endif
      else UNDEFINED
      endif
    // For Proposed systems
    else if( CtrlMthd = "VariableSpeedDrive" )
    then
      if( Parent ( Type ) = "Relief" )
      then Rulelibrary(CrvCubic, "FanVSDPwrRatio_fCFMRatio")
      else if( AirSys:Type = "SZVAVAC" .OR. AirSys:Type = "SZVAVHP" )
      then Rulelibrary(CrvCubic, "FanVSDPerfSpResetPwrRatio_fCFMRatio")
      else if( AirSys:IsMultiZnSys = 1 )
        then 
        if( AirSys:CtrlSysType = "DDCToZone" )
        then Rulelibrary(CrvCubic, "FanVSDGoodSpResetPwrRatio_fCFMRatio")
        else Rulelibrary(CrvCubic, "FanVSDPwrRatio_fCFMRatio")
        endif
      else Rulelibrary(CrvCubic, "FanVSDPwrRatio_fCFMRatio")
      endif endif endif
    else if( Class = "Centrifugal" )
    then 
      if( CentType = "ForwardCurved" )
      then
        if( CtrlMthd = "InletVanes" .OR. CtrlMthd = "Dampers" )
        then Rulelibrary(CrvCubic, "FanFCVanesPwrRatio_fCFMRatio")
        else Rulelibrary(CrvCubic, "FanFCPwrRatio_fCFMRatio")
        endif
      else // Fan is AF or BI
        if( CtrlMthd = "InletVanes" .OR. CtrlMthd = "Dampers" )
        then Rulelibrary(CrvCubic, "FanAForBIVanesPwrRatio_fCFMRatio")
        else Rulelibrary(CrvCubic, "FanAForBIPwrRatio_fCFMRatio")
        endif
      endif
    else if( Class = "Axial" )
      then 
        if( CtrlMthd = "VariablePitchBlades" )
        then Rulelibrary(CrvCubic, "FanVaneAxVpPwrRatio_fCFMRatio")
        else Rulelibrary(CrvCubic, "FanLinearPwrRatio_fCFMRatio")
        endif
    else Rulelibrary(CrvCubic, "FanLinearPwrRatio_fCFMRatio") // Default 
    endif endif endif endif endif
  ANNUAL
    z:Pwr_fPLRCrvRef
ENDRULE


// =========================== ZoneSystem ======================================
RULE ZnSys:Fan:Pwr_fPLRCrvRef
  SIZING
    if( CtrlMthd = "ConstantVolume" )    
    then UNDEFINED
    else if( CtrlMthd = "VariableSpeedDrive" .OR. CtrlMthd = "TwoSpeed" )
    then Rulelibrary(CrvCubic, "FanVSDPwrRatio_fCFMRatio")  
    else UNDEFINED
    endif endif
  ANNUAL
    z:Pwr_fPLRCrvRef
ENDRULE


// -----------------------------------------------------------------------------
RULE Fan:TotEff
  DESCRIPTION
    "The total efficiency of the fan. It is the product of the flow (fan) and 
     motor efficiency, for simulation."
  INPUTCLASS
    NotInput
  REPORTPRECISION
    3  
  DEFAULT
    if( IfValidAnd( FlowEff >= 0 ) .AND. IfValidAnd( MtrEff > 0 ) )
    then FlowEff * MtrEff
    else UNDEFINED 
    endif 
  SIZING
    if( IfValidAnd( FlowEff >= 0 ) .AND. IfValidAnd( MtrEff > 0 ) )
    then FlowEff * MtrEff
    else UNDEFINED
    endif
  ANNUAL
    if( IfValidAnd( FlowEff >= 0 ) .AND. IfValidAnd( MtrEff > 0 ) )
    then FlowEff * MtrEff
    else UNDEFINED
    endif
ENDRULE


// -----------------------------------------------------------------------------
// TotStaticPress is needed for simulation, so it is calculated for other methods
// For reference:
// ---- MtrBHP ----
// Pfan_mtr (W) = 0.1175 * Qfan(CFM) * dP(inH2O) / ( Eff_fan * Eff_drive * Eff_motor )
// Pfan_mtr (W) = 0.1175 * FlowCap * TotStatPress / ( FlowEff * MtrEff )
// Pfan_shaft (W) = 0.1175 * FlowCap * TotStatPress / FlowEff
// Pfan_shaft (bhp) = MtrBHP = ( 0.1175 / 745.6 ) * FlowCap * TotStatPress / FlowEff
// TotStatPress = MtrBHP * FlowEff / FlowCap / ( 0.1175 / 745.6 ) 
// ---- PwrIdx ----
// PwrIdx = (Pfan_mtr / FlowCap ) = 0.1175 * TotStatPress / ( FlowEff * MtrEff )
// TotStatPress = PwrIdx * ( FlowEff * MtrEff ) / 0.1175
RULE Fan:TotStaticPress
  DEFAULT 
    if( ModelingMthd = "BrakeHorsePower" .AND.
        IfValidAnd( MtrBHP >= 0 ) .AND.
        IfValidAnd( FlowEff >= 0 ) .AND.
        IfValidAnd( FlowCap > 0 ) )
    then // BrakehorsePower method
      MtrBHP * FlowEff / FlowCap / ( 0.1175 / 745.6 )
    else // PowerPerFlow method
    if( LocalStatus( PwrIdx ) > 0 .AND. 
        IfValidAnd( TotEff >= 0 ) )
    then PwrIdx * TotEff / 0.1175 
    else UNCHANGED 
    endif endif
  SIZING
    if( BaseSysNum > 0 ) 
    then // Fan power is set to near 0 for sizing.
      0.00001 // Using 0 can caus E+ sim failures. See GC 618 for background
    else    
    if( ModelingMthd = "BrakeHorsePower" .AND.
        IfValidAnd( MtrBHP >= 0 ) .AND.
        IfValidAnd( FlowEff >= 0 ) .AND.
        IfValidAnd( FlowCap > 0 ) )
    then // BrakehorsePower method
      MtrBHP * FlowEff / FlowCap / ( 0.1175 / 745.6 )
    else
    if( ModelingMthd = "StaticPressure" .AND.
        IfValidAnd( MtrBHP = MinMtrBHP ) .AND.
        IfValidAnd( FlowEff >= 0 ) .AND.
        IfValidAnd( FlowCap > 0 ) )
    then // NACM rule for 95% n-1 motor size not met when using StaticPressure method,
         // recalculate TotStaticPress based on revise MtrBHP
      MtrBHP * FlowEff / FlowCap / ( 0.1175 / 745.6 )
    else  
    if( LocalStatus( PwrIdx ) > 0 .AND. 
        IfValidAnd( TotEff >= 0 ) )
    then // PowerPerFlow method
      PwrIdx * TotEff / 0.1175 
    else UNCHANGED 
    endif endif endif endif
  ANNUAL
    if( BaseSysNum > 0 ) 
    then // Calculate from PwrIdx
      if( LocalStatus( PwrIdx ) > 0 .AND. 
          IfValidAnd( TotEff >= 0 ) )
      then PwrIdx * TotEff / 0.1175 
      else UNCHANGED 
      endif 
    else z:TotStaticPress
    endif
ENDRULE

// -----------------------------------------------------------------------------
//  Use unmodified MtrEff for calculating all other parameters, then change the 
//  annual value to penalize for duct leakage.
RULE Fan:MtrEff
  DESCRIPTION
    "Indicates how well the motor converts electrical power into mechanical power
     and is defined as output power divided by input power expressed as a ratio."
  REFERENCE 
    NACM Section 5.7.3.2
  INPUTCLASS
    Required
  ANNUAL
    if( DuctLeakAdjReq > 0 )
    then                // Increase fan power by 30% if DuctLeakage > 0 by dividing efficiency by 1.3
      MtrEff * 0.769       
    else
      UNCHANGED
    endif
ENDRULE


// -----------------------------------------------------------------------------
//  Use unmodified TotEff for calculating all other parameters, then change the 
//  annual value to penalize for duct leakage.
RULE Fan:TotEff
  DESCRIPTION
    "The total efficiency of the fan. It is the product of the flow (fan) and 
     motor efficiency, for simulation."
  ANNUAL
    if( IfValidAnd( FlowEff >= 0 ) .AND. IfValidAnd( MtrEff > 0 ) )
    then FlowEff * MtrEff
    else UNDEFINED
    endif
ENDRULE


