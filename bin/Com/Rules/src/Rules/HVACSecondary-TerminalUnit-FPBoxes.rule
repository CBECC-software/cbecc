// TerminalUnit - Fan Powered Boxes
//
// -------------------------------------------------------------------------
//  Copyright (c) 2014, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------
//  

//  This rule file addresses the following building descriptors:
//  Section 5.6.5.2 - Fan Powered Boxes
//      Fan Powered Box Type



// ---------- Section 5.6.5.2 - Fan Powered Boxes -----------------------------------
RULE NEW TrmlUnit:IsFanBox
  DATATYPE
    Integer	
  DESCRIPTION
    "A flag that indicates whether the TerminalUnit is a fan-powered box."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type = "ParallelFanBox" .OR. Type = "SeriesFanBox" )
    then 1
    else 0
    endif
  CHECKSIM // See Issue 1450
    if( IsFanBox )
    then 
      if( ChildCount( Fan ) = 0 )
      then 
        PostError("TerminalUnit '%s' is a fan-powered box but does not have a child
                   fan object.", Name)
      else if( ChildCount( Fan ) > 1 )
      then 
        PostError("TerminalUnit '%s' is a fan-powered box but has more than 1 child
                   fan object.", Name)
      else UNCHANGED
      endif endif
    else UNCHANGED
    endif
  SIZING
    if( Type = "ParallelFanBox" .OR. Type = "SeriesFanBox" )
    then 1
    else 0
    endif
  ANNUAL
    z:IsFanBox
ENDRULE

RULE NEW TrmlUnit:FanFlowCap
  DATATYPE
    Float
  LONGFORM
    FanFlowCapacity
  DESCRIPTION
    "The flow capacity of the Fan for fan-powered TerminalUnits."    
  INPUTCLASS
    NotInput
  UNITS 
    cfm
  DEFAULT
    SumChildren( Fan:FlowCap ) * Cnt
  SIZING
    UNDEFINED
  ANNUAL
    SumChildren( Fan:FlowCap ) * Cnt
ENDRULE


// ********** Induction Ratio ********************************************
RULE TrmlUnit:InductionRat
  DESCRIPTION
    "The ratio induced to primary airflow of a fan-powered box at design conditions."
  REFERENCE 
    NACM Section 5.6.5.2
  INPUTCLASS 
    Default
  MINIMUM
    0
  COMMONMAXIMUM
    0.6
  MAXIMUM
    1.0
  REPORTPRECISION
    2
  DEFAULT
    if( Type = "ParallelFanBox" )
    then 0.5
    else UNDEFINED
    endif
  CHECKSIM
    if( Type = "ParallelFanBox" .AND. 
        LocalStatus( InductionRat ) = 0 )
    then
      PostError("Induction is required for TerminalUnit '%s'", Name )
    else UNCHANGED
    endif 
  SIZING
    if( Type != "ParallelFanBox" )
    then UNDEFINED
    else if( BaseSysNum > 0 )
    then 0.5 // For 90.1
    else u:InductionRat
    endif endif
  ANNUAL
    z:InductionRat
ENDRULE

RULE AirSys:TrmlUnit:Fan:FlowCap
// Fan flow capacity for fan-powered boxes
  REPORTPRECISION
    0
  DEFAULT
    if( TrmlUnit:IsFanBox .AND. IfValidAnd( TrmlUnit:PriAirFlowMax > 0 ) )
    then
      if( TrmlUnit:Type = "ParallelFanBox" .AND. 
          IfValidAnd( TrmlUnit:InductionRat > 0 ) )
      then // Paralell box
        TrmlUnit:PriAirFlowMax * TrmlUnit:InductionRat
      else // Series box
        TrmlUnit:PriAirFlowMax
      endif
    else UNDEFINED
    endif
  CHECKSIM
    if( TrmlUnit:IsFanBox .AND. LocalStatus( FlowCap ) = 0 )
    then
      PostError("Fan:FlowCapacity is required for the fan in TerminalUnit '%s'.
                 Make sure all required TerminalUnit properties are defined and
                 if fan properties are user-defined, remove these inputs and
                 this error remains, contact support.", Name )
    else UNCHANGED
    endif
  ANNUAL
    if( TrmlUnit:IsFanBox = 1 )
    then 
      if( TrmlUnit:Type = "ParallelFanBox" ) 
      then // Parallel box
        TrmlUnit:PriAirFlowMax * TrmlUnit:InductionRat
      else // Series box
        TrmlUnit:PriAirFlowMax
      endif
    else UNDEFINED
    endif
ENDRULE


// ********** Fan Powered Box Induced Air Zone *********************************
RULE TrmlUnit:InducedAirZnRef
  DESCRIPTION
    "The ThermalZone from which a series or parallel fan-powered box draws its air."
  HELP
    "The induced air zone is defaulted to be same zone that the box serves.
     A plenum zone or other zone not directly served by an HVAC system can be
     can be specified. However, another 'Conditioned' ThermalZone cannot be
     referenced."
  REFERENCE 
    NACM Section 5.6.5.2
  INPUTCLASS 
    CondRequired
  DEFAULT
    if( IsFanBox .AND. LocalCompAssigned( ZnServedRef ) )
    then ZnServedRef
// TO DO: Add logic to only set to plenum if plenum is only referenced by one PIU terminal
;     if( IfValidAnd( ZnServedRef:IsPlenumRet > 0 ) )
;     then ZnServedRef:RetPlenumZnRef
;     else if( IfValidAnd( ZnServedRef:IsPlenumSup > 0 ) )
;     then ZnServedRef:SupPlenumZnRef 
;     else ZnServedRef
;     endif endif
    else UNDEFINED
    endif
  CHECKSIM
    if( IsFanBox )
    then
      if( LocalCompAssigned( InducedAirZnRef ) = 0 )
      then
        PostError("InducedAirZoneReference is required for TerminalUnit '%s'", Name )
      else if( IfValidAnd( InducedAirZnRef:Name != ZnServedRef:Name ) .AND.
               IfValidAnd( InducedAirZnRef:Type = "Conditioned" ) )
      then
        PostError("TerminalUnit '%s' has an InducedAirZoneReference that is another
                   'Conditioned' ThermalZone. This is not supported.", Name )
      else if( LocalCompAssigned( ZnServedRef:RetPlenumZnRef ) )
      then 
        if( IfValidAnd( InducedAirZnRef:Name = ZnServedRef:RetPlenumZnRef:Name ) )
        then
          PostWarning("TerminalUnit '%s' has an InducedAirZoneReference that is a
                     return air plenum. This may result in unmet load hours.
                     Revising the InducedAirZone to the same zone that the terminal
                     serves (ZoneServedRef) may fix the unmet load issue.", Name )
         else UNCHANGED
         endif
      else if( LocalCompAssigned( ZnServedRef:SupPlenumZnRef ) )
      then 
        if( IfValidAnd( InducedAirZnRef:Name = ZnServedRef:SupPlenumZnRef:Name ) )
        then
          PostWarning("TerminalUnit '%s' has an InducedAirZoneReference that is a
                     supply air plenum. This may result in unmet load hours.
                     Revising the InducedAirZone to the same zone that the terminal
                     serves (ZoneServedRef) may fix the unmet load issue.", Name )
         else UNCHANGED 
         endif
      else UNCHANGED
      endif endif endif endif
    else UNCHANGED
    endif 
  SIZING
    if( IsFanBox )
    then
      if( BaseSysNum > 0 )
      then 
        if( ZnServedRef:IsPlenumRet > 0 )
        then ZnServedRef:RetPlenumZnRef
        else ZnServedRef
        endif
      else u:InducedAirZnRef
      endif
    else UNDEFINED
    endif
  ANNUAL
    z:InducedAirZnRef
ENDRULE


// ********** Fan Powered Box Power ********************************************
RULE TrmlUnit:FanPwrPerFlow
  DESCRIPTION
    "The flow normalized fan power of the fan-powered box."
  HELP
    "This property is used to define the fan power of fan powered TerminalUnits.
     The child Fan object power inputs are defaulted based on this input and therefore
     (currently) not editable when used in this application."
  REFERENCE 
    NACM Section 5.6.5.2
  INPUTCLASS 
    Default
  UNITS
    W/cfm
  MINIMUM 
    0
  COMMONMINIMUM
    0.15
  COMMONMAXIMUM
    0.4
  REPORTPRECISION
    2
  DEFAULT
    if( IsFanBox )
    then 0.35 // Nominal default assumption
    else UNDEFINED
    endif
  CHECKSIM
    if( IsFanBox .AND. LocalStatus( FanPwrPerFlow ) = 0 )
    then
      PostError("PowerPerFlow is required for TerminalUnit '%s'.", Name )
    else UNCHANGED
    endif 
  SIZING
    if( IsFanBox )
    then
      if( BaseSysNum > 0 )
      then 0.35 // For 90.1
      else u:FanPwrPerFlow
      endif
    else UNDEFINED
    endif
  ANNUAL
    z:FanPwrPerFlow
ENDRULE

RULE AirSys:TrmlUnit:Fan:CtrlMthd
  DEFAULT
    "ConstantVolume" 
  SIZING
    if( IsFanBox )
    then "ConstantVolume"
    else UNDEFINED
    endif
  ANNUAL
    z:CtrlMthd
ENDRULE

RULE AirSys:TrmlUnit:Fan:PwrIdx
  DEFAULT
    if( IfValidAnd( TrmlUnit:FanPwrPerFlow > 0 ) )
    then TrmlUnit:FanPwrPerFlow
    else UNDEFINED
    endif
  SIZING
    if( IsFanBox )
    then TrmlUnit:FanPwrPerFlow
    else UNDEFINED
    endif
  ANNUAL
    z:PwrIdx
ENDRULE

RULE AirSys:TrmlUnit:Fan:FlowEff
  REPORTPRECISION
    2
  DEFAULT
    0.5    
  SIZING
    if( TrmlUnit:IsFanBox )
    then 0.5
    else UNDEFINED 
    endif
  ANNUAL
    z:FlowEff
ENDRULE

RULE AirSys:TrmlUnit:Fan:MtrEff
  REPORTPRECISION
    2
  DEFAULT
    if( IfValidAnd( PwrIdx >= 0 ) )
    then 0.855
    else UNDEFINED 
    endif 
  SIZING
    if( IfValidAnd( PwrIdx >= 0 ) )
    then 0.855
    else UNDEFINED 
    endif 
  ANNUAL
    z:MtrEff
ENDRULE

RULE AirSys:TrmlUnit:Fan:TotEff
  REPORTPRECISION
    2
  DEFAULT
    if( IfValidAnd( FlowEff >= 0 ) .AND. IfValidAnd( MtrEff > 0 ) )
    then FlowEff * MtrEff
    else UNDEFINED 
    endif 
  SIZING
    if( IfValidAnd( FlowEff >= 0 ) .AND. IfValidAnd( MtrEff > 0 ) )
    then FlowEff * MtrEff
    else UNDEFINED 
    endif 
  ANNUAL
    z:TotEff
ENDRULE

RULE AirSys:TrmlUnit:Fan:TotStaticPress
  REPORTPRECISION
    2
  DEFAULT 
    if( IfValidAnd( PwrIdx > 0 ) .AND. IfValidAnd( TotEff > 0 ) )
    then PwrIdx * ( TotEff / 0.1175 )   
    else UNDEFINED
    endif
  SIZING
    if( IfValidAnd( PwrIdx > 0 ) .AND. IfValidAnd( TotEff > 0 ) )
    then PwrIdx * ( TotEff / 0.1175 )   
    else UNDEFINED
    endif
  ANNUAL
    z:TotStaticPress
ENDRULE

RULE AirSys:TrmlUnit:Fan:MtrHP
  REPORTPRECISION
    3
  DEFAULT
    if( IfValidAnd( Pwr >= 0 ) )
    then StdElecMtrSize:MotorHPValue("InputMotorHP", Pwr / 1000 / 745.6 )
    else UNDEFINED 
    endif 
  SIZING
    if( IfValidAnd( Pwr >= 0 ) )
    then StdElecMtrSize:MotorHPValue("InputMotorHP", Pwr / 1000 / 745.6 )
    else UNDEFINED 
    endif 
  ANNUAL
    z:MtrEff
ENDRULE


// ********** Parallel Fan Box Control Method **********************************
RULE TrmlUnit:ParallelBoxFanCtrlMthd
  DESCRIPTION
    "The control scheme used to define when a parallel fan-powered box fans operate."
  HELP
    "Currently only 'FlowFraction' is supported."
  REFERENCE 
    NACM Section 5.6.5.2
  INPUTCLASS 
    NotInput
  OPTION
    FlowFraction
;    ThermostatOffset     // Not supported
;    TemperatureSchedule  // Not supported
  DEFAULT
    if( Type = "ParallelFanBox" )
    then "FlowFraction"
    else UNDEFINED
    endif
  SIZING
    if( Type != "ParallelFanBox" )
    then UNDEFINED
    else "FlowFraction"
    endif
  ANNUAL
    z:ParallelBoxFanCtrlMthd
ENDRULE


// ********** Parallel Fan Box Flow Fraction ***********************************
RULE TrmlUnit:ParallelBoxFanFlowFrac
  DESCRIPTION
    "The fraction of the primary air flow at which fan turns on."
  HELP
    "In the parallel PIU the fan operation is intermittent. If the primary air
     flow is above this fraction of the maximum, the fan is off. Otherwise the
     secondary fan will run according to the TerminalUnit availability schedule,
     unless it is overridden by night-cycle control."
  REFERENCE 
    NACM Section 5.6.5.2
  INPUTCLASS 
    Default
  MINIMUM
    0
  COMMONMINIMUM
    0.2
  COMMONMAXIMUM
    0.5
  MAXIMUM
    1.0
  REPORTPRECISION
    2
  DEFAULT
    if( Type = "ParallelFanBox" .AND.
        IfValidAnd( PriAirFlowMin > 0 ) .AND.
        IfValidAnd( PriAirFlowMax > 0 ) )
    then // Fan powered box to turn on at the minimum air flow fraction
      Min( ( PriAirFlowMin / PriAirFlowMax ), 1.0 )
    else UNDEFINED
    endif
  CHECKSIM
    if( Type = "ParallelFanBox" .AND. LocalStatus( ParallelBoxFanFlowFrac ) = 0 )
    then
      PostError("ParallelBoxFanFlowFraction is required for TerminalUnit '%s'.", Name )
    else UNCHANGED
    endif 
  SIZING
    if( Type != "ParallelFanBox" )
    then UNDEFINED
    else if( BaseSysNum > 0 )
    then UNDEFINED // Box flow for sizing is unknown
    else u:ParallelBoxFanFlowFrac
    endif endif
  ANNUAL
    if( Type != "ParallelFanBox" )
    then UNDEFINED
    else
    if( BaseSysNum > 0 )
    then Min( ( PriAirFlowMin / PriAirFlowMax ), 1.0 ) // For 90.1, see GC issue 806
    else z:ParallelBoxFanFlowFrac
    endif endif
ENDRULE


// ********** Simulated Capacities *********************************************
RULE AirSys:TrmlUnit:Fan:FlowCapSim
  ANNUAL
    if( IfValidAnd( FlowCap > 0 ) )
    then FlowCap * SysCnt
    else 0
    endif
ENDRULE



// ** debugging rule evaluation duration **
RULE NEW Proj:RuleEvalDuration
  DEFAULT 
    LogDuration( "            time to evaluate Secondary HVAC DEFAULT rules:  %.3f seconds" )
  SIZING_PROPOSED 
    LogDuration( "            time to evaluate HVAC Secondary SIZING_PROPOSED rules:  %.3f seconds" )
  SIZING_BASELINE
    LogDuration( "            time to evaluate HVAC Secondary SIZING_BASELINE rules:  %.3f seconds" )
  ANNUAL_PROPOSED
    LogDuration( "            time to evaluate HVAC Secondary ANNUAL_BASELINE rules:  %.3f seconds" )
  ANNUAL_BASELINE
    LogDuration( "            time to evaluate HVAC Secondary ANNUAL_BASELINE rules:  %.3f seconds" )
ENDRULE
