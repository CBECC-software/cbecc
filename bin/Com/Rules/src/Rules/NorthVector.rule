// NorthVector
//
// -------------------------------------------------------------------------
//  Copyright (c) 2012, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------
//  

RULE Bldg:BldgAz
  RULESETS
    T24N  
  DESCRIPTION
    "Identifies the angle between True North and the the model Y-Axis, measured 
     clockwise from True North in Degrees"  
  INPUTCLASS
    Required   
  MINIMUM
    0
  MAXIMUM
    360
  DEFAULT
    0
  SIZING
    u:BldgAz
  ANNUAL
    z:BldgAz
ENDRULE

; SAC 8/20/15 - separate RULE to setup the four baseline run orientations
RULE Bldg:BldgAz
  RULESETS
    S901G ECBC
  DESCRIPTION
    "Identifies the angle between True North and the the model Y-Axis, measured 
     clockwise from True North in Degrees"  
  INPUTCLASS
    Required   
  MINIMUM
    0
  MAXIMUM
    360
  DEFAULT
    0
  SIZING_PROPOSED
    u:BldgAz
  SIZING_BASELINE1
    u:BldgAz
  SIZING_BASELINE2
    if (u:BldgAz >= 270)
    then  u:BldgAz - 270
    else  u:BldgAz + 90
    endif
  SIZING_BASELINE3
    if (u:BldgAz >= 180)
    then  u:BldgAz - 180
    else  u:BldgAz + 180
    endif
  SIZING_BASELINE4
    if (u:BldgAz >= 90)
    then  u:BldgAz - 90
    else  u:BldgAz + 270
    endif
  ANNUAL_PROPOSED
    u:BldgAz
  ANNUAL_BASELINE
    z:BldgAz
ENDRULE


RULE Bldg:NAngVector
// renamed for version 2 - was 'NAng' - renamed to fix backward compatibility issue w/ OpenStudio XML inputs
  DESCRIPTION
    "Identifies the angle between the model Y axis and True North, measured 
     clockwise from the Y Axis in Degrees"  
  HELP
    ""  
  INPUTCLASS
    NotInput
  DEFAULT
    if(u:BldgAz = 0)
    then 0
    else 360-(u:BldgAz)
    endif
  SIZING
    UNDEFINED
  ANNUAL
    UNDEFINED
ENDRULE
RULE NEW Bldg:NRad
  DATATYPE
    Float
  LONGFORM
    NorthRadians
  DESCRIPTION
    "Identifies the angle between the model Y axis and True North, measured 
     clockwise from the Y Axis in Radians"  
  HELP
    ""  
  REFERENCE 
    
  INPUTCLASS
    NotInput       
  DEFAULT 
    NAngVector*(3.14159265359/180)
  SIZING
    UNDEFINED
  ANNUAL
    UNDEFINED
ENDRULE

RULE NEW Bldg:UnitVectorNi
  DATATYPE
    Float             
  DESCRIPTION
    "X coordinate of unit vector defining true north"
  INPUTCLASS
    NotInput
  DEFAULT
    if(NAngVector < 0) then
      POSTERROR("NorthAngle Must be greater than or equal to 0 deg") else
    if(NAngVector < 90) then
      SQRT(  ((TAN(NRad))**2)/(1+(TAN(NRad))**2)  ) else
    if(NAngVector = 90) then
      1 else
    if(NAngVector < 180)  then
      SQRT(((TAN(NRad))**2)/(1+(TAN(NRad))**2)) else
    if (NAngVector = 180) then
      0 else
    if(NAngVector < 270) then
     -SQRT(((TAN(NRad))**2)/(1+(TAN(NRad))**2)) else
    if(NAngVector = 270) then
      -1 else
    if(NAngVector < 360) then
      -SQRT(((TAN(NRad))**2)/(1+(TAN(NRad))**2)) else
      POSTERROR("NorthAngle Must be Less than 360 deg")
    endif endif endif endif endif endif endif endif
  SIZING
    UNDEFINED
  ANNUAL
    UNDEFINED
ENDRULE
RULE NEW Bldg:UnitVectorNj
  DATATYPE
    Float             
  DESCRIPTION
    "Y coordinate of unit vector defining true north"
  INPUTCLASS
    NotInput
  DEFAULT
    if(NAngVector < 0) then
      POSTERROR("NorthAngle Must be greater than or equal to 0 deg") else
    if(NAngVector < 90) then
      SQRT(1/(1+(TAN(NRad))**2)) else
    if(NAngVector = 90) then
      0 else
    if(NAngVector < 180)  then
      -SQRT(1/(1+(TAN(NRad))**2)) else
    if (NAngVector = 180) then
      -1 else
    if(NAngVector < 270) then
     -SQRT(1/(1+(TAN(NRad))**2)) else
    if(NAngVector = 270) then
      0 else
    if(NAngVector < 360) then
      SQRT(1/(1+(TAN(NRad))**2)) else
      POSTERROR("NorthAngle Must be Less than 360 deg")
    endif endif endif endif endif endif endif endif
  SIZING
    UNDEFINED
  ANNUAL
    UNDEFINED
ENDRULE



// ** debugging rule evaluation duration **
RULE NEW Proj:RuleEvalDuration
  DEFAULT 
    LogDuration( "            time to evaluate NorthVector DEFAULT rules:  %.3f seconds" )
  SIZING_PROPOSED 
    LogDuration( "            time to evaluate NorthVector SIZING_PROPOSED rules:  %.3f seconds" )
  SIZING_BASELINE 
    LogDuration( "            time to evaluate NorthVector SIZING_BASELINE rules:  %.3f seconds" )
  ANNUAL_PROPOSED
    LogDuration( "            time to evaluate NorthVector ANNUAL_PROPOSED rules:  %.3f seconds" )
  ANNUAL_BASELINE
    LogDuration( "            time to evaluate NorthVector ANNUAL_PROPOSED rules:  %.3f seconds" )
ENDRULE

