 // FluidSystem - Pumps
//
// -------------------------------------------------------------------------
//  Copyright (c) 2012, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
//
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------


//  This rule file addresses the following building descriptors:
//  Section 5.8.5 - Pumps
//      Pump Service
//      Number of Pumps
//      Pump Motor Modeling Method
//      Pump Motor Power-Per-Unit-Flow
//      Pump Motor Horsepower
//      Pump Design Head
//      Pump Impeller Efficiency
//      Pump Motor Efficiency
//      Pump Minimum Speed
//      Pump Minimum Flow Ratio
//      Pump Design Flow
//      Pump Control Type
//      Pump Operation
//      Pump Part Load Curve
//      ..

// ---------- Section 5.8.5 - Pumps -------------------------------






// ********** Status *********************************************************** 
RULE Pump:Status
  DESCRIPTION
    "The status of the system or component, used for additions and alterations."
  INPUTCLASS 
    Default
; OPTION
;   * Defined in BEMEnums, shown here for reference. Default is 'New'
;   New
;   Existing 
  DEFAULT
// Status defined from top-down
    if( Parent( IsNew ) ) then "New" else "Existing" endif
  CHECKCODE
    if( ( Proj:IsNewMech .AND. Status != "New" ) .OR.
        ( Proj:IsAlt = 0 .AND. Status = "Altered" ) )
    then
      PostWarning("Pump '%s' has a Status of '%s', but Compliance Type is '%s'.
                   The status of the system will be changed to 'New' for compliance
                   analysis.", Name, Status, Proj:CompType)
    else UNCHANGED
    endif
   SIZING
    if( IfValidAnd( FluidSys:IsBaseSys > 0 ) .OR. Proj:IsNewMech )
    then "New"
    else u:Status
    endif
  ANNUAL
    if( IfValidAnd( FluidSys:IsBaseSys > 0 ) .OR. Proj:IsNewMech )
    then "New"
    else z:Status
    endif
ENDRULE

RULE NEW Pump:IsNew
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT
    if( Status = "New" .OR. Proj:IsNewMech ) then 1 else 0 endif
  SIZING
    if( Status = "New" .OR. Proj:IsNewMech ) then 1 else 0 endif
  ANNUAL
    if( Status = "New" .OR. Proj:IsNewMech ) then 1 else 0 endif
ENDRULE

RULE NEW Pump:IsExisting
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT
    if( IsNew ) then 0 else 1 endif
  SIZING
    if( IsNew ) then 0 else 1 endif
  ANNUAL
    if( IsNew ) then 0 else 1 endif
ENDRULE


// ********** Pump Count ***********************************************
RULE Pump:Cnt
  DESCRIPTION
    "The number of identical pumps."
  HELP
    ""
  INPUTCLASS
    NotInput
  REFERENCE
    NACM Section 5.8.5
  REPORTPRECISION
    0
//  DEFAULT
//    1
//  MAXIMUM
// TO DO: Revise with multiple (headered) pumps are supported
    1
  SIZING
    1
//    if( IsBaseSys ) 
//    then 1 
//    else u:Cnt
//    endif
  ANNUAL
    if( IsBaseSys ) 
    then 1 
    else z:Cnt
    endif
ENDRULE


// ********** Pump Modeling Method ***********************************************
RULE Pump:ModelingMthd
  DESCRIPTION
    "Defines how the pump is modeled. Options are Detailed and PowerPerUnitFlow."
  HELP
    ""
  INPUTCLASS
    Default
  REFERENCE
    NACM Section 5.8.5
  OPTION
    Detailed
    PowerPerUnitFlow
  DEFAULT
    "Detailed"
  CHECKCODE : T24N
     if( Proj:AnalysisType != "Research" .AND. ModelingMthd = "PowerPerUnitFlow" )
     then 
       PostError("ModelingMethod for pump '%s' is 'PowerPerUnitFlow', which is 
                  is not allowed for compliance analysis.  Revise to 'Detailed'
                  and provide the necessary inputs'", Name)
     else UNCHANGED
     endif
  SIZING : S901G
    if( IsBaseSys ) 
    then "Detailed"
    else u:ModelingMthd
    endif
  SIZING
    if( IsBaseSys ) 
    then
      switch ( Parent2( Type ) )
        case "ChilledWater"    : "Detailed"
        case "CondenserWater"  : "Detailed"
        case "HotWater"        : "PowerPerUnitFlow"
        case "ServiceHotWater" : "PowerPerUnitFlow"
        default : UNDEFINED
      endswitch
    else "Detailed"
    endif
  ANNUAL : S901G
    if( IsBaseSys ) 
    then "Detailed"
    else u:ModelingMthd
    endif
  ANNUAL
    if( IsBaseSys ) 
    then
      switch ( Parent2( Type ) )
        case "ChilledWater"    : "Detailed"
        case "CondenserWater"  : "Detailed"
        case "HotWater"        : "PowerPerUnitFlow"
        case "ServiceHotWater" : "PowerPerUnitFlow"
        default : UNDEFINED
      endswitch
    else "Detailed"
    endif
ENDRULE





// ********** Pump Flow Capacity ***********************************************
// Set tolerance for how close a pumps flow rate must be to it's parent object
// See issue 1328 for reference
RULE NEW Proj:FlowCapTolLim
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  LONGFORM
    FlowCapacityToleranceLimitError
  DESCRIPTION
    "The amount the Pump:FlowCap can differ from it's parent's calculated
     flow without logging an error. If within this tolerance, the pump flow
     capacity will be changed for compliance analysis simulation to be consistent
     with it's parent's flow rate."
  DEFAULT
    0.10
ENDRULE
RULE Pump:FlowCap
  DESCRIPTION
    "The design flow rate of the pump in gpm."
  HELP
    ""
  INPUTCLASS
    Required
  UNITS
    gpm
  REPORTPRECISION
    1
  DEFAULT
    if( Proj:AutoHardSize = 1 .AND.
        Parent2( DsgnSupWtrDelT ) > 0 ) then
    // For PROPOSED AutoHardSizing only
      if( ParentComponentType() = "FluidSeg" ) then
        if( Parent( TotHtRejFromChlr ) > 0 ) then
        // For condenser water loops
          Parent( TotHtRejFromChlr ) / ( Parent2( DsgnSupWtrDelT ) * 500.19 )
        else if( Parent( TotPriEquipCap ) > 0 ) then
        // Other loops
          Parent( TotPriEquipCap ) / ( Parent2( DsgnSupWtrDelT ) * 500.19 )
        else // Size based on sum of coil capacities (non-coincident)
          Parent( CoilClgTotCap ) / ( Parent2( DsgnSupWtrDelT ) * 500.19 )
        endif endif
      // If pumps are children of primary equipment, flow capacity
      // is same as the WtrFlowCap of the parent object.
      else if( ( ParentComponentType() = "Chlr" .OR.
                 ParentComponentType() = "Blr" .OR.
                 ParentComponentType() = "HtRej" ) .AND. 
                 IfValidAnd( ParentValid( WtrFlowCap ) >= 0 ) ) then
        Parent( WtrFlowCap )
        ;Old rule: Parent(CapRtd)/(Parent2(DsgnSupWtrDelT)*500.19)
      else UNCHANGED
      endif endif
    else UNDEFINED
    endif
  CHECKSIM
    if( LocalStatus( FlowCap ) = 0 ) 
    then
      PostError("Flow capacity is a required input for pump '%s'.",Name)
    else // Check for consistency between pump flow rates and that of other equipment. See issue 1328
    if( ParentComponentType() = "Chlr" .AND. SpdCtrl = "ConstantSpeed" )
    then
      if( FlowCap > Chlr:WtrFlowCap * ( 1 + Proj:FlowCapTolLim ) .OR.
          FlowCap < Chlr:WtrFlowCap * ( 1 - Proj:FlowCapTolLim ) )
      then 
        PostError("The flow capacity of Pump '%s' differs by more than %.1f percent
                   from the calculated design flow rate of the Chiller, '%s', it
                   serves. Revise the pump flow rate or Chiller inputs so 
                   flow rates are consistent with eachother.",
                   Name, (Proj:FlowCapTolLim * 100) , Chlr:Name ) 
      else UNCHANGED
      endif
    else
    if( ParentComponentType() = "HtRej" .AND. SpdCtrl = "ConstantSpeed" )
    then
      if( FlowCap > HtRej:WtrFlowCap * ( 1 + Proj:FlowCapTolLim ) .OR.
          FlowCap < HtRej:WtrFlowCap * ( 1 - Proj:FlowCapTolLim ) )
      then 
        PostError("The flow capacity of Pump '%s' differs by more than %.1f percent
                   from the calculated design flow rate of the HeatRejection, '%s', it
                   serves. Revise the pump flow rate or HeatRejection inputs so 
                   flow rates are consistent with eachother.",
                   Name, (Proj:FlowCapTolLim * 100) , HtRej:Name ) 
      else UNCHANGED 
      endif
    else
    if( ParentComponentType() = "Blr" .AND. SpdCtrl = "ConstantSpeed" )
    then
      if( FlowCap > Blr:WtrFlowCap * ( 1 + Proj:FlowCapTolLim ) .OR.
          FlowCap < Blr:WtrFlowCap * ( 1 - Proj:FlowCapTolLim ) )
      then 
        PostError("The flow capacity of Pump '%s' differs by more than %.1f percent
                   from the calculated design flow rate of the Boiler, '%s', it
                   serves. Revise the pump flow rate or Boiler inputs so 
                   flow rates are consistent with eachother.",
                   Name, (Proj:FlowCapTolLim * 100), Blr:Name ) 
      else UNCHANGED 
      endif
    else
    if( ParentComponentType() = "FluidSeg" .AND. SpdCtrl = "ConstantSpeed" )
    then
      if( ( FluidSeg:Type = "PrimarySupply" .OR. FluidSeg:Type = "PrimaryReturn" ) .AND.
          ( FlowCap > FluidSeg:WtrFlowCap * ( 1 + Proj:FlowCapTolLim ) .OR.
            FlowCap < FluidSeg:WtrFlowCap * ( 1 - Proj:FlowCapTolLim ) )
        )
      then 
        PostError("The flow capacity of Pump '%s' differs by more than %.1f 
                   percent from the calculated design flow rate of the equipment
                   served by the pump's parent FluidSegment, '%s'. Revise
                   the pump flow rate or the primary equipment inputs so 
                   flowrates are consistent.",
                   Name, (Proj:FlowCapTolLim * 100), FluidSeg:Name ) 
      else UNCHANGED 
      endif
    else UNCHANGED
    endif endif endif endif endif
  SIZING
    if( IsBaseSys ) 
    then UNDEFINED // AutoSize
    else
    if( ( ParentComponentType() = "Chlr" .OR.
          ParentComponentType() = "HtRej" .OR.
          ParentComponentType() = "Blr" ) .AND.
        IfValidAnd( ParentValid( WtrFlowCap ) > 0 ) .AND.
        SpdCtrl = "ConstantSpeed" )
    then // Override user input to be equal to parent component flow rate. See issue 1328
      Parent( WtrFlowCap ) 
    else 
    if( ParentComponentType() = "FluidSeg" )
    then 
      if( ( FluidSeg:Type = "PrimarySupply" .OR. FluidSeg:Type = "PrimaryReturn" ) .AND.
          IfValidAnd( ParentValid( WtrFlowCap ) > 0 ) .AND.
          SpdCtrl = "ConstantSpeed" )    
      then // Override user input to be equal to parent component flow rate. See issue 1328
        Parent( WtrFlowCap ) 
      else u:FlowCap 
      endif
    else u:FlowCap 
    endif endif endif
  ANNUAL : S901G
    if( IsBaseSys ) then
      if( ParentComponentType() = "FluidSeg" .AND. Parent( Type ) = "SecondarySupply" )
      then
        if( IfValidAnd( Parent2( ChWLoopLd ) > 0 ))
        then Parent2(ChWLoopLd) / 500.19 / Parent2(DsgnSupWtrDelT)
        else UNCHANGED
        endif
      else
        if( ( ParentComponentType() = "Chlr" .OR.
              ParentComponentType() = "Blr" .OR.
              ParentComponentType() = "HtRej" ) .AND. 
            IfValidAnd( ParentValid( WtrFlowCap ) > 0 ) )
        then
          Parent( WtrFlowCap )
        else UNCHANGED
        endif
      endif
    else if( IsExisting )
    then zp:FlowCap
    else z:FlowCap
    endif endif
  ANNUAL
    if( IsBaseSys ) then
      // All baseline pumps are children of primary equipment. Pump flow capacity
      // is same as the WtrFlowCap of the parent object.
      if( ( ParentComponentType() = "Chlr" .OR.
            ParentComponentType() = "Blr" .OR.
            ParentComponentType() = "HtRej" ) .AND. 
          IfValidAnd( ParentValid( WtrFlowCap ) > 0 ) )
      then
        Parent( WtrFlowCap )
        ;Old rule: Parent(CapRtd)/(Parent2( DsgnSupWtrDelT )*500.19)
      else UNCHANGED
      endif
    else if( IsExisting )
    then zp:FlowCap
    else z:FlowCap
    endif endif
ENDRULE

// ********** Pump OperationControl ***********************************************
RULE Pump:OperCtrl
  DESCRIPTION
    "Defines how pump operation is controlled."
  HELP
    "Options are:

    OnDemand - Pumps are only pumping when their associated equipment is cycling

    Standby - Continuous operation, regardless of loop load. This operation continuously
    circulates fluid to circulate through the primary loop of a primary/secondary loop
    system or through a reduced portion of a primary-only system.

    Schedule - Pumps and their associated equipment are turned completely off
    according to occupancy schedules, time of year, or outside conditions.
    When the systems are on, pumps operate in the OnDemand mode."
  INPUTCLASS
    Default
  REFERENCE
    NACM Section 5.8.5
  OPTION
    OnDemand
    StandBy
    Scheduled
  DEFAULT
    "OnDemand"
  CHECKSIM
    if( FluidSys:IsPriSec .AND. 
        ( IfValidAnd( FluidSys:ChlrCnt > 1 ) .OR. IfValidAnd( FluidSys:BlrCnt > 1 ) ) )
    then // Is primary/secondary configuration with more than 1 chiller or boiler
      if( OperCtrl != "Standby" .AND. ParentComponentType() != "FluidSeg" )
      then // Pump that is child of primary component Chlr or Blr, see issue 573
        PostWarning("Pump '%s' is the primary pump for a chiller or boiler 
                     component included as part of a primary/secondary pumping system
                     with more than one primary component. This configuration 
                     results in all primary pumps operating whenever there is any
                     demand on the loop, regardless of whether the corresponding
                     primary equipment is needed. This can result
                     in over-stated pumping energy. Consult the CBECC-Com FAQs 
                     webpage for more information.", Name)
      else UNCHANGED 
      endif
    else UNCHANGED
    endif
  SIZING
    if( IsBaseSys )
    then "OnDemand"
    else u:OperCtrl
    endif
  ANNUAL
    if( IsBaseSys ) 
    then "OnDemand"
    else z:OperCtrl
    endif
ENDRULE

// ********** Pump Impeller Efficiency ***********************************************
RULE Pump:ImpellerEff
  DESCRIPTION
    "Full load efficiency of the pump impeller."
  HELP
    ""
  INPUTCLASS
    Required
  REFERENCE
    NACM Section 5.8.5
  MINIMUM
    0
  COMMONMINIMUM
    0.2
  COMMONMAXIMUM
    0.9
  MAXIMUM
    1
  REPORTPRECISION
    2
  DEFAULT
    if( Proj:AutoEffInput = 1 ) 
    then 0.7
    else UNDEFINED
    endif
  CHECKSIM
    if( IfValidAnd( ImpellerEff > 0 ) = 0 ) 
    then
      PostError("Impeller Efficiency is a required input for pump '%s'",Name)
    else UNCHANGED
    endif
  SIZING
    if( IsBaseSys ) 
    then 1.0 // No pump power for sizing
    else u:ImpellerEff
    endif
  ANNUAL : S901G
    if( IsBaseSys ) 
    then
      switch ( Parent2( Type ) )
        case "ChilledWater"    : 0.72
        case "CondenserWater"  : 0.6667
        case "HotWater"        : 0.6667
        case "ServiceHotWater" : 1.0
        default : 1
      endswitch
    else z:ImpellerEff
    endif
  ANNUAL
    if( IsBaseSys ) 
    then 0.7
    else z:ImpellerEff
    endif
ENDRULE

// ********** Pump PowerPerFlow ***********************************************
// This rule establishes value for rules.  A rule at the end of this file is used
// to update the UI behavior
RULE Pump:PwrPerFlow
  DESCRIPTION
    "The power of the pump per unit flow at design flow capacity."
  HELP
    ""
  INPUTCLASS
    NotInput
  REFERENCE
    NACM Section 5.8.5
  UNITS
    W/gpm
  REPORTPRECISION
    1
  DEFAULT
    if( Proj:AutoEffInput = 1 .AND. Parent2( Type ) = "HotWater" )
    then 19 
    else UNDEFINED
    endif
  SIZING
    if( IsBaseSys )
    then 0 // No pump power for sizing
    else UNDEFINED
    endif
  ANNUAL : S901G
    if( IsBaseSys ) 
    then UNDEFINED
    else u:PwrPerFlow
    endif
  ANNUAL
// TO DO: Check to comfirm pump for ServiceHotWater systems
    if( z:Proj:IsBaseHVAC .AND. Parent2( Type ) = "HotWater" ) 
;          Parent2( Type ) = "ServiceHotWater" ) 
    then 19
    else UNDEFINED
    endif
ENDRULE

// ********** Pump Total Head ***********************************************
RULE Pump:TotHd
  DESCRIPTION
    "The pressure head of the pump at design flow conditions."
  HELP
    ""
  REFERENCE
    NACM Section 5.8.5
  INPUTCLASS
    Required
  UNITS
    ft H20
  MINIMUM
    0
  COMMONMINIMUM
    10
  COMMONMAXIMUM
    150
  REPORTPRECISION
    0
  DEFAULT : S901G
    if( Proj:AutoEffInput = 1 ) 
    then
      if( ParentComponentType() = "FluidSeg" .AND. 
          IfValidAnd( ParentValid( Type ) = "SecondarySupply" ) ) 
      then // Secondary loop pump, use a general default
        switch ( Parent2( Type ) )
          case "ChilledWater"    : 44
          case "CondenserWater"  : 44
          case "HotWater"        : 44
          case "ServiceHotWater" : 44
          default : 44
        endswitch
      else 
        switch ( Parent2( Type ) )
          case "ChilledWater"    : 31
          case "CondenserWater"  : 60
          case "HotWater"        : 60
          case "ServiceHotWater" : 60
          default : 60
        endswitch
      endif
    else UNDEFINED
    endif
  DEFAULT
    if( Proj:AutoEffInput = 1 ) 
    then
      if( ParentComponentType() = "FluidSeg" .AND. 
          IfValidAnd( ParentValid( Type ) = "SecondarySupply" ) ) 
      then // Secondary loop pump, use a general default
        switch ( Parent2( Type ) )
          case "ChilledWater"    : 75
          case "CondenserWater"  : 50
          case "HotWater"        : 60
          case "ServiceHotWater" : 20
          default : 20
        endswitch
      else 
      if( ParentComponentType() = "FluidSeg" ) 
      then // Is a primary loop pump, general default
        switch ( Parent2( Type ) )
          case "ChilledWater"    : 60
          case "CondenserWater"  : 20
          case "HotWater"        : 60
          case "ServiceHotWater" : 20
          default : 20
        endswitch
      else 
      if( ParentComponentType() = "Chlr" .AND.
          IfValidAnd( CapRtd > 0 ) ) 
      then // ACM baseline default algorithm
        Min( 40 + (0.03 * Parent( CapRtd ) / 12000 ), 100 )
      else 
      if(ParentComponentType() = "HtRej" ) 
      then // ACM baseline default
        45 
      else 
      if( LocalStatus( PwrPerFlow ) > 0 .AND. 
          IfValidAnd( FlowCap > 0 ) .AND. 
          IfValidAnd( MtrEff > 0 ) .AND.
          IfValidAnd( ImpellerEff > 0 ) ) 
      then // Calculate based on PwrPerFlow
        ( PwrPerFlow / 745.6 ) * 3960 * MtrEff * ImpellerEff
      else 60 // General default
      endif endif endif endif endif
    else UNDEFINED
    endif
  SIZING
    if( IsBaseSys ) 
    then 0 // No pump power for sizing
    else if( IfValidAnd( u:TotHd < MinTotHd ) .AND. 
             IfValidAnd( MtrHP > 0.75 ) )
    then // Use NACM calculated MinTotHd determined from minimum motor BHP
         // MinMtrBHP = 95% x MHPi-1, only applies to non-fractional motors
      MinTotHd
    else // Use user-defined MtrBHP
      u:TotHd
    endif endif
  ANNUAL : S901G
    if( IsBaseSys ) 
    then
      if( ParentComponentType() = "FluidSeg" .AND. 
          IfValidAnd( ParentValid( Type ) = "SecondarySupply" ) ) 
      then // Secondary loop pump, use a general default
        switch ( Parent2( Type ) )
          case "ChilledWater"    : 44
          case "CondenserWater"  : 44
          case "HotWater"        : 44
          case "ServiceHotWater" : 44
          default : 44
        endswitch
      else 
        switch ( Parent2( Type ) )
          case "ChilledWater"    : 31
          case "CondenserWater"  : 60
          case "HotWater"        : 60
          case "ServiceHotWater" : 60
          default : 60
        endswitch
      endif
    else z:TotHd
    endif
  ANNUAL
    if( IsBaseSys ) 
    then
      if( Parent2( Type ) = "ChilledWater" ) 
      then Min( 40 + ( 0.03 * ( Parent( CapRtd ) / 12000 ) ), 100 )
      else if( Parent2( Type ) = "CondenserWater" ) 
      then 45
      else UNDEFINED // For HotWater and ServiceHotWater, TotHd calculated below
      endif endif
    else z:TotHd
    endif
ENDRULE


// ********** Pump Motor BHP ***********************************************
RULE NEW Pump:AutoEffInputMtrBHP
  DATATYPE
    Float
  LONGFORM
    AutomaticEfficiencyInputMotorBHP
  DESCRIPTION
    "Intermediate value used if AutoEffInput = 1"
  UNITS
    hp
  INPUTCLASS
    NotInput
  DEFAULT
    // For PROPOSED AutoEffInput only
    // Calculate a BHP from TotHd and other inputs
    if( IfValidAnd( Proj:AutoEffInput = 1 ) .AND.
        IfValidAnd( FlowCap > 0 ) .AND.
        IfValidAnd( TotHd > 0 ) .AND.
        IfValidAnd( ImpellerEff > 0 ) ) 
    then FlowCap * TotHd / 3960 / ImpellerEff
    else UNDEFINED
    endif
ENDRULE


// ********** Pump Motor HP ***********************************************
RULE Pump:MtrHP
  DESCRIPTION
    "The nameplate horsepower of the pump motor."
  HELP
    ""
  INPUTCLASS
    Required
  REFERENCE
    NACM Section 5.8.5
  UNITS
    hp
  MINIMUM
    0
  COMMONMINIMUM
    0.083
  COMMONMAXIMUM
    200
  REPORTPRECISION
    3
  DEFAULT
    if( Proj:AutoEffInput = 1 )
    then // For PROPOSED AutoEffInput only
      // Find next largest motor size in Std motor table based on
      // auto-calculated MtrHP or PwrPerFlow
      if( IfValidAnd( MtrBHP > 0 ) )
      then StdElecMtrSize:MotorHPValue("InputMotorHP", MtrBHP)
      else 
      if( IfValidAnd( PwrPerFlow > 0 ) .AND. 
          IfValidAnd( FlowCap > 0 ) )
      then StdElecMtrSize:MotorHPValue("InputMotorHP", PwrPerFlow * FlowCap / 745.6)
      else UNDEFINED
      endif endif
    else UNDEFINED
    endif  
  SIZING
    if( IsBaseSys )
    then UNDEFINED // Not used for sizing
    else u:MtrHP
    endif
  ANNUAL
    if( IsBaseSys )
    then 
      if( IfValidAnd( PwrPerFlow > 0 ) .AND. 
          IfValidAnd( FLowCap > 0 ) )
      then // For pumps specified by PowerPerUnitFlow method, otherwise, see rule below
        StdElecMtrSize:MotorHPValue("InputMotorHP", PwrPerFlow * FlowCap / 745.6)
      else UNDEFINED
      endif
    else z:MtrHP
    endif
ENDRULE

// Proposed motor indices, based on the list of standard motor sizes
RULE NEW Pump:MtrHPIdx_i
  DATATYPE
    Integer
  LONGFORM
    MotorHPIndex_i
  REFERENCE
    NACM Section 5.8.5
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrHP > 0 ) )
    then // Look up index of MtrHP in standard motor size table. If input is 
         // not equal to Std motor size, the table look-up will return index 
         // of next largest Std size
      StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrHP)
    else UNDEFINED
    endif
  SIZING
    if( IsBaseSys )
    then UNDEFINED
    else u:MtrHPIdx_i
    endif
ENDRULE

// Determine index of next motor size below 
RULE NEW Pump:MtrHPIdx_iminus1
  DATATYPE
    Integer
  LONGFORM
    MotorHPIndex_iminus1
  REFERENCE
    NACM Section 5.8.5
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrHPIdx_i > 1 ) ) then
      MtrHPIdx_i - 1
    else 1
    endif
  SIZING
    if( IsBaseSys )
    then UNDEFINED
    else u:MtrHPIdx_iminus1
    endif
ENDRULE

// Calculate the minimum allowed MtrBHP per NACM rules
RULE NEW Pump:MinMtrBHP
  DATATYPE
    Float
  LONGFORM
    MinimumMotorBHP
  DESCRIPTION
    "The minimum allowed MtrBHP used in the Proposed model simulation based on
     user specified MtrHP."
  HELP
    "The minimum Proposed model MtrBHP is Max(User calc MtrBHP, 95% x MHPi-1)"
  REFERENCE 
    NACM Section 5.8.5
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrHP >= 0.083 ) .AND. // Only applicable to motors >= 1/12 hp
        IfValidAnd( MtrBHP > 0 ) .AND. 
        LocalStatus( MtrHPIdx_iminus1 ) > 0 )
    then StdElecMtrPerf:MotorHPValue("MotorHPIndex", MtrHPIdx_iminus1) * 0.95
    else UNDEFINED
    endif
  SIZING
    if( IsBaseSys )
    then UNDEFINED
    else u:MinMtrBHP
    endif
ENDRULE

// Calculate a minimum TotHd based on the minimum MtrBHP
RULE NEW Pump:MinTotHd
  DATATYPE
    Float
  LONGFORM
    MinimumTotalHead
  DESCRIPTION
    "The minimum allowed TotHd used in the Proposed model simulation based on
     user specified MtrHP."
  HELP
    "The minimum Proposed model TotHd is Max(User MtrBHP, 95% x MHPi-1) converted
     to TotHd."
  REFERENCE 
    NACM Section 5.8.5
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MinMtrBHP >= 0 ) .AND.
        IfValidAnd( FlowCap > 0 ) .AND.
        IfValidAnd( TotHd > 0 ) .AND.
        IfValidAnd( ImpellerEff > 0 ) ) 
    then MinMtrBHP / FlowCap * 3960 * ImpellerEff
    else UNDEFINED
    endif
  SIZING
    if( IsBaseSys )
    then UNDEFINED
    else u:MinTotHd
    endif
ENDRULE



// ********** Pump Motor BHP ***********************************************
RULE Pump:MtrBHP
  DESCRIPTION
    "The design motor brake horsepower of the pump."
  REFERENCE
    NACM Section 5.8.5
  INPUTCLASS
    NotInput
  UNITS
    hp
  REPORTPRECISION
    3
  DEFAULT
    if( LocalStatus( AutoEffInputMtrBHP ) > 0 )
    then AutoEffInputMtrBHP
    else
    if( IfValidAnd( FlowCap >= 0 ) .AND.
        IfValidAnd( TotHd >= 0 ) .AND.
        IfValidAnd( ImpellerEff > 0 ) ) 
    then FlowCap * TotHd / 3960 / ImpellerEff
    else UNDEFINED
    endif endif
  CHECKCODE
    if( Proj:IsNoMech .OR. ( IsNoAddMech .AND. IsExisting ) )
    then // Partial envelope or existing, skip check
      UNCHANGED
    else if( IfValidAnd( MtrBHP < MinMtrBHP ) .AND.
             IfValidAnd( MtrHP > 0.75 ) )
    then // User specified MtrBHP is less than ACM required BHP based on user
         // specified MtrHP (applies only to non-fractional hp motors)
      PostWarning("The MotorBHP calculated for pump '%s' is less than the ACM
                   required value for the user-specified MotorHP. The Proposed
                   TotHd will be revised to %.1f ft for compliance analysis.", 
                  Name, MinTotHd)
    else UNCHANGED
    endif endif
  SIZING
    if( IsBaseSys ) 
    then 0  // Not used for sizing
    else if( IfValidAnd( u:MtrBHP < MinMtrBHP ) .AND. IsNew )
    then // Use NACM defined minimum motor BHP ( MinMtrBHP = 95% x MHPi-1 ) 
      MinMtrBHP 
    else // Use user-defined MtrBHP
      u:MtrBHP
    endif endif
  ANNUAL
    if( IsBaseSys ) 
    then // Calculate baseline MtrBHP for reporting of 'Detailed' method
         // See rule below for 'PowerPerUnitFlow' method
      if( IfValidAnd( FlowCap >= 0 ) .AND.
          IfValidAnd( TotHd >= 0 ) .AND.
          IfValidAnd( ImpellerEff > 0 ) ) then
        FlowCap * TotHd / 3960 / ImpellerEff
      else UNDEFINED
      endif
    else z:MtrBHP
    endif
ENDRULE


// ********** Pump Motor HP ****************************************************
// Determine baseline MtrHP and MtrEff for baseline systems that do not use PwrPerFlow
RULE Pump:MtrHP
  ANNUAL
    if( IsBaseSys .AND. 
        LocalStatus( MtrBHP ) > 0 .AND.
        LocalStatus( PwrPerFlow ) = 0 )
    then StdElecMtrSize:MotorHPValue("InputMotorHP", MtrBHP)
    else UNCHANGED
    endif
ENDRULE


// -----------------------------------------------------------------------------
// Determine index in table of Std motor sizes based on MtrHP
RULE NEW Pump:MtrPerfIdx
  DATATYPE
    Integer
  LONGFORM
    MotorPerformanceIndex
  DESCRIPTION
    "The index of motor size according to a list of standard sizes."
  REFERENCE
    NACM Section 5.8.5
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( MtrHP > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrHP)
    else 
    if( IfValidAnd( PwrPerFlow > 0 ) .AND.
        IfValidAnd( FlowCap >= 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", PwrPerFlow * FlowCap / 745.6)
    else UNDEFINED
    endif endif
  SIZING
    if( IfValidAnd( MtrHP > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrHP)
    else UNDEFINED
    endif
  ANNUAL
// Need duplicate of sizing rule since new pumps may be created in ANNUAL_BASELINE
    if( IfValidAnd( MtrHP > 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", MtrHP)
    else 
    if( IfValidAnd( PwrPerFlow > 0 ) .AND.
        IfValidAnd( FlowCap >= 0 ) )
    then StdElecMtrSize:MotorHPIndex("InputMotorHP", PwrPerFlow * FlowCap / 745.6)
    else UNDEFINED
    endif endif
ENDRULE


// ********** Pump Motor Efficiency ********************************************
RULE Pump:MtrEff
  DESCRIPTION
    "Indicates how well the motor converts electrical power into mechanical power
     and is defined as output power divided by input power expressed as a ratio."
  HELP
    ""
  INPUTCLASS
    Required
  REFERENCE
    NACM Section 5.8.5
  MINIMUM
    0.4
  COMMONMINIMUM
    0.6
  COMMONMAXIMUM
    0.98
  REPORTPRECISION
    2
  DEFAULT
    if( Proj:AutoEffInput = 1 .AND. IfValidAnd( MtrPerfIdx > 0 ) )
    then // For PROPOSED AutoEffInput only
      StdElecMtrPerf:MotorEfficiency("MotorHPIndex", MtrPerfIdx)   
    else UNDEFINED
    endif 
  SIZING
    if( IsBaseSys ) 
    then 1.0 // Pump power for sizing is set to 0
    else u:MtrEff
    endif
  ANNUAL : S901G
// Need duplicate of sizing rule since new pumps may be created in ANNUAL_BASELINE
    if( IsBaseSys )
    then 0.90
    else z:MtrEff
    endif
  ANNUAL
// Need duplicate of sizing rule since new pumps may be created in ANNUAL_BASELINE
    if( IsBaseSys )
    then
      if( IfValidAnd( MtrPerfIdx > 0 ) )
      then // Look-up MtrEff
        StdElecMtrPerf:MotorEfficiency("MotorHPIndex", MtrPerfIdx)   
      else 0
      endif
    else z:MtrEff
    endif
ENDRULE

// Calculate TotHd and MtrBHP for PowerPerUnitFlow method
RULE Pump:TotHd
  ANNUAL
    if( IsBaseSys .AND. LocalStatus( PwrPerFlow ) > 0 ) 
    then
      PwrPerFlow / 745.6 * 3960 * MtrEff * ImpellerEff 
    else UNCHANGED
    endif
ENDRULE

RULE Pump:MtrBHP
  REPORTPRECISION
    3
  ANNUAL
    if( IsBaseSys .AND. LocalStatus( PwrPerFlow ) > 0 ) 
    then PwrPerFlow * FlowCap * MtrEff / 745.6
    else UNCHANGED
    endif
ENDRULE

// *****************************************************************************
// See HVACSecondary-Fans-Supply.rule for standard motor size/efficiency tables
// *****************************************************************************


// ********** Pump Speed Control ***********************************************
RULE Pump:SpdCtrl
  DESCRIPTION
    "The type of speed control for the pump."
  HELP
    ""
  INPUTCLASS
    Default
  REFERENCE
    NACM Section 5.8.5
 OPTION
   ConstantSpeed
   VariableSpeed
;  TwoSpeed
  DEFAULT
    "ConstantSpeed"
  CHECKSIM
    if( ( ParentComponentType() = "HtRej" .OR.
          IfValidAnd( FluidSys:Type = "CondenserWater") ) .AND.
         SpdCtrl = "VariableSpeed" .AND.
         FluidSys:HasChiller = 1 ) 
    then // Variable speed pumps on condenser loop not valid
      PostError("Pump '%s' is VariableSpeed and attached to a CondenserWater
                 system serving a chiller. This is currently not supported. 
                 Revise pump SpeedControl to ConstantSpeed.", Name)
    else 
    if( FluidSys:IsPriSec )
    then // Is primary/secondary configuration, see also Pump:OperCtrl
      if( ( ParentComponentType() = "Chlr" .OR. ParentComponentType() = "FluidSeg" )
          .AND. SpdCtrl = "VariableSpeed" ) 
      then // Variable speed pumps on primary loop branch
      PostWarning("Pump '%s' is 'VariableSpeed' and is defined on the primary
                 side of a primary/secondary chilled water loop. This is currently
                 not supported. The pump SpeedControl will be set to 'ConstantSpeed'
                 for the simulation.", Name)
      else UNCHANGED 
      endif
    else UNCHANGED
    endif endif
  SIZING : S901G
    if( IsBaseSys ) then
      if( ParentComponentType() = "Chlr" )
      then "ConstantSpeed"
      else if( ParentComponentType() = "Blr" )
      then if( FluidSys:AreaServed < 120000 ) then "ConstantSpeed" else "VariableSpeed" endif
      else if( ParentComponentType() = "HtRej" )
      then "ConstantSpeed"
      else if( ParentComponentType() = "FluidSeg" .AND. FluidSeg:Type = "SecondarySupply" .AND.
               IfValidAnd(FluidSeg:CoilClgTotCap < (300 * 12000)) ) //300 tons to Btu/h
      then "ConstantSpeed"
      else if( ParentComponentType() = "FluidSeg" .AND. FluidSeg:Type = "SecondarySupply" .AND.
               IfValidAnd(FluidSeg:CoilClgTotCap >= (300 * 12000)) ) //300 tons to Btu/h
      then "VariableSpeed"
      else UNDEFINED 
      endif endif endif endif endif
//
//      if( ParentComponentType() = "Chlr" )
//      then "ConstantSpeed"
//      else if( ParentComponentType() = "FluidSeg" .AND. FluidSeg:Type = "SecondarySupply" .AND.
//               IfValidAnd(FluidSeg:CoilClgTotCap < (300 * 12000)) ) //300 tons to Btu/h
//      then "ConstantSpeed"
//      else if( ParentComponentType() = "FluidSeg" .AND. FluidSeg:Type = "SecondarySupply" .AND.
//               IfValidAnd(FluidSeg:CoilClgTotCap >= (300 * 12000)) ) //300 tons to Btu/h
//      then "VariableSpeed"
//      else if( ParentComponentType() = "Blr" )
//      then if( FluidSys:AreaServed < 120000 ) then "ConstantSpeed" else "VariableSpeed" endif
//      else if( ParentComponentType() = "HtRej" ) then "ConstantSpeed" else UNDEFINED endif
//      endif endif endif endif
    else
      if( u:FluidSys:IsPriSec .AND.               // Is primary/secondary configuration
        (ParentComponentType() = "Chlr" .OR. 
        (FluidSys:Type = "ChilledWater" .AND. ParentComponentType() = "PrimarySupply")) )
      then "ConstantSpeed"                      // See GC issue 908
      else u:SpdCtrl
      endif
    endif
  SIZING
    if( IsBaseSys ) then
      if( ParentComponentType() = "Chlr" ) 
      then "VariableSpeed"
      else if( ParentComponentType() = "Blr" )
      then "ConstantSpeed"
      else if( ParentComponentType() = "HtRej" ) 
      then "ConstantSpeed"
      else UNDEFINED
      endif endif endif
    else
    if( u:FluidSys:IsPriSec .AND.               // Is primary/secondary configuration
        ParentComponentType() = "Chlr" )
    then "ConstantSpeed"                      // See GC issue 908
    else u:SpdCtrl
    endif endif
  ANNUAL : S901G
    if( IsBaseSys ) then
      if( ParentComponentType() = "Chlr" )
      then "ConstantSpeed"
      else if( ParentComponentType() = "Blr" )
      then if( FluidSys:AreaServed < 120000 ) then "ConstantSpeed" else "VariableSpeed" endif
      else if( ParentComponentType() = "HtRej" )
      then "ConstantSpeed"
      else if( ParentComponentType() = "FluidSeg" .AND. FluidSeg:Type = "SecondarySupply" .AND.
               IfValidAnd(FluidSeg:CoilClgTotCap < (300 * 12000)) ) //300 tons to Btu/h
      then "ConstantSpeed"
      else if( ParentComponentType() = "FluidSeg" .AND. FluidSeg:Type = "SecondarySupply" .AND.
               IfValidAnd(FluidSeg:CoilClgTotCap >= (300 * 12000)) ) //300 tons to Btu/h
      then "VariableSpeed"
      else UNDEFINED 
      endif endif endif endif endif
    else z:SpdCtrl
    endif
  ANNUAL
// Need duplicate of sizing rule since new pumps may be created in ANNUAL_BASELINE
    if( IsBaseSys ) then
      if( ParentComponentType() = "Chlr" ) 
      then "VariableSpeed"
      else if( ParentComponentType() = "Blr" )
      then "ConstantSpeed"
      else if( ParentComponentType() = "HtRej" ) 
      then "ConstantSpeed"
      else UNDEFINED
      endif endif endif
    else z:SpdCtrl
    endif
ENDRULE


// ********** Pump Flow Minimum ***********************************************
RULE Pump:FlowMin
  DESCRIPTION
    "For variable speed pumps, the minimum pump/loop flow rate."
  HELP
    ""
  INPUTCLASS
    CondRequired
  UNITS
    gpm
  REPORTPRECISION
    1
  DEFAULT
    if( Proj:AutoHardSize = 1 .AND. SpdCtrl = "VariableSpeed" )
    then FlowCap*0.3
    else UNDEFINED
    endif
  CHECKSIM
    if( LocalStatus( FlowMin ) = 0 .AND. SpdCtrl = "VariableSpeed" )
    then
      PostError("The minimum flow for pump '%s' must be defined if
                 Speed Control = VariableSpeed", Name)
    else UNCHANGED
    endif
  SIZING
    if( SpdCtrl = "VariableSpeed" )
    then
      if( IsBaseSys ) 
      then 0 // No minimum flow for sizing
      else u:FlowMin
      endif
    else UNDEFINED
    endif
  ANNUAL
// Need duplicate of sizing rule since new pumps may be created in ANNUAL_BASELINE
    if( SpdCtrl = "VariableSpeed" )
    then
      if( IsBaseSys ) 
      then FlowCap * 0.3
      else z:FlowMin
      endif
    else UNDEFINED
    endif
ENDRULE


// ********** Pump Power_fPLRCurveReference ************************************
RULE Pump:Pwr_fPLRCrvRef
  DESCRIPTION
    "Part-load curve for the pump."
  HELP
    ""
  INPUTCLASS
    Prescribed
  REFERENCE
    NACM Section 5.8.5
  SIZING : S901G
// ADD 90.1 Constant Speed Curves when PNNL updates the rule library
    if( IsBaseSys )
    then
      if( SpdCtrl = "VariableSpeed" )
      then Rulelibrary(CrvCubic,"PumpVSDRstEPPwrRatio_fGPMRatio")
      else
        if( SpdCtrl = "ConstantSpeed" )
        then Rulelibrary(CrvCubic,"PumpVSDRstEPPwrRatio_fGPMRatio")
        else UNDEFINED
        endif
      endif
    else
      if( SpdCtrl = "VariableSpeed" )
      then
        if( FluidSys:CtrlType = "DDC" )
        then Rulelibrary(CrvCubic,"PumpVSDRstEPPwrRatio_fGPMRatio")
        else Rulelibrary(CrvCubic,"PumpVSDNoRstEPPwrRatio_fGPMRatio")
        endif
      else
        if( SpdCtrl = "ConstantSpeed" )
        then Rulelibrary(CrvCubic,"PumpVSDRstEPPwrRatio_fGPMRatio")
        else UNDEFINED
        endif
      endif
    endif
  SIZING
    if( IsBaseSys ) then
      if( SpdCtrl = "VariableSpeed" ) then
        Rulelibrary(CrvCubic,"PumpVSDRstEPPwrRatio_fGPMRatio")
      else UNDEFINED
      endif
    else if( SpdCtrl = "VariableSpeed" ) then
      if( FluidSys:CtrlType = "DDC" ) then
        Rulelibrary(CrvCubic,"PumpVSDRstEPPwrRatio_fGPMRatio")
      else Rulelibrary(CrvCubic,"PumpVSDNoRstEPPwrRatio_fGPMRatio")
      endif
    else UNDEFINED
    endif endif
  ANNUAL : S901G
// ADD 90.1 Constant Speed Curves when PNNL updates the rule library
    if( IsBaseSys )
    then
      if( SpdCtrl = "VariableSpeed" )
      then Rulelibrary(CrvCubic,"PumpVSDRstEPPwrRatio_fGPMRatio")
      else
        if( SpdCtrl = "ConstantSpeed" )
        then Rulelibrary(CrvCubic,"PumpVSDRstEPPwrRatio_fGPMRatio")
        else UNDEFINED
        endif
      endif
    else z:Pwr_fPLRCrvRef
    endif
  ANNUAL
    if( IsBaseSys ) then
      if( SpdCtrl = "VariableSpeed" ) then
        Rulelibrary(CrvCubic,"PumpVSDRstEPPwrRatio_fGPMRatio")
      else UNDEFINED
      endif
    else z:Pwr_fPLRCrvRef
    endif
ENDRULE


// -----------------------------------------------------------------------------
// Calculate pump power and power per flow for UI and reporting
RULE Pump:Pwr
  DESCRIPTION
    "The design power of the pump."
  HELP
    ""
  INPUTCLASS
    NotInput
  UNITS
    kW
  REPORTPRECISION
    3
  DEFAULT
    if( IfValidAnd( FlowCap >= 0 ) .AND.
        IfValidAnd( TotHd >= 0 ) .AND.
        IfValidAnd( ImpellerEff > 0 ) .AND.
        IfValidAnd( MtrEff > 0 ) ) 
    then FlowCap * TotHd / 3960 / ( ImpellerEff * MtrEff ) * 745.6 / 1000
    else UNDEFINED
    endif
  SIZING
    if( IsBaseSys ) 
    then 0 // No pump power for sizing
    else    
    if( IfValidAnd( FlowCap >= 0 ) .AND.
        IfValidAnd( TotHd >= 0 ) .AND.
        IfValidAnd( ImpellerEff > 0 ) .AND.
        IfValidAnd( MtrEff > 0 ) ) 
    then FlowCap * TotHd / 3960 / ( ImpellerEff * MtrEff ) * 745.6 / 1000
    else UNDEFINED
    endif endif
  ANNUAL
    if( IsBaseSys ) 
    then
      if( IfValidAnd( FlowCap >= 0 ) .AND.
          IfValidAnd( TotHd >= 0 ) .AND.
          IfValidAnd( ImpellerEff > 0 ) .AND.
          IfValidAnd( MtrEff > 0 ) ) 
      then FlowCap * TotHd / 3960 / ( ImpellerEff * MtrEff ) * 745.6 / 1000
      else UNDEFINED
      endif
    else z:Pwr
    endif
ENDRULE

// Calculate PowerPerUnitFlow from calculated Pwr
RULE Pump:PwrPerFlow
  REPORTPRECISION
    1
  DEFAULT
    if( IfValidAnd( FlowCap > 0 ) .AND.
        IfValidAnd( Pwr > 0 ) ) 
    then Pwr * 1000 / FlowCap
    else UNDEFINED
    endif
  SIZING
    if( IsBaseSys ) 
    then UNDEFINED // No pump power for sizing
    else 
    if( IfValidAnd( FlowCap > 0 ) .AND.
        IfValidAnd( Pwr > 0 ) ) 
    then Pwr * 1000 / FlowCap
    else UNDEFINED
    endif endif
  ANNUAL
    if( IsBaseSys ) 
    then
      if( IfValidAnd( FlowCap > 0 ) .AND.
          IfValidAnd( Pwr > 0 ) ) 
      then Pwr * 1000 / FlowCap
      else UNDEFINED
      endif
    else z:PwrPerFlow
    endif
ENDRULE


// -----------------------------------------------------------------------------
// ** debugging rule evaluation duration **
RULE NEW Proj:RuleEvalDuration
  DEFAULT
    LogDuration( "            time to evaluate Primary HVAC DEFAULT rules:  %.3f seconds" )
  SIZING_PROPOSED
    LogDuration( "            time to evaluate Primary HVAC SIZING_PROPOSED rules:  %.3f seconds" )
  SIZING_BASELINE
    LogDuration( "            time to evaluate Primary HVAC SIZING_BASELINE rules:  %.3f seconds" )  
  ANNUAL_PROPOSED
    LogDuration( "            time to evaluate Primary HVAC ANNUAL_PROPOSED rules:  %.3f seconds" )
  ANNUAL_BASELINE
    LogDuration( "            time to evaluate Primary HVAC ANNUAL_BASELINE rules:  %.3f seconds" )
ENDRULE






