// AirSystem - General
//
// -------------------------------------------------------------------------
//  Copyright (c) 2012, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------


//  This rule file addresses the following building descriptors:
//  Section 5.7.1 - Basic System Information
//      System Type
//      Air Distribution Type
//      Total Cooling Capacity


// ********** System Type ******************************************************
// =========================== AirSystem =======================================
RULE AirSys:Type
  DESCRIPTION
    "A unique descriptor which identifies high level attributes of a HVAC system."
  REFERENCE 
    NACM Section 5.7.1 
  INPUTCLASS 
    Compulsory
// Enums defined in BEMEnums.txt since property referenced by Library object
//OPTION
// - specify -
// PVAV
// VAV
// SZAC
// SZHP
// SZVAVAC
// SZVAVHP
// HV
// Exhaust
// SPVAC
// SPVHP
// ;DFDD
// ;ACHB     
// ;UFAD
// ;DV
// ;WSHP
// ;GSHP
// ;VRF
// ;IdealLds
// ;Other
//DEFAULT
//  - specify -
  CHECKSIM
    if( SumRevRef(ThrmlZn:PriAirCondgSysRef, ThrmlZn:Area) = 0 .AND.
        SumRevRef(ThrmlZn:VentSysRef, ThrmlZn:Area) = 0 .AND.
        SumRevRef(ThrmlZn:ExhSysRef, ThrmlZn:Area) = 0 )
    then 
      PostError("AirSystem '%s' is not referenced as Primary, Ventilation,
                 or Exhaust system by any ThermalZones.", Name)
    else 
    if( ( ChildCount( CoilHtg ) + ChildCount( CoilClg ) ) > 0 .AND.
        IsExhSys )
    then 
      PostError("AirSystem '%s' is defined as Type = 'Exhaust', but it has
                 heating and/or cooling coils. This is currently not supported.", 
                 Name)
    else 
    if( ( Type = "SZHP" .OR.
          Type = "SZVAVHP" ) .AND.
        SumChildren( AirSeg:HtPumpCap ) <= 0 )
    then
        PostError("AirSystem '%s' is defined as Type = '%s', but it does not have
                   heating coil of Type = 'HeatPump' heating source, or that coil
                   has 0 heating capacity. Revise the system Type to be SZAC or
                   SZVAVAC if a non-HP system is desired.",
                   Name, Type)
    else UNCHANGED
    endif endif endif
  SIZING  
// AirSys:Type for baseline systems defined in Library_HVAC file
  ANNUAL
    z:Type
ENDRULE
RULE NEW AirSys:IsExhSys
  DATATYPE
    Integer
  LONGFORM
    IsExhaustSystem
  DESCRIPTION
    "An integer flag that indicates the system Type is 'Exhaust'."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type = "Exhaust" )
    then 1
    else 0
    endif
  SIZING
    if( Type = "Exhaust" )
    then 1
    else 0
    endif
  ANNUAL
    z:IsExhSys
ENDRULE
RULE NEW AirSys:IsResExhSys
  DATATYPE
    Integer
  LONGFORM
    IsResidentialExhaustSystem
  DESCRIPTION
    "An integer flag that indicates the system Type is 'Exhaust' and serves a 
     Residential ThermalZone."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys .AND. CountRefs( ThrmlZn:ExhSysRef ) > 0 )
    then 
      if( SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:VentSysIsExh ) /
          CountRefs( ThrmlZn:ExhSysRef ) = 2 )
      then 1
      else 0
      endif
    else 0
    endif
ENDRULE
RULE NEW AirSys:IsVentOnlySys
  DATATYPE
    Integer
  LONGFORM
    IsVentilationOnlySystem
  DESCRIPTION
    "An integer flag that indicates the system is only referenced at
     ThermalZones as a VentSysRef."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:FlrArea ) = 0 .AND.
        SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FlrArea ) > 0 )
    then 1
    else 0
    endif
ENDRULE
// =========================== ZoneSystem ======================================
RULE ZnSys:Type
  DESCRIPTION
    "A unique descriptor which identifies high level attributes of a HVAC system."
  REFERENCE 
    NACM Section 5.7.1 
  INPUTCLASS 
    Compulsory
// Enums defined in BEMEnums.txt since property referenced by Library object
//OPTION
// - specify -
// SZAC
// SZHP
// PTAC
// PTHP
// FPFC
// WSHP
// Baseboard
// Exhaust
// SPVAC
// SPVHP
// ;HV
// ;PCHB       
// ;GSHP
// ;ERV
// ;RadFlr
// ;IdealLds
// ;Other
//DEFAULT
//  "- specify -"
  CHECKCODE
     if( ( Type = "SZAC" .OR. Type = "SZHP" ) .AND. IfValidAnd( ClgCap >= 135000 ) )
     then
      PostError("ZoneSystem '%s' is Type = SZAC or SZHP, and has a cooling capacity
                 >135,000 Btu/hr. This is currently not supported. Use an AirSystem
                 for large AC/HP systems.", Name)
     else UNCHANGED
     endif
  CHECKSIM
    if( SumRevRef(ThrmlZn:PriAirCondgSysRef, ThrmlZn:Area) = 0 .AND.
;        SumRevRef(ThrmlZn:SecAirCondgSysRef, ThrmlZn:Area) = 0 .AND.
        SumRevRef(ThrmlZn:VentSysRef, ThrmlZn:Area) = 0 .AND.
        SumRevRef(ThrmlZn:ExhSysRef, ThrmlZn:Area) = 0 )
    then 
      PostError("ZoneSystem '%s' is not referenced as a Primary, Ventilation,
                 or Exhaust system by any ThermalZones.", Name)
    else
    if( ( ChildCount( CoilHtg ) + ChildCount( CoilClg ) ) > 0 .AND.
        IsExhSys )
    then 
      PostError("ZoneSystem '%s' is defined as Type = 'Exhaust' but has
                 heating and/or cooling coils. This is currently not supported.", 
                 Name)
    else
    if( HtPumpCap = 0 .AND. 
        ( Type = "SZHP" .OR. Type = "PTHP" .OR. 
          Type = "WSHP" ) )
    then
      PostError("ZoneSystem '%s' is defined as Type = '%s' but lacks a heating 
                 coil of Type = 'HeatPump', or has 0 Btu/h HP capacity
                 For this system Type, a 'HeatPump' coil must be defined. 
                 Set to 1 Btu/hr if the system has no HP heating capacity.",
                 Name, Type)
    else
    if( DXCap = 0 .AND. 
        ( Type = "SZAC" .OR. Type = "SZHP" .OR. 
          Type = "PTAC" .OR. Type = "PTHP" .OR. 
          Type = "WSHP" ) )
    then
      PostError("ZoneSystem '%s' is defined as Type = '%s' but lacks a cooling
                 coil of Type = 'DirectExpansion', or has 0 Btu/h DX capacity.
                 For this system type, a 'DirectExpansion' coil must be defined. 
                 Set to 1 Btu/hr if the system has no DX cooling capacity.",
                 Name, Type)
    else
    if( SumChildrenIf( CoilHtg:CapTotGrossRtd, CoilHtg:Type = "HotWater" ) = 0 .AND.
        Type = "FPFC" )
    then 
      PostError("ZoneSystem '%s' is Type = 'FPFC' but lacks a heating coil of
                 Type = 'HotWater' or has 0 Btu/h heating capacity.
                 For this system type, a 'HotWater' coil must be defined. 
                 Set to 1 Btu/hr if the system has no HW capacity.",
                 Name)
    else
    if( SumChildrenIf( CoilClg:CapTotGrossRtd, CoilClg:Type = "ChilledWater" ) = 0 .AND.
        Type = "FPFC" )
    then 
      PostError("ZoneSystem '%s' is Type = 'FPFC' but lacks a cooling coil of 
                 Type = 'ChilledWater', or has 0 Btu/h cooling capacity.
                 For this system type, a 'ChilledWater' coil must be defined. 
                 Set to 1 Btu/hr if the system has no ChW cooling capacity.",
                 Name)
    else
    if( SumChildren( Fan:FlowCap ) <= 0 .AND. Type = "FPFC" )
    then 
      PostError("ZoneSystem '%s' is Type = 'FPFC' but lacks a fan or 
                 the fan has a flow capacity of 0 cfm.
                 This is currently not supported.", Name)
    else
    if( IsExhSys = 0 .AND. ChildCount( CoilHtg ) = 0 )
    then 
      PostError("ZoneSystem '%s' is Type = %s, but has no heating coil.
                 This is currently not supported. If the system has no heating coil,
                 model an appropriate Type heating coil with 1 Btu/hr capacity,
                 or use the AirSystem object.", Name, Type)   
    else
    if( ( IsExhSys = 0 .AND. Type != "Baseboard" ) .AND. ChildCount( CoilClg ) = 0 )
    then 
      PostError("ZoneSystem '%s' is Type = %s, but has no cooling coil.
                 This is currently not supported. If the system has no cooling coil,
                 model the appropriate Type cooling coil with 1 Btu/hr capacity,
                 or use the AirSystem object.", Name, Type)   
    else UNCHANGED
    endif endif endif endif endif endif
    endif endif endif
  SIZING
// ZnSys:Type for baseline systems defined in Library_HVAC file
  ANNUAL
    z:Type
ENDRULE
RULE NEW ZnSys:IsExhSys
  DATATYPE
    Integer
  LONGFORM
    IsExhaustSystem
  DESCRIPTION
    "An integer flag that indicates the system Type is 'Exhaust'."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type = "Exhaust" )
    then 1
    else 0
    endif
  SIZING
    if( Type = "Exhaust" )
    then 1
    else 0
    endif
  ANNUAL
    z:IsExhSys
ENDRULE
RULE NEW ZnSys:IsResExhSys
  DATATYPE
    Integer
  LONGFORM
    IsResidentialExhaustSystem
  DESCRIPTION
    "An integer flag that indicates the system Type is 'Exhaust' and serves a 
     Residential ThermalZone."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsExhSys .AND. CountRefs( ThrmlZn:ExhSysRef ) > 0 )
    then 
      if( SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:VentSysIsExh ) /
          CountRefs( ThrmlZn:ExhSysRef ) = 2 )
      then 1
      else 0
      endif
    else 0
    endif
ENDRULE
RULE NEW ZnSys:IsVentOnlySys
  DATATYPE
    Integer
  LONGFORM
    IsVentilationOnlySystem
  DESCRIPTION
    "An integer flag that indicates the system is only referenced at
     ThermalZones as a VentSysRef."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:FlrArea ) = 0 .AND.
        SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:FlrArea ) > 0 )
    then 1
    else 0
    endif
ENDRULE

// =========================== ZoneSystem Type Report ===============================
RULE ZnSys:TypeRpt
  RULESETS
    T24N
  DESCRIPTION
    "Translates Type to TypeRpt."
  INPUTCLASS 
    NotInput
  OPTION
    SZAC
    SZHP
    PTAC
    PTHP
    FPFC
    Baseboard
    WSHP
    Exhaust
  ANNUAL_PROPOSED
    switch( Type )
      case "SZAC"      : "SZAC" 
      case "SZHP"      : "SZHP"
      case "PTAC"      : "PTAC" 
      case "PTHP"      : "PTHP"   
      case "FPFC"      : "FPFC"
      case "Baseboard" : "Baseboard"
      case "WSHP"      : "WSHP"
      case "Exhaust"   : "Exhaust"
      default : UNDEFINED
    endswitch
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW AirSys:IsMultiZnSys
  DATATYPE
    Integer
  LONGFORM
    IsMultiZoneSystem
  DESCRIPTION
    "A flag that indicates if the AirSys:Type is classified as a 'multi-zone' 
     system for rules."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type = "PVAV" .OR. 
        Type = "VAV" )
    then 1 
    else 0
    endif    
  SIZING
    if( Type = "PVAV" .OR. 
        Type = "VAV" )
    then 1 
    else 0
    endif  
ENDRULE
RULE NEW ZnSys:IsMultiZnSys
  DATATYPE
    Integer
  LONGFORM
    IsMultiZoneSystem
  INPUTCLASS
    NotInput
  DEFAULT
    0
  SIZING
    0
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW AirSys:IsSglZnSys
  DATATYPE
    Integer
  LONGFORM
    IsSingleZoneSystem
  DESCRIPTION
    "A flag that indicates if the AirSys:Type is classified as a 'single-zone' 
     system for rules."
  INPUTCLASS
    NotInput
  DEFAULT
    if( IsMultiZnSys = 0 ) then 1 else 0 endif
;   if( LocalStatus( Type ) = 0 )
;   then 0
;   else 
;     switch( Type )
;       case "SZAC"      :  1
;       case "SZHP"      :  1
;       case "PVAV"      :  0
;       case "VAV"       :  0
;       case "SZVAVAC"   :  1
;       case "SZVAVHP"   :  1
;       case "HV"        :  1
;       default          :  1
;     endswitch
;   endif
  SIZING
    if( IsMultiZnSys = 0 ) then 1 else 0 endif
;   switch( Type )
;     case "SZAC"      :  1
;     case "SZHP"      :  1
;     case "PVAV"      :  0
;     case "VAV"       :  0
;     case "SZVAVAC"   :  1
;     case "SZVAVHP"   :  1
;     case "HV"        :  1
;     default          :  1
;   endswitch
ENDRULE
RULE NEW ZnSys:IsSglZnSys
  DATATYPE
    Integer
  LONGFORM
    IsSingleZoneSystem
  INPUTCLASS
    NotInput
  DEFAULT
    1
  SIZING
    1
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW AirSys:IsVAVSys
  DATATYPE
    Integer
  LONGFORM
    IsVariableAirVolumeSystem
  DESCRIPTION
    "A flag that indicates if the AirSys:Type is classified as a 'variable air volume' 
     system for rules."
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalStatus( Type ) = 0 )
    then 0
    else if( IsExhSys .AND. ExhCtrlMthd = "VariableFlowVariableSpeedFan" )
    then 1
    else
      switch( Type )
        case "PVAV"      :  1
        case "VAV"       :  1
        case "SZVAVAC"   :  1
        case "SZVAVHP"   :  1
        default          :  0
      endswitch
    endif endif
  SIZING
    if( IsExhSys .AND. ExhCtrlMthd = "VariableFlowVariableSpeedFan" )
    then 1
    else
    switch( Type )
      case "PVAV"      :  1
      case "VAV"       :  1
      case "SZVAVAC"   :  1
      case "SZVAVHP"   :  1
      default          :  0
    endswitch
    endif
ENDRULE
RULE NEW ZnSys:IsVAVSys
  DATATYPE
    Integer
  LONGFORM
    IsVariableAirVolumeSystem
  DESCRIPTION
    "A flag that indicates if the ZnSys:Type is classified as a 'variable air volume' 
     system for rules."
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalStatus( Type ) = 0 )
    then 0
    else if( IsExhSys .AND. ExhCtrlMthd = "VariableFlowVariableSpeedFan" )
    then 1
    else if( Type = "FPFC" .AND. SumChildrenIf( Fan:FlowCap, Fan:CtrlMthd = "VariableSpeedDrive" ) )
    then 1
    else 0
    endif endif endif
  SIZING
    if( IsExhSys .AND. ExhCtrlMthd = "VariableFlowVariableSpeedFan" )
    then 1
    else if( Type = "FPFC" .AND. SumChildrenIf( Fan:FlowCap, Fan:CtrlMthd = "VariableSpeedDrive" ) )
    then 1
    else 0
    endif endif
ENDRULE
  
  

// ********** Status ***********************************************************
// =========================== AirSystem =======================================
RULE AirSys:Status
  DESCRIPTION
    "The status of the system or component, used for additions and alterations."
  HELP
    "The following criteria should be used to determine the status of the system:


     New:      The system and all of it's components are completely 'New'.


     Existing: All of the system components (Fans, Coils, OutsideAirControl, etc),
               not including TerminalUnits with cooling coils, are 'Existing'. 
               If the system has a mix of 'Existing' and 'New' TerminalUnits, 
               and the system's cooling capacity and/or efficiency has not changed,
               the system should be classified as 'Existing'.


     Altered:  The system is 'Existing', but some components (other than only
               TerminalUnits) have been modified or replaced such that the cooling
               capacity and/or cooling efficiency of the system, or in the case
               of chilled water coils, the cooling capacity and/or efficiency 
               of the plant, has changed."
  INPUTCLASS 
    Default
; OPTION
;   * Defined in BEMEnums, shown here for reference. Default is 'New' 
;   New
;   Existing 
;   Altered
  DEFAULT
// Status defined from top-down
    if( Proj:IsAlt = 1 )
    then "Existing"
    else "New"
    endif
  CHECKCODE
    if( ( Proj:IsNewMech .AND. Status != "New" ) .OR.
        ( Proj:IsAlt = 0 .AND. Status = "Altered" ) )
    then
      PostWarning("AirSystem '%s' has a Status of '%s', but ComplianceType is '%s'.
                   The status of the system will be changed to 'New' for compliance
                   analysis.", Name, Status, Proj:CompType)
    else UNCHANGED
    endif
  SIZING
    if( IfValidAnd( BaseSysNum > 0 ) .OR. Proj:IsNewMech )
    then "New"
    else u:Status
    endif
  ANNUAL
    z:Status
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW AirSys:NotEnclosedSys
  RULESETS
    S901G ECBC
  DATATYPE
    Integer
  LONGFORM
    NotEnclosedSystem
  INPUTCLASS
    NotInput
  DESCRIPTION
    "A flag that is used to indicate if the system serves zone(s) classified
     as 'NotEnclosed'."
  DEFAULT
    if( MaxRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:NotEnclosedZn ) = 1 .OR.
        MaxRevRef( ThrmlZn:VentSysRef, ThrmlZn:NotEnclosedZn ) = 1 )
    then 1
    else 0
    endif
  CHECKSIM
    if( NotEnclosedSys )
    then 
      if( ( SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:NotEnclosedZn ) !=
            CountRefs( ThrmlZn:PriAirCondgSysRef ) )
           .OR.
          ( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:NotEnclosedZn ) !=
            CountRefs( ThrmlZn:VentSysRef ) ) )
      then 
        PostError("AirSystem '%s' serves a combination of 'NotEnclosed' and
                   'Enclosed' zones. This is currently not supported.
                   NotEnclosed zones include mechanically or naturally ventilated
                   parking garages, attics, and crawlspaces.", Name )
      else UNCHANGED
      endif
    else UNCHANGED
    endif    
ENDRULE

RULE NEW AirSys:IsCondgSys
  DATATYPE
    Integer
  LONGFORM
    ConditioningSystem
  INPUTCLASS
    NotInput
  DESCRIPTION
    "A flag that is used to indicate if the system serves zone(s) classified
     as 'Conditioned'."
  DEFAULT
    if( IsExhSys )
    then 0
    else
    if( MaxRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:IsCond ) = 1 .OR.
        MaxRevRef( ThrmlZn:VentSysRef, ThrmlZn:IsCond ) = 1 ) 
    then 1
    else 0
    endif endif
  CHECKSIM
    if( IsCondgSys )
    then     
      if( ( SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:IsCond ) !=
            CountRefs( ThrmlZn:PriAirCondgSysRef ) )
           .OR.
          ( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:IsCond ) !=
            CountRefs( ThrmlZn:VentSysRef ) ) )
      then 
        PostError("AirSystem '%s' serves a combination of 'Conditioned' and
                   'Unconditioned' zones. This is currently not supported.", Name )
      else UNCHANGED
      endif  
    else UNCHANGED
    endif
ENDRULE


// -----------------------------------------------------------------------------
RULE NEW AirSys:IsExisting
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT
    if( Status = "Existing" .AND. Proj:IsAddOrAlt ) then 1 else 0 endif
  SIZING
    if( Status = "Existing" .AND. Proj:IsAddOrAlt ) then 1 else 0 endif
  ANNUAL
    z:IsExisting
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW AirSys:IsAltered
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT
    if( Status = "Altered" .AND. Proj:IsAlt ) then 1 else 0 endif
  SIZING
    if( Status = "Altered" .AND. Proj:IsAlt ) then 1 else 0 endif
  ANNUAL
    z:IsAltered
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW AirSys:IsNew
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT
    if( Status = "New" .OR. Proj:IsNewMech )
    then 1
    else if( ( IsAltered + IsExisting ) = 0 )
    then 1
    else 0
    endif endif
  SIZING : T24N
    if( Status = "New" .OR. Proj:IsNewMech )
    then 1
    else if( ( IsAltered + IsExisting ) = 0 )
    then 1
    else 0
    endif endif
  SIZING : S901G ECBC
    if( Status = "New" .AND. IfValidAnd( NotEnclosedSys = 1 ) = 0 ) 
    then 1
    else 0
    endif
  ANNUAL
    z:IsNew
ENDRULE


// =========================== ZnSystem ========================================
RULE ZnSys:Status
  DESCRIPTION
    "The status of the system or component, used for additions and alterations."
  HELP
    "The following criteria should be used to determine the status of the system:


     New:      The system and all of it's components are completely 'New'.


     Existing: All of the system components (Fans and Coils) are 'Existing'. 


     Altered:  The system is 'Existing', but some components have been modified
               or replaced such that the cooling capacity and/or cooling efficiency
               of the system, or in the case of chilled water coils, the cooling
               capacity and/or efficiency of the plant, has changed."
  INPUTCLASS 
    Default
; OPTION
;   * Defined in BEMEnums, shown here for reference. Default is 'New' 
;   New
;   Existing 
;   Altered
  DEFAULT
// Status defined from top-down
    if( Proj:IsAlt = 1 )
    then "Existing"
    else "New"
    endif
  CHECKCODE
    if( Proj:IsNewMech .AND. Status != "New"  )
    then
      PostWarning("ZoneSystem '%s' has a Status of '%s', but Compliance Type is '%s'.
                   The status of the system will be changed to 'New' for compliance
                   analysis.", Name, Status, Proj:CompType)
    else UNCHANGED
    endif
// SIZING and ANNUAL rules not used; status of any new objects created by rules 
// is defined by BEMEnums default
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW ZnSys:NotEnclosedSys
  RULESETS
    S901G ECBC
  DATATYPE
    Integer
  LONGFORM
    NotEnclosedSystem
  INPUTCLASS
    NotInput
  DESCRIPTION
    "A flag that is used to indicate if the system serves a zone that is classified
     as 'NotEnclosed'."
  DEFAULT
    if( MaxRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:NotEnclosedZn ) = 1 .OR.
        MaxRevRef( ThrmlZn:VentSysRef, ThrmlZn:NotEnclosedZn ) = 1 )
    then 1
    else 0
    endif
ENDRULE

RULE NEW ZnSys:IsCondgSys
  DATATYPE
    Integer
  LONGFORM
    ConditioningSystem
  INPUTCLASS
    NotInput
  DESCRIPTION
    "A flag that is used to indicate if the system serves zone(s) classified
     as 'Unconditioned'."
  DEFAULT
    if( IsExhSys )
    then 0
    else
    if( MaxRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:IsCond ) = 1 .OR.
        MaxRevRef( ThrmlZn:VentSysRef, ThrmlZn:IsCond ) = 1 )
    then 1
    else 0
    endif endif
  CHECKSIM
    if( IsCondgSys )
    then 
      if( ( SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:IsCond ) !=
            CountRefs( ThrmlZn:PriAirCondgSysRef ) )
           .OR.
          ( SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:IsCond ) !=
            CountRefs( ThrmlZn:VentSysRef ) ) )
      then 
        PostError("ZoneSystem '%s' serves a combination of 'Conditioned' and
                   'Unconditioned' zones. This is currently not supported.", Name )
      else UNCHANGED
      endif
   else UNCHANGED
   endif 
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW ZnSys:IsNew
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT
    if( Status = "New" .OR. Proj:IsNewMech ) then 1 else 0 endif
  SIZING : T24N
    if( Status = "New" .OR. Proj:IsNewMech ) then 1 else 0 endif
  SIZING : S901G ECBC
    if( Status = "New" .AND. IfValidAnd( NotEnclosedSys = 1 ) = 0 ) then 1 else 0 endif
  ANNUAL
    z:IsNew
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW ZnSys:IsExisting
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT
    if( IsNew ) then 0 else 1 endif
  SIZING
    if( IsNew ) then 0 else 1 endif
  ANNUAL
    z:IsExisting
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW ZnSys:IsAltered
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT
    if( Status = "Altered" .AND. Proj:IsAlt ) then 1 else 0 endif
  SIZING
    if( Status = "Altered" .AND. Proj:IsAlt ) then 1 else 0 endif
  ANNUAL
    z:IsAltered
ENDRULE




// ********** System Count *****************************************************
// =========================== AirSystem =======================================
RULE AirSys:Cnt
  DESCRIPTION
    "The number of duplicate systems represented by the current AirSystem."
  HELP
    "The number of duplicate systems (i.e. Count > 1) is limited to the
     following individual scenarios:

     a) For single-zone systems (SZAZ/HP, SZVAVAC/HP, HV), all attributes of 
     the system are the same and the AirSystem represents multiple
     systems that serve a ThermalZone with an HVACZoneCount > 1. In this
     scenario, the ThermalZone:HVACZoneCount and AirSystem:Count should be 
     consistent with eachother. 

     b) For multi-zone systems (PVAV and VAV), all attributes of the system are
     the same and the AirSystem represents multiple systems that serve
     ThermalZones that also have a Multiplier > 1. In this scenario, the
     ThermalZone:Multiplier (derived from the user input for Story:Multiplier)
     and AirSystem:Count should be consistent with eachother. 
     NOTE: For multi-zone systems where multiple similar HVACZones are combined
     into a single ThermalZone, it is expected that the TerminalUnit:Count 
     is > 1.

     For any valid scenario that Count is > 1, all system inputs
     (capacities, power, etc) should be specified as if it is single system.
     The ruleset will multiply the appropriate inputs by the Count value for
     final simulation."
  INPUTCLASS 
    Default
  MINIMUM
    1
  COMMONMAXIMUM
    20
  REPORTPRECISION
    0
  DEFAULT
    1
  CHECKCODE
    if( IsExhSys .OR. IsVentOnlySys )
    then UNCHANGED
    else if( IsMultiZnSys = 1 ) 
    then // Is a multizone system
      if( MaxRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:Mult ) > 0 )
      then // The AirSys is referenced as the PriAirCondgSys of a zone
        if( Cnt != MaxRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:Mult ) .OR.
            Cnt != MinRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:Mult ) )
        then 
          PostWarning("The AirSystem:Count for multi-zone system '%s' is not
                     consistent with the maximum or minimum ThermalZone:Multiplier
                     of the zones the system serves.
                     This is an indication that the HVAC system serves more
                     than 1 floor, or that Multipliers or system Count are
                     improperly defined. Check inputs for consistency.",
                    Name)
        else UNCHANGED
        endif
      else if( MaxRevRef( ThrmlZn:VentSysRef, ThrmlZn:Mult ) > 0 )
      then // The AirSys is referenced as the VentSys of a zone 
        if( Cnt != MaxRevRef( ThrmlZn:VentSysRef, ThrmlZn:Mult ) .OR.
            Cnt != MinRevRef( ThrmlZn:VentSysRef, ThrmlZn:Mult ) )
        then 
          PostWarning("The AirSystem:Count for multi-zone system '%s' is not
                     consistent with the maximum or minimum ThermalZone:Multiplier
                     of the zones the system serves.
                     This is an indication that the HVAC system serves more
                     than 1 floor, or that Multipliers or system Count are
                     improperly defined. Check inputs for consistency.",
                    Name)
        else UNCHANGED
        endif
      else UNCHANGED
      endif endif
    else if( IsMultiZnSys = 0 ) // Is a single-zone system
    then
      if( MaxRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:HVACZnCntWithMult ) > 0 .AND.
          Cnt != SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:HVACZnCntWithMult ) )
      then // The AirSys:Cnt is not conistent with ThrmlZn:Mult*ThrmlZn:HVACZnCnt
        PostWarning("The AirSystem:Count for single-zone system '%s' is not
                   consistent with the total ThermalZone:HVACZoneCount
                   that the system serves.
                   This is an indication that there are fewer distinct single-zone
                   HVAC systems in the model than in reality, the system has slave
                   zones, or HVACZnCount is improperly defined. 
                   Check inputs for consistency.",Name)
      else
      if( MaxRevRef( ThrmlZn:VentSysRef, ThrmlZn:HVACZnCntWithMult ) > 0 .AND.
          Cnt != SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:HVACZnCntWithMult ) )
      then // The AirSys:Cnt is not conistent with ThrmlZn:Mult*ThrmlZn:HVACZnCnt
        PostWarning("The AirSystem:Count for single-zone system '%s' is not
                   consistent with the total ThermalZone:HVACZoneCount
                   that the system serves.
                   This is an indication that there are fewer distinct single-zone
                   HVAC systems in the model than in reality, the system has slave
                   zones, or HVACZnCount is improperly defined. 
                   Check inputs for consistency.",Name)
      else UNCHANGED
      endif endif
    else UNCHANGED
    endif endif endif
  SIZING : T24N
    if( BaseSysNum > 0 )
    then 
      if( BaseSysNum = 5 .OR. BaseSysNum = 6 )
      then MaxRevRef( Story:BaseFlrSysRef, Story:Mult )
      else if( BaseSysNum = 12 .AND. ( Type = "PVAV" .OR. Type = "VAV" ) )
      then MaxRevRef( Story:LabFlrSysRef, Story:Mult )
      else MaxRevRef( ThrmlZn:BaseZnAirSysRef, ThrmlZn:PropZnSysCnt )
      endif endif
    else u:Cnt
    endif
  SIZING : S901G ECBC
    if( BaseSysNum > 0 )
    then 
      if( BaseSysNum >= 5 .AND. BaseSysNum <= 8 )
      then Max( MaxRevRef( Story:BasePredominantFuelFlrSysRef, Story:Mult ), 
                MaxRevRef( Story:BaseNonPredominantFuelFlrSysRef, Story:Mult ) ) 
      else MaxRevRef( ThrmlZn:BaseZnAirSysRef, ThrmlZn:PropZnSysCnt )
      endif
    else u:Cnt
    endif
  ANNUAL
    z:Cnt   
ENDRULE

// =========================== ZoneSystem ======================================
RULE ZnSys:Cnt
  DESCRIPTION
    "The number of duplicate  systems represented by the current ZoneSystem."
  HELP
    "The number of duplicate systems (i.e. Count > 1) is limited to the
     following scenarios, which may be combined:

     b) All attributes of the system are the same and the ZoneSystem represents
     multiple systems that serve a ThermalZone with an HVACZoneCount > 1.
     In this scenario, the ThermalZone:HVACZoneCount and ZoneSystem:Count 
     should be consistent with eachother. 

     a) All attributes of the system are the same and the ZoneSystem represents
     multiple systems that serve ThermalZones that also have a Multiplier > 1. 
     In this scenario, the ThermalZone:Multiplier (derived from the user input 
     for Story:Multiplier) and ZoneSystem:Count should be consistent with eachother. 

     NOTE: When these two scenarios are combined, i.e. ThermalZone:Multiplier > 1
     and ThermalZone:HVACZoneCount > 1, it is expected that the ZoneSystem:Count
     equal to the ThermalZone Multiplier * HVACZoneCount.

     For any valid scenario that Count is > 1, all system inputs
     (capacities, power, etc) should be specified as if it is single system.
     The ruleset will multiply the appropriate inputs by the Count value for
     final simulation."
  INPUTCLASS 
    Default
  MINIMUM
    1
  COMMONMAXIMUM
    500
  REPORTPRECISION
    0
  DEFAULT
    1
  CHECKCODE
    if( IsExhSys )
    then
      if( MaxRevRef( ThrmlZn:ExhSysRef, ThrmlZn:HVACZnCntWithMult ) > 0 )
      then 
        if( Cnt != SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:HVACZnCntWithMult ) )
        then // The ZnSys:Cnt is not consistent with ThrmlZn:Mult*ThrmlZn:HVACZnCnt
          PostError("The ZoneSystem:Count for '%s' is not consistent with the product
                     of ThermalZone:Multiplier * ThermalZone:HVACZoneCount for the
                     zone that the system serves. These numbers should be consistent
                     with eachother.", Name)
        else UNCHANGED
        endif
      else
      if( MaxRevRef( ThrmlZn:ExhSysRef, ThrmlZn:Mult ) > 0 )
      then 
        if( Cnt != SumRevRef( ThrmlZn:ExhSysRef, ThrmlZn:Mult ) )
        then // The ZnSys:Cnt is not consistent with ThrmlZn:Mult*ThrmlZn:HVACZnCnt
          PostError("The ZoneSystem:Count for '%s' is not consistent with the 
                     ThermalZone:Multiplier for the zone that the system serves.
                     These numbers should be consistent with eachother.", Name)
        else UNCHANGED
        endif
      else UNCHANGED
      endif endif
    else
    if( MaxRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:HVACZnCntWithMult ) > 0 .AND.
        Cnt != SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:HVACZnCntWithMult ) )
    then // The ZnSys:Cnt is not consistent with ThrmlZn:Mult*ThrmlZn:HVACZnCnt
      PostError("The ZoneSystem:Count for '%s' is not consistent with the product
                 of ThermalZone:Multiplier * ThermalZone:HVACZoneCount for the
                 zone that the system serves. These numbers should be consistent
                 with eachother.", Name)
    else
    if( MaxRevRef( ThrmlZn:VentSysRef, ThrmlZn:HVACZnCntWithMult ) > 0 .AND.
        Cnt != SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:HVACZnCntWithMult ) )
    then // The ZnSys:Cnt is not conistent with ThrmlZn:Mult*ThrmlZn:HVACZnCnt
      PostError("The ZoneSystem:Count for '%s' is not consistent with the product
                 of ThermalZone:Multiplier * ThermalZone:HVACZoneCount for the
                 zone that the system serves. These numbers should be consistent
                 with eachother.", Name)
    else UNCHANGED
    endif endif endif
  SIZING
    if( BaseSysNum > 0 )
    then 
      if( BaseSysNum = 1 .OR. BaseSysNum = 2 )
      then MaxRevRef( ThrmlZn:BaseZnZnSysRef, ThrmlZn:PropZnSysCnt )
      else 1
      endif
    else u:Cnt
    endif
  ANNUAL
    z:Cnt   
ENDRULE


// ********** Air Distribution Type ********************************************
// TO DO: Revise to Rule once added to BEMBase
RULE NEW AirSys:AirDistType
  DATATYPE
    Enumeration
  LONGFORM
    AirDistributionType
  DESCRIPTION
    "Type of air distribution system that is coupled with the HVAC system."
  REFERENCE 
    NACM Section 5.7.1 
  INPUTCLASS 
    Prescribed
  OPTION
    Mixing
    UnderFloorAirDistribution
    DisplacementVentilation
    None    
  DEFAULT
    "Mixing"
  SIZING    
    if( BaseSysNum > 0 )
    then "Mixing"
    else u:AirDistType
    endif
  ANNUAL
    z:AirDistType
ENDRULE

// -----------------------------------------------------------------------------
// TO DO: Revise to Rule once added to BEMBase
RULE NEW ZnSys:AirDistType
  DATATYPE
    Enumeration
  LONGFORM
    AirDistributionType
  DESCRIPTION
    "Type of air distribution system that is coupled with the HVAC system."
  REFERENCE 
    NACM Section 5.7.1 
  INPUTCLASS 
    Prescribed     
  OPTION
    Mixing
    None    
  DEFAULT
    "Mixing"
  SIZING    
    if( BaseSysNum > 0 )
    then "Mixing"
    else u:AirDistType
    endif
  ANNUAL
    z:AirDistType
ENDRULE


// ********** Design Outside Air Flow ******************************************
// =========================== AirSystem =======================================
// Calculate the Uncorrected air flow (Vou)
RULE NEW AirSys:SysVentFlowUncorrected
  DATATYPE
    Float
  LONGFORM
    SystemVentilationFlowUncorrected
  DESCRIPTION
    "The design outside air flow of the AirSytem, uncorrected for system
     ventilation efficiency (Vou)."
  HELP
    ""
  INPUTCLASS 
    NotInput         
  UNITS 
    cfm
  REPORTPRECISION
    0
  DEFAULT
    SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:VentFlowWithMult ) / Cnt
  SIZING
    UNDEFINED    
  ANNUAL
    SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:VentFlowWithMult ) / Cnt    
ENDRULE

RULE AirSys:SysVentFlow 
  DESCRIPTION
    "The design outside air flow of the AirSytem."
  INPUTCLASS : T24N
    NotInput       
  INPUTCLASS : S901G ECBC
    Default  
  UNITS 
    cfm
  REPORTPRECISION
    0
  DEFAULT
    SysVentFlowUncorrected
  CHECKCODE
    if( SysVentFlow > 0 )
    then 
      if( IsExhSys = 0 .AND. SysVentFlow * 0.99 > SupFanCap )
      then
        PostError("The supply fan capacity of AirSystem '%s' is %.0f cfm, which less than
                   the design OA flow, %.0f cfm, calculated from the ThermalZones served
                   (defined by VentilationSystemReference). Check inputs for
                   consistency.", Name, SupFanCap, SysVentFlow)
      else if( IsExhSys )
      then
        if( ExhFanCap > 0 .AND. SysVentFlow * 0.99 > ExhFanCap )
        then
        PostError("The exhaust fan capacity of AirSystem '%s' is %.0f cfm, which less than
                   the design OA flow, %.0f cfm, calculated from the ThermalZones served
                   (defined by VentilationSystemReference). Check inputs for
                   consistency.", Name, ExhFanCap, SysVentFlow)
        else 
        if( SupFanCap > 0 .AND. SysVentFlow * 0.99 > SupFanCap )
        then
        PostError("The supply fan capacity of AirSystem '%s' is %.0f cfm, which less than
                   the design OA flow, %.0f cfm, calculated from the ThermalZones served
                   (defined by VentilationSystemReference). Check inputs for
                   consistency.", Name, SupFanCap, SysVentFlow)
        else UNCHANGED
        endif endif
      else UNCHANGED
      endif endif
    else UNCHANGED
    endif
  CHECKSIM
    if( SysVentFlow > 0 .AND.
        IsExhSys = 0 .AND.
        SumChildren( OACtrl:SysCnt ) = 0 )
    then 
      PostError("AirSystem '%s' has no OutsideAirControl object defined.",
                 Name)    
    else UNCHANGED
    endif
  ANNUAL
    SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:VentFlowWithMult ) / Cnt 
ENDRULE

// =========================== ZoneSystem ======================================
// Calculate the Uncorrected air flow (Vou)
RULE NEW ZnSys:SysVentFlowUncorrected
  DATATYPE
    Float
  LONGFORM
    SystemVentilationFlowUncorrected
  DESCRIPTION
    "The design outside air flow of the AirSytem, uncorrected for system
     ventilation efficiency (Vou)."
  HELP
    ""
  INPUTCLASS 
    NotInput
  UNITS 
    cfm
  REPORTPRECISION
    0
  DEFAULT
    SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:VentFlowWithMult ) / Cnt
  SIZING
    SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:VentFlowWithMult ) / Cnt
  ANNUAL
    SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:VentFlowWithMult ) / Cnt
ENDRULE

// Outdoor air intake air flow (Vot)
RULE ZnSys:SysVentFlow
  DESCRIPTION
    "The rate of outside air that needs to be delivered by the system at 
     design conditions."
  HELP : T24N
    "Minimum ventilation requirements specified by Standard 120(b)2 as the greater
     of 15 cfm/person and the minimum ventilation rates specified in Appendix 5.4
     For systems serving laboratory spaces, the system shall be 100% outside air, 
     with ventilation rates determined by the Authority Having Jurisdiction."
  HELP : S901G ECBC
    ""
  REFERENCE 
    NACM Section 5.7.4.1
  INPUTCLASS 
    NotInput
  UNITS 
    cfm
  REPORTPRECISION
    0
  DEFAULT
    SysVentFlowUncorrected
  CHECKCODE
    if( SysVentFlow > 0 )
    then 
      if( IsExhSys = 0 .AND. SysVentFlow * 0.99 > SupFanCap )
      then
        PostError("The supply fan capacity of ZoneSystem '%s' is %g, which less than
                   the design OA flow, %g, calculated from the ThermalZones served
                   (defined by VentilationSystemReference). Check inputs for
                   consistency.", Name, SupFanCap, SysVentFlow)
      else if( IsExhSys )
      then
        if( ExhFanCap > 0 .AND. SysVentFlow * 0.99 > ExhFanCap )
        then
        PostError("The exhaust fan capacity of ZoneSystem '%s' is %g, which less than
                   the design OA flow, %g, calculated from the ThermalZones served
                   (defined by VentilationSystemReference). Check inputs for
                   consistency.", Name, ExhFanCap, SysVentFlow)
        else 
        if( SupFanCap > 0 .AND. SysVentFlow * 0.99 > SupFanCap )
        then
        PostError("The supply fan capacity of ZoneSystem '%s' is %g, which less than
                   the design OA flow, %g, calculated from the ThermalZones served
                   (defined by VentilationSystemReference). Check inputs for
                   consistency.", Name, SupFanCap, SysVentFlow)
        else UNCHANGED
        endif endif
      else UNCHANGED
      endif endif
    else UNCHANGED
    endif
  SIZING
    SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:VentFlowWithMult ) / Cnt 
  ANNUAL
    SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:VentFlowWithMult ) / Cnt 
ENDRULE


// ********** System-level HVAC AutoSizing *************************************
// This is currently not supported by Reverse Translator
// =========================== AirSystem ======================================
;RULE AirSys:HVACAutoSizing
;  DESCRIPTION
;    "Whether or not the air system is to be sized by the simulation."
;  INPUTCLASS 
;    Optional
;  DEFAULT
;    Proj:HVACAutoSizing
;  SIZING
;    1 // AutoSize baseline systems
;  ANNUAL
;    0
;ENDRULE
;// =========================== ZoneSystem =====================================
;RULE ZnSys:HVACAutoSizing
;  DESCRIPTION
;    "Whether or not the air system is to be sized by the simulation."
;  INPUTCLASS 
;    Optional
;  DEFAULT
;    Proj:HVACAutoSizing
;  SIZING
;    1 // AutoSize systems
;  ANNUAL
;    0
;ENDRULE


// ********** Total Cooling Capacity *******************************************
// See HVACSecondary-CoilCooling-General.rule


// ********** Mandatory Efficiency Checks **************************************
// Additional SDD attributes used to determine unitary mandatory efficiency 
// requirements for designed proposed systems.  Not applicable to partial 
// compliance proposed HVAC systems or baseline HVAC system designs; these are 
// defined by ruleset to meet/exceed mandatory efficiency requirements.

// =========================== AirSystem ======================================
RULE AirSys:SubType
  DESCRIPTION
    "Property used to define rating conditions and efficiency requirements of 
     system components."
  INPUTCLASS 
    Default
// Enums defined in BEMEnums.txt since property referenced by Library object   
//OPTION
//  Packaged3Phase
//  Packaged1Phase
//  Split3Phase   
//  Split1Phase   
//  CRAC         
//  CRAH
//  NA          
//DEFAULT
// AirSys assumed to be used for nonresidential applications, so default to
// Packaged3Phase
//  "Packaged3Phase" 
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW AirSeg:DXCap
  DATATYPE
    Float
  LONGFORM
    DirectExpansionCapacity
  INPUTCLASS 
    NotInput
  DEFAULT
    if(Type = "Supply" )
    then SumChildrenIf( CoilClg:CapTotNetRtd, CoilClg:Type = "DirectExpansion" )   
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW AirSeg:ClgCap
  DATATYPE
    Float
  LONGFORM
    CoolingCapacity
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type = "Supply" )
    then SumChildren( CoilClg:CapTotNetRtd )
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW AirSeg:HtPumpCap
  DATATYPE
    Float
  LONGFORM
    HeatPumpCapacity
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type = "Supply" )
    then SumChildrenIf( CoilHtg:CapTotNetRtd, CoilHtg:Type = "HeatPump" )
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW AirSeg:NonElecHtgCap
  DATATYPE
    Float
  LONGFORM
    NonElectricHeatingCapacity
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type = "Supply" )
    then 
      SumChildrenIf( CoilHtg:CapTotNetRtd, CoilHtg:Type = "Furnace" ) +
      SumChildrenIf( CoilHtg:CapTotNetRtd, CoilHtg:Type = "HeatPump" ) +
      SumChildrenIf( CoilHtg:CapTotNetRtd, CoilHtg:Type = "HotWater" ) +
      SumChildrenIf( CoilHtg:CapTotNetRtd, CoilHtg:Type = "Steam" ) 
    else 0
    endif 
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW AirSeg:HtgCap
  DATATYPE
    Float
  LONGFORM
    HeatingCapacity
  INPUTCLASS 
    NotInput
  DEFAULT
    if( Type = "Supply" )
    then SumChildren( CoilHtg:CapTotNetRtd ) - SumChildren( CoilHtg:SuppHtgCap )
    else 0
    endif 
ENDRULE

// =========================== ZoneSystem ======================================
RULE ZnSys:SubType
  DESCRIPTION
    "Property used to define rating conditions and efficiency requirements of 
     system components."
  INPUTCLASS 
    Default
// Enums defined in BEMEnums.txt since property referenced by Library object   
//OPTION
//  Packaged3Phase
//  Packaged1Phase
//  Split3Phase   
//  Split1Phase
//  NA
//DEFAULT
// ZnSys assumed to be used for residential applications, so default to
// Split1Phase
//  "Split1Phase" 
ENDRULE

RULE NEW ZnSys:HtPumpCap
  DATATYPE
    Float
  LONGFORM
    HeatPumpCapacity
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildrenIf( CoilHtg:CapTotNetRtd, CoilHtg:Type = "HeatPump" )
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW ZnSys:DXCap
  DATATYPE
    Float
  LONGFORM
    DirectExpansionCapacity
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildrenIf( CoilClg:CapTotNetRtd, CoilClg:Type = "DirectExpansion" )   
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW ZnSys:NonElecHtgCap
  DATATYPE
    Float
  LONGFORM
    NonElectricHeatingCapacity
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildrenIf( CoilHtg:CapTotNetRtd, CoilHtg:Type = "Furnace" ) +
    SumChildrenIf( CoilHtg:CapTotNetRtd, CoilHtg:Type = "HeatPump" ) +
    SumChildrenIf( CoilHtg:CapTotNetRtd, CoilHtg:Type = "HotWater" ) +
    SumChildrenIf( CoilHtg:CapTotNetRtd, CoilHtg:Type = "Steam" ) 
ENDRULE

// -----------------------------------------------------------------------------
// Identify unitary equipment category for mandatory efficiency checks
RULE NEW AirSys:UnitaryCat
  DATATYPE
    Enumeration
  LONGFORM
    UnitaryCategory
  INPUTCLASS 
    NotInput
  OPTION
    AC
    HP
    NA
  DEFAULT
    if( SumChildren( AirSeg:HtPumpCap ) > 1 )
    then "HP"
    else if( SumChildren( AirSeg:DXCap ) > 1 )
    then "AC"
    else "NA"
    endif endif 
ENDRULE

RULE NEW ZnSys:UnitaryCat
  DATATYPE
    Enumeration
  LONGFORM
    UnitaryCategory
  INPUTCLASS 
    NotInput
  OPTION
    AC
    HP
    NA
  DEFAULT
    if( HtPumpCap > 1 )
    then "HP"
    else if( DXCap > 1 )
    then "AC"
    else "NA"
    endif endif 
ENDRULE

// -----------------------------------------------------------------------------
// Mandatory EER requirement deduction for AC/HP units
RULE NEW AirSys:EERDeduction
  DATATYPE
    Float
  LONGFORM
    EERDeduction
  INPUTCLASS 
    NotInput
  DEFAULT
    if( SubType = "CRAC" .OR. SubType = "CRAH" )
    then 0.0
    else if( SumChildren( AirSeg:NonElecHtgCap ) > 1 )
    then
      if( UnitaryCat = "HP" )
      then 0.0 // Look-up table UnitaryACHPMinEffReq includes 0.2 deduction for HP
      else 0.2
      endif
    else 0.0
    endif endif
ENDRULE

RULE NEW ZnSys:EERDeduction
  DATATYPE
    Float
  LONGFORM
    EERDeduction
  INPUTCLASS 
    NotInput
  DEFAULT
    if( NonElecHtgCap > 1 )
    then
      if( UnitaryCat = "HP" )
      then 0.0 // Look-up table UnitaryACHPMinEffReq includes 0.2 deduction for HP
      else 0.2
      endif
    else 0.0
    endif
ENDRULE


//  Calculate conditioned floor area
// =========================== AirSystem =======================================
RULE NEW AirSys:TotCondFlrArea
  DATATYPE
    Float
  LONGFORM
    TotalConditionedFloorArea
  DESCRIPTION
    "The total conditioned floor area served by the AirSystem,
     including multipliers."
  INPUTCLASS 
    NotInput
  DEFAULT
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:CondFlrAreaWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:CondFlrAreaWithMult ) )
  SIZING
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:CondFlrAreaWithMult ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:CondFlrAreaWithMult ) )
  ANNUAL
    z:TotCondFlrArea
ENDRULE 
// =========================== ZoneSystem ======================================
RULE NEW ZnSys:TotCondFlrArea
  DATATYPE
    Float
  LONGFORM
    TotalConditionedFloorArea
  DESCRIPTION
    "The total conditioned floor area served by the ZoneSystem,
     including multipliers."
  INPUTCLASS 
    NotInput
  DEFAULT
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:CondFlrAreaWithMult ),
         SumRevRef( ThrmlZn:SecAirCondgSysRef, ThrmlZn:CondFlrAreaWithMult ) )
  SIZING
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:CondFlrAreaWithMult ),
         SumRevRef( ThrmlZn:SecAirCondgSysRef, ThrmlZn:CondFlrAreaWithMult ) )
  ANNUAL
    z:TotCondFlrArea
ENDRULE 


// ********** Default CoilClg/Htg references ***********************************
// First, specify the indix used to create reference
RULE NEW CoilClg:CoilClgIdx
  DATATYPE
    Integer
  LONGFORM
    CoilCoolingIndex
  INPUTCLASS 
    NotInput
  DEFAULT
    ChildIndex( 1 ) 
ENDRULE
RULE NEW CoilHtg:CoilHtgIdx
  DATATYPE
    Integer
  LONGFORM
    CoilHeatingIndex
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IfValidAnd( SuppHtgCap = 0 ) )
    then ChildIndex( 1 ) // Is not the supplemental heating coil for HP system
    else 0 
    endif
ENDRULE

// Create references at coil parent level
// =========================== AirSystem =======================================
RULE AirSeg:CoilClgRef
  DESCRIPTION
    "Reference to the primary cooling coil for the AirSystem."
  HELP
    "This property is only used for default of proposed inputs and creating
     baseline systems."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IfValidAnd( MaxChild( CoilClg:CoilClgIdx ) > 0 ) )
    then ChildRef( CoilClg:Name, MaxChild( CoilClg:CoilClgIdx ) )
    else UNDEFINED
    endif
ENDRULE 
RULE AirSeg:CoilHtgRef
  DESCRIPTION
    "Reference to the primary heating coil for the AirSystem."
  HELP
    "This property is only used for default of proposed inputs and creating
     baseline systems."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IfValidAnd( MaxChild( CoilHtg:CoilHtgIdx ) > 0 ) )
    then ChildRef( CoilHtg:Name, MaxChild( CoilHtg:CoilHtgIdx ) )
    else UNDEFINED
    endif
ENDRULE 

// =========================== ZoneSystem ======================================
RULE ZnSys:CoilClgRef
  DESCRIPTION
    "Reference to the primary cooling coil for the ZoneSystem."
  HELP
    "This property is only used for default of proposed inputs and creating
     baseline systems."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IfValidAnd( MaxChild( CoilClg:CoilClgIdx ) > 0 ) )
    then ChildRef( CoilClg:Name, MaxChild( CoilClg:CoilClgIdx ) )
    else UNDEFINED
    endif
ENDRULE 
RULE ZnSys:CoilHtgRef
  DESCRIPTION
    "Reference to the primary heating coil for the ZoneSystem."
  HELP
    "This property is only used for default of proposed inputs and creating
     baseline systems."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IfValidAnd( MaxChild( CoilHtg:CoilHtgIdx ) > 0 ) )
    then ChildRef( CoilHtg:Name, MaxChild( CoilHtg:CoilHtgIdx ) )
    else UNDEFINED
    endif
ENDRULE 



// ********** QC/Report Rules **************************************************
RULE NEW AirSys:NumThrmlZnCond
  DATATYPE
    Integer
  LONGFORM
    NumberThermalZoneConditioned
  DESCRIPTION
    "The number of conditioned zones served by the AirSystem, not including
     multipliers."
  INPUTCLASS 
    NotInput
  DEFAULT
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:IsCond ), 
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:IsCond ) )
ENDRULE 

RULE NEW AirSys:NumThrmlZnWithDCV
  DATATYPE
    Integer
  LONGFORM
    NumberThermalZoneConditioned
  DESCRIPTION
    "The number of conditioned zones served by the AirSystem that have DCV,
     not including multipliers."
  INPUTCLASS 
    NotInput
  DEFAULT
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:HasDCV ), 
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:HasDCV ) )
  CHECKSIM
    if( IsMultiZnSys > 0 .AND. NumThrmlZnWithDCV >= NumThrmlZnCond )
// .AND. SysOARat < ( 1 - Proj:OATolLim ) ) 
// DOAS is not impacted by this issue, but baseline is not DOAS. 
// See SST 100015 model for example of why DOAS needs to be included.
    then 
      PostError("AirSystem '%s' is a multizone system and all conditioned zones
                 have DCV. This results in abnormal E+ simulation results. Revise
                 model zoning so that at least one thermal zone served by the 
                 system does not have DCV.", AirSys:Name)
    else UNCHANGED
    endif
ENDRULE 

RULE NEW AirSys:CondHVACZnCntWithMult
  DATATYPE
    Integer
  LONGFORM
    ConditionedHVACZoneCountWithMultiplier
  DESCRIPTION
    "The number of HVAC zones the AirSystem serves, including multipliers."
  INPUTCLASS 
    NotInput
  DEFAULT
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:CondHVACZnCntWithMult ), 
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:CondHVACZnCntWithMult ) )
  SIZING
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:CondHVACZnCntWithMult ), 
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:CondHVACZnCntWithMult ) )           
ENDRULE 

RULE NEW ZnSys:CondHVACZnCntWithMult
  DATATYPE
    Integer
  LONGFORM
    ConditionedHVACZoneCountWithMultiplier
  DESCRIPTION
    "The number of HVAC zones the ZoneSystem serves, including multipliers."
  INPUTCLASS 
    NotInput
  DEFAULT
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:CondHVACZnCntWithMult ), 
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:CondHVACZnCntWithMult ) )
  SIZING
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:CondHVACZnCntWithMult ), 
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:CondHVACZnCntWithMult ) )   
ENDRULE 

// -----------------------------------------------------------------------------
// QC number of child objects in AirSys
RULE NEW AirSys:AirSegCnt
  DATATYPE
    Integer
  LONGFORM
    AirSegmentCount
  INPUTCLASS 
    NotInput
  DEFAULT
    ChildCount( AirSeg )
  CHECKSIM    
    if( AirSegCnt > 2 )
    then 
      PostError("AirSys '%s' has more than two child AirSegment objects.
                 This is currently not supported.", Name)
    else if( AirSegCnt = 2 .AND. IsExhSys .AND. ExhFanCap < 1 )
    then // Add check. See issue 1269
      PostError("AirSys '%s' is Type = 'Exhaust' but has no exhaust fan capacity.
                 This may be due to not specifying at least one AirSegment:Type
                 = 'Exhaust', or the child fan has 0 flow capacity.", Name)
    else if( AirSegCnt = 1 .AND. IsExhSys = 0 .AND. SysOARat >= 1.0 )
    then 
      PostError("AirSys '%s' only has one child AirSegment object. All AirSystems
                 except Type = 'Exhaust' and 100% OA systems require both a
                 'Supply' AirSegment, and a Return or Relief AirSegment.", Name)
    else if( AirSegCnt = 0 )
    then 
      PostError("AirSystem '%s' has no a child AirSegment objects. This is an
                 indication of incorrect model structure.", Name)  
    else UNCHANGED
    endif endif endif endif
ENDRULE 

// -----------------------------------------------------------------------------
RULE NEW AirSys:OACtrlCnt
  DATATYPE
    Integer
  LONGFORM
    OutsideAirControlCount
  INPUTCLASS 
    NotInput
  DEFAULT
    ChildCount( OACtrl )
  CHECKSIM    
    if( OACtrlCnt > 1 )
    then 
      PostError("AirSys '%s' has more than one child OutsideAirControl object.
                 This is currently not supported.", Name)
    else if( OACtrlCnt = 0 .AND. IsExhSys = 0 .AND. SysVentFlow > 0 )
    then 
      PostError("AirSystem '%s' has a design ventilation air flow rate of %.0f cfm 
                 but no child OutsideAirControl object has been defined.", 
                 Name, SysVentFlow)  
    else UNCHANGED
    endif endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW AirSeg:CoilClgCnt
  DATATYPE
    Integer
  LONGFORM
    CoilCoolingCount
  INPUTCLASS 
    NotInput
  DEFAULT
    ChildCount( CoilClg )
  CHECKSIM
    if( CoilClgCnt > 0 .AND. Type != "Supply" )
    then    
      PostError("AirSegment '%s' has a child CoilCooling object, but is not
                 Type = 'Supply'. This is currently not supported.", Name)     
    else if( CoilClgCnt > 0 .AND. Type = "Supply" .AND. AirSys:Type = "HV" )
    then
      PostError("AirSystem '%s' has a CoilCooling object, but is a heating/ventilation
                 system (Type = 'HV'). Delete the cooling coil or change to a
                 different system type.", AirSys:Name) 
    else if( CoilClgCnt > 1 )
    then 
      PostError("AirSegment '%s' has more than one child CoilCooling object.
                 This is currently not supported.", Name)
    else if( CoilClgCnt = 0 .AND. Type = "Supply" .AND. 
             AirSys:IsExhSys = 0 .AND. AirSys:Type != "HV" )
    then
      PostError("AirSystem '%s' is Type = '%s', but does not have 
                 CoilCooling object. If this is intenional, a heating/ventilation
                 system (Type = 'HV') should be used.", AirSys:Name, AirSys:Type) 
    else UNCHANGED
    endif endif endif endif
ENDRULE 

// -----------------------------------------------------------------------------
RULE NEW AirSeg:CoilHtgCnt
  DATATYPE
    Integer
  LONGFORM
    CoilHeatingCount
  INPUTCLASS 
    NotInput
  DEFAULT
    ChildCount( CoilHtg )
  CHECKSIM
    if( CoilHtgCnt > 0 .AND. Type != "Supply" )
    then    
      PostError("AirSegment '%s' has a child CoilHeating object, but is not
                 Type = 'Supply'. This is currently not supported.", Name)     
    else if( CoilHtgCnt > 1 .AND. SumChildren( CoilHtg:SuppHtgCap ) = 0 ) 
    then // Two coil heating objects and no supplementary heating
      PostError("AirSegment '%s' has more than one child CoilHeating objects.
                 This is currently only supported if one coil is referenced as the
                 supplemental heating coil of a Type = 'HeatPump' coil.", Name)
    else if( CoilHtgCnt = 0 .AND. Type = "Supply" .AND. 
             AirSys:IsSglZnSys = 1 .AND.
             AirSys:IsExhSys = 0 .AND. 
             AirSys:SubType != "CRAC" .AND. 
             AirSys:SubType != "CRAH" )
    then
      PostWarning("AirSegment '%s' is Type = 'Supply' but does not have a child
                   CoilHeating object. This may result in hours of unmet heating
                   load.", Name) 
    else UNCHANGED
    endif endif endif
ENDRULE 

// -----------------------------------------------------------------------------
RULE NEW AirSeg:FanCnt
  DATATYPE
    Integer
  LONGFORM
    FanCount
  INPUTCLASS 
    NotInput
  DEFAULT
    ChildCount( Fan )
  CHECKSIM
    if( FanCnt > 1 )
    then 
      PostError("AirSegment '%s' has more than one child Fan object.
                 This is currently not supported.", Name)
    else if( ( Type = "Supply" .OR. IsExhSys ) .AND. FanCnt = 0 )
    then
      PostError("AirSegment '%s' is a supply or exhaust segment, but has
                 no child Fan object.", Name)  
    else UNCHANGED
    endif endif
ENDRULE 


// -----------------------------------------------------------------------------
// QC number of child objects in ZnSys
RULE NEW ZnSys:CoilClgCnt
  DATATYPE
    Integer
  LONGFORM
    CoilCoolingCount
  INPUTCLASS 
    NotInput
  DEFAULT
    ChildCount( CoilClg )
  CHECKSIM  
    if( CoilClgCnt > 1 )
    then 
      PostError("ZoneSystem '%s' has more than one child CoilCooling object.
                 This is currently not supported.", Name)
    else if( CoilClgCnt = 0 .AND. IsExhSys = 0 .AND. Type != "Baseboard" )
    then
      PostError("ZoneSystem '%s' is Type = '%s' but does not have a child CoilCooling
                 object. ", Name, Type) 
    else UNCHANGED
    endif endif
ENDRULE 

// -----------------------------------------------------------------------------
RULE NEW ZnSys:CoilHtgCnt
  DATATYPE
    Integer
  LONGFORM
    CoilHeatingCount
  INPUTCLASS 
    NotInput
  DEFAULT
    ChildCount( CoilHtg )
  CHECKSIM   
    if( CoilHtgCnt > 1 .AND. SumChildren( CoilHtg:SuppHtgCap ) = 0 )  
    then  // Two coil heating objects and no supplementary heating
      PostError("ZoneSystem '%s' has more than one child CoilHeating objects.
                 This is currently only supported if one coil is referenced as the
                 supplemental heating coil of a Type = 'HeatPump' coil.", Name)
    else if( CoilHtgCnt = 0 .AND. IsExhSys = 0 )
    then
      PostWarning("ZoneSystem '%s' is Type = '%s' but does not have a child CoilHeating
                   object.",
                   Name, Type) 
    else UNCHANGED
    endif endif
ENDRULE 

// -----------------------------------------------------------------------------
RULE NEW ZnSys:FanCnt
  DATATYPE
    Integer
  LONGFORM
    FanCount
  INPUTCLASS 
    NotInput
  DEFAULT
    ChildCount( Fan )
  CHECKSIM
    if( FanCnt > 1 )
    then 
      PostError("ZoneSystem '%s' has more than one child Fan object.
                 This is currently not supported.", Name)
    else if( Type != "Baseboard" .AND. FanCnt = 0 )
    then
      PostError("ZoneSystem '%s' is Type = '%s', but has  
                 no child Fan object.", Name, Type)  
    else UNCHANGED
    endif endif
ENDRULE 


// Reporting rules

// =============================================================================
RULE AirSys:AcceptanceTestReq
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance test is required 
     for an HVAC system, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
//  SIZING_PROPOSED
//    u:AcceptanceTestReq
//  SIZING_BASELINE
//    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:AcceptanceTestReq
    endif
  ANNUAL_BASELINE
    0
ENDRULE


// =============================================================================
RULE ZnSys:AcceptanceTestReq
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance test is required 
     for an HVAC system, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
//  SIZING_PROPOSED
//    u:AcceptanceTestReq
//  SIZING_BASELINE
//    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:AcceptanceTestReq
    endif
  ANNUAL_BASELINE
    0
ENDRULE


// =============================================================================
RULE AirSys:AcceptanceTestReqRpt
  DESCRIPTION
    "A text string (Yes or No) showing whether an acceptance test is required 
     for an HVAC system for reporting."
  INPUTCLASS 
    NotInput
  ANNUAL_PROPOSED
    if( AcceptanceTestReq = 0 ) then "No"
    else "Yes" 
    endif
  ANNUAL_BASELINE
    "NA"
ENDRULE


// =============================================================================
RULE ZnSys:AcceptanceTestReqRpt
  DESCRIPTION
    "A text string (Yes or No) showing whether an acceptance test is required 
     for an HVAC system for reporting."
  INPUTCLASS 
    NotInput
  ANNUAL_PROPOSED
    if( AcceptanceTestReq = 0 ) then "No"
    else "Yes" 
    endif
  ANNUAL_BASELINE
    "NA"
ENDRULE



// Specification of required Acceptance Certificates
//    A number of these could be set based on other existing inputs, but 
//    basing off check boxes alone for now.
// -----------------------------------------------------------------------------
RULE AirSys:NRCAMch02A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch02A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE AirSys:NRCAMch03A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch03A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE AirSys:NRCAMch04H
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch04H
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE AirSys:NRCAMch05A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch05A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE AirSys:NRCAMch06A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch06A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE AirSys:NRCAMch07A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch07A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE AirSys:NRCAMch08A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch08A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE AirSys:NRCAMch09A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch09A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE AirSys:NRCAMch10A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch10A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE AirSys:NRCAMch11A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch11A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE AirSys:NRCAMch12A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch12A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE AirSys:NRCAMch13A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch13A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE AirSys:NRCAMch14A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch14A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE AirSys:NRCAMch15A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch15A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE AirSys:NRCAMch16A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch16A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE AirSys:NRCAMch17A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch17A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE AirSys:NRCAMch18A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch18A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE



// ===========Zone Systems
// -----------------------------------------------------------------------------
RULE ZnSys:NRCAMch02A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch02A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE ZnSys:NRCAMch03A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch03A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE ZnSys:NRCAMch04H
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch04H
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE ZnSys:NRCAMch05A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch05A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE ZnSys:NRCAMch06A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch06A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE ZnSys:NRCAMch07A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch07A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE ZnSys:NRCAMch08A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch08A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE ZnSys:NRCAMch09A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch09A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE ZnSys:NRCAMch10A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch10A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE ZnSys:NRCAMch11A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch11A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE ZnSys:NRCAMch12A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch12A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE ZnSys:NRCAMch13A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch13A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE ZnSys:NRCAMch14A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch14A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE ZnSys:NRCAMch15A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch15A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE ZnSys:NRCAMch16A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch16A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE ZnSys:NRCAMch17A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch17A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// -----------------------------------------------------------------------------
RULE ZnSys:NRCAMch18A
  DESCRIPTION
    "A boolean (0/1) flag to indicate whether an acceptance certificate of the 
     number matching the term name is required, used for reporting."
  INPUTCLASS
    Default
  DEFAULT
    0
  ANNUAL_PROPOSED
    if( BaseSysNum > 0 ) then 0 
    else u:NRCAMch18A
    endif
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE


