// TerminalUnit - VAV Heating and Controls
//
// -------------------------------------------------------------------------
//  Copyright (c) 2014, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------
//  

//  This rule file addresses the following building descriptors:
//  Section 5.6.2 - Terminal Device Data
//      Terminal Type
//  Section 5.6.5.1 - VAV Air Flow
//      Design Air Flow
//      Terminal Minimum Stop


// Data model structure QC rules
RULE TrmlUnit:PriAirSegRef
  DESCRIPTION
    "Defines the supply air segment that provides primary air to the TerminalUnit."
  INPUTCLASS
    Required
  DEFAULT
    AirSys:SupAirSegRef
  CHECKSIM
    if( LocalCompAssigned( PriAirSegRef ) = 0 )
    then
      if( ParentCompAssigned( SupAirSegRef ) = 0 )
      then 
        PostError("TerminalUnit '%s' has no PrimaryAirSegmentReference defined.",
                   Name)
      else 
        PostWarning("TerminalUnit '%s' has no PrimaryAirSegmentReference defined.
                     The program will default this to the system's supply air
                     segment. If the simulation fails, this should be fixed.",
                     Name)
      endif
    else UNCHANGED
    endif
  SIZING
    if( LocalCompAssigned( PriAirSegRef ) )
    then UNCHANGED
    else if( ParentCompAssigned( SupAirSegRef ) )
    then AirSys:SupAirSegRef
    else UNCHANGED
    endif endif
  ANNUAL
    z:PriAirSegRef
ENDRULE  

RULE TrmlUnit:ZnServedRef
  DESCRIPTION
    "Defines the ThermalZone that the TerminalUnit provides air to."
  CHECKSIM
    if( LocalCompAssigned( ZnServedRef ) )
    then 
      if( ZnServedRef:Type = "Unconditioned" )
      then 
        PostWarning("TerminalUnit '%s' serves ThermalZone '%s', which is
                     Unconditioned.", Name, ZnServedRef:Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
  INPUTCLASS
    Compulsory
// Baseline rules defined in BaselineHVACSystems.rule
  ANNUAL
    z:ZnServedRef
ENDRULE 

RULE NEW TrmlUnit:FlrAreaServed
  DATATYPE
    Float
  LONGFORM
    FloorAreaServed
  DESCRIPTION
    "The floor area of TrmlUnit:ZnServedRef, including zone multipliers."
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ZnServedRef ) )
    then ZnServedRef:FlrAreaWithMult
    else 0
    endif
  SIZING
    if( LocalCompAssigned( ZnServedRef ) )
    then ZnServedRef:FlrAreaWithMult
    else 0
    endif
  ANNUAL
    z:FlrAreaServed
ENDRULE 

RULE NEW TrmlUnit:VolServed
  DATATYPE
    Float
  LONGFORM
    VolumeServed
  DESCRIPTION
    "The volume of TrmlUnit:ZnServedRef, including zone multipliers."
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ZnServedRef ) )
    then ZnServedRef:VolWithMult
    else 0
    endif
  SIZING
    if( LocalCompAssigned( ZnServedRef ) )
    then ZnServedRef:VolWithMult
    else 0
    endif
  ANNUAL
    z:VolServed
ENDRULE 

RULE NEW TrmlUnit:ParentAirSysRef
  DATATYPE
    AirSystem
  LONGFORM
    ParentAirSystemReference
  DESCRIPTION
    "Reference to the TrmlUnit's parent AirSys object."
  INPUTCLASS
    NotInput
  DEFAULT
    AirSys:Name
  CHECKSIM
    if( LocalCompAssigned( PriAirSegRef ) .AND. LocalCompAssigned( ZnServedRef ) )
    then
      if( IfValidAnd( PriAirSegRef:ParentAirSysRef:Name != ParentAirSysRef:Name ) )
      then 
        PostError("TerminalUnit '%s' is a child of AirSystem '%s', but the
                   PrimaryAirSegmentReference is a child of AirSystem '%s'. Revise
                   the input file by moving the TerminalUnit to be a child of the
                   correct AirSegment.", 
                   Name, ParentAirSysRef:Name, PriAirSegRef:ParentAirSysRef:Name)
      else
      if( IfValidAnd( ZnServedRef:PriAirCondgSysRef:Name != ParentAirSysRef:Name ) .AND. 
          IfValidAnd( ZnServedRef:VentSysRef:Name != ParentAirSysRef:Name ) )
      then
        PostError("TerminalUnit '%s' is a child of AirSystem '%s', but
                   ThermalZone '%s' served by the terminal does not reference
                   this system (as a Primary or Ventilation system). Revise these
                   inputs for consistency.", 
                   Name, ParentAirSysRef:Name, ZnServedRef:Name)
      else UNCHANGED
      endif endif
    else UNCHANGED
    endif
  ANNUAL
    AirSys:Name
ENDRULE 



// ********** Status ***********************************************************
RULE TrmlUnit:Status
  DESCRIPTION
    "The status of the system or component, used for additions and alterations."
  INPUTCLASS 
    Default
; OPTION
;   * Defined in BEMEnums, shown here for reference. Default is 'New'
;   New
;   Existing 
  DEFAULT
// Status defined from top-down. If parent system is altered, child objects
// are defaulted to Existing
    if( Parent( IsNew ) .OR. Proj:IsNewMech ) then "New" else "Existing" endif
  CHECKCODE
    if( Proj:IsNewMech .AND. Status != "New"  )
    then
      PostWarning("TerminalUnit '%s' has a Status of '%s', but Compliance Type is '%s'.
                   The status of the terminal will be changed to 'New' for compliance
                   analysis.", Name, Status, Proj:CompType)
    else 
    if( AirSys:IsSglZnSys .AND. Type = "Uncontrolled" .AND. Status != AirSys:Status )
    then // Notify users of status discrepency for Uncontrolled TrmlUnits.
      PostWarning("TerminalUnit '%s' is an 'Uncontrolled' terminal of a single-zone
                   system, and has a Status that is different than the parent AirSystem.
                   This is not currently supported. The Status of the TerminalUnit
                   will be changed to be the , but Compliance Type is '%s'.
                   The status of the terminal will be changed to 'New' for compliance
                   analysis.", Name, Status, Proj:CompType)             
    else UNCHANGED
    endif endif
  SIZING_PROPOSED
    if( AirSys:IsPropSys .AND. AirSys:IsSglZnSys .AND. Type = "Uncontrolled" )
    then AirSys:Status // Ensure status of terminals matches parent for SZ systems
    else UNCHANGED
    endif  
// No SIZING_BASELINE rule; status of any new objects created by rules 
// is defined by BEMEnums default
ENDRULE

RULE NEW TrmlUnit:IsNew
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT
    if( Status = "New" .OR. Proj:IsNewMech ) then 1 else 0 endif
  SIZING : T24N
    if( Status = "New" .OR. Proj:IsNewMech ) then 1 else 0 endif
  SIZING : S901G ECBC
    if( Status = "New" .AND. Parent( IsNew ) = 1 ) then 1 else 0 endif
  ANNUAL
    z:IsNew
ENDRULE

RULE NEW TrmlUnit:IsExisting
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT
    if( IsNew ) then 0 else 1 endif
  SIZING
    if( IsNew ) then 0 else 1 endif
  ANNUAL
    z:IsExisting
ENDRULE

// ********** Counts ***********************************************************
RULE TrmlUnit:Cnt
  DESCRIPTION
    "The number of duplicate components represented by the current TerminalUnit."
  HELP
    "The number of duplicate TerminalUnits (i.e. Count > 1) is limited to when
     one TerminalUnit represents multiple similar components that a ThermalZone
     with an HVACZoneCount > 1. In this scenario, the ThermalZone:HVACZoneCount
     and TerminalUnit:Count should be consistent with eachother. For Type = 
     'Uncontrolled' terminals, the Count should always be 1, and the air flow
     of the terminal equal to the total air flow for all spaces included in
     the ThermalZone.

     When it is valid for Count to be > 1, all TerminalUnit inputs
     (capacities, power, etc) should be specified as if it is a single unit.
     The ruleset will multiply the appropriate inputs by the Count value for
     final simulation."
  INPUTCLASS 
    Default
  MINIMUM
    1
  COMMONMAXIMUM
    10
  REPORTPRECISION
    0
  DEFAULT
    1
  CHECKCODE
    if( Type = "Uncontrolled" .AND. Cnt > 1 )
    then
      PostError("The Count of TerminalUnit '%s', Type = 'Uncontrolled', should be 1,
                 and the PrimaryAirFlowMaximum of should be equal to the total
                 air supplied to all spaces included in the ThermalZone.
                 Revise Count and TerminalUnit flow inputs to follow this convention.",
                 Name)     
    else
    if( Type != "Uncontrolled" .AND. SysCnt != ZnServedRef:HVACZnCntWithMult )
    then // The TrmlUnit:Cnt is not consistent with ThrmlZn:HVACZnCnt
      PostError("TerminalUnit '%s' has Count = %g and parent AirSystem Count of %g, which
                 yields a total of %g TerminalUnits. The unit serves zone '%s',
                 which represents HVACZoneCount = %g and has a Multiplier = %g,
                 which yeilds a total of %g HVACZones. For non-Uncontrolled units,
                 the total number of TerminalUnits and HVACZones represented should
                 be consistent with eachother.", 
                 Name, Cnt, Parent(Cnt), SysCnt, ZnServedRef:Name, 
                 ZnServedRef:HVACZnCnt, ZnServedRef:Mult, ZnServedRef:HVACZnCntWithMult )    
    else UNCHANGED
    endif endif
  SIZING
    if( BaseSysNum > 0 ) 
    then
      if( Parent( Type ) = "SZVAVAC" .OR. 
          Parent( Type ) = "SZVAVHP" .OR. 
          Type = "Uncontrolled")
      then 1
      else ZnServedRef:HVACZnCnt
      endif
    else u:Cnt
    endif
  ANNUAL
    z:Cnt
ENDRULE

RULE TrmlUnit:SysCnt
  DESCRIPTION
    "Echo of AirSys:Count."
  HELP
    "The number of duplicate systems can only be > 1 when all attributes of 
     the system are the same.  If Count is specified to be > 1, all parameters
     (capacities, power, etc) should be specified for the single piece of equipment.
     The ruleset will apply multipliers for the final simulation."
  INPUTCLASS
    NotInput
  REPORTPRECISION
    0
  DEFAULT
    Parent( Cnt ) * Cnt
  SIZING
    Parent( Cnt ) * Cnt
  ANNUAL
    z:SysCnt
ENDRULE

RULE NEW TrmlUnit:SysCntControlledWithMult
  DATATYPE
    Integer
  LONGFORM
    SystemCountControlledWithMult
  HELP
    "The number of duplicate systems can only be > 1 when all attributes of 
     the system are the same.  If Count is specified to be > 1, all parameters
     (capacities, power, etc) should be specified for the single piece of equipment.
     The ruleset will apply multipliers for the final simulation."
  INPUTCLASS
    NotInput
  DEFAULT
    if( Type != "- specify -" .OR.
        Type != "Uncontrolled" )
    then Parent( Cnt ) * Cnt
    else UNDEFINED
    endif
  SIZING
    if( Type != "- specify -" .OR.
        Type != "Uncontrolled" )
    then Parent( Cnt ) * Cnt
    else UNDEFINED
    endif
  ANNUAL
    z:SysCntControlledWithMult
ENDRULE 

RULE NEW TrmlUnit:HVACZnCnt
  DATATYPE
    Integer
  LONGFORM
    HVACZoneCount
  DESCRIPTION
    "Echo of the the number of building HVAC zones represented by the modeled 
     ThermalZone that the TerminalUnit serves."  
  HELP
    "See ThrmlZn:HVACZnCt."
  REFERENCE 
    NACM Section 2.2.1
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ZnServedRef ) )
    then ZnServedRef:HVACZnCnt
    else 0
    endif
  SIZING
    ZnServedRef:HVACZnCnt
  ANNUAL
    z:HVACZnCnt
ENDRULE


// ---------- Section 5.6.2 - Terminal Device Data -----------------------------
// ********** Terminal Type ****************************************************
RULE TrmlUnit:Type
  DESCRIPTION
    "The type of terminal used to deliver and if applicable, regulate air delivery 
     to a ThermalZone."
  REFERENCE 
    NACM Section 5.6.2
  INPUTCLASS 
    Compulsory
// Enums defined in BEMBase since property referenced in Library file
;  OPTION
;    - specify -
;    Uncontrolled
;    VAVReheatBox
;    ParallelFanBox
;    SeriesFanBox
;    VAVNoReheatBox -> Primarily used for SZVAV
;    ConstantVolumeReheatBox  // Not supported
;    InductionVAVBox          // Not supported
;    DualDuctMixingBox        // Not supported
;  DEFAULT
;    Uncontrolled
  CHECKSIM
    if( ( Type = "VAVReheatBox" .OR. 
          Type = "ParallelFanBox" .OR.
          Type = "SeriesFanBox" ) .AND.
        ChildCount(CoilHtg) = 0 )
    then
      PostError("TerminalUnit '%s' is Type = '%s', but has no child heating coil.",
                 Name, Type)
    else if( ( AirSys:Type = "PVAV" .OR. AirSys:Type = "VAV" ) .AND.
             Type = "Uncontrolled" )
    then 
      PostError("TerminalUnit '%s' is Type = 'Uncontrolled', but is connected to a
                 VAV system. This is currently not supported. To simulate, use Type =
                 'VAVNoReheat' and set minimum flow maximum and minimum primary air
                 flow to be equal.", Name)
    else UNCHANGED
    endif endif
// Sizing transformation definitions defined by Library_HVAC.txt file.
  ANNUAL 
    z:Type
ENDRULE

// ********** Terminal Type Report **********************************************
RULE TrmlUnit:TypeRpt
  RULESETS
    T24N
  DESCRIPTION
    "Translates Type to TypeRpt."
  INPUTCLASS 
    NotInput
  OPTION
    Uncontrolled
    VAV Reheat Box
    Parallel Fan Box
    Series Fan Box
    VAV No Reheat Box
  ANNUAL_PROPOSED
    switch( Type )
      case "Uncontrolled"   : "Uncontrolled"
      case "VAVReheatBox"   : "VAV Reheat Box"
      case "ParallelFanBox" : "Parallel Fan Box"
      case "SeriesFanBox"   : "Series Fan Box"
      case "VAVNoReheatBox" : "VAV No Reheat Box"
      default : UNDEFINED
    endswitch
  ANNUAL_BASELINE
    UNDEFINED
ENDRULE

// ---------- Section 5.6.5.1 - VAV Air Flow -----------------------------------

// ********** Design Primary Airflow *******************************************
RULE TrmlUnit:PriAirFlowMax
  DESCRIPTION
    "The zone air delivery rate at design conditions" 
  HELP
    "For 'Uncontrolled' TerminalUnits, describes the design air flow rate provided 
     to zones when the system is on.  For VAV systems, specifies the maximum air 
     flow delivered to the zone by the TerminalUnit."
  REFERENCE 
    NACM Section 5.6.5.1
  INPUTCLASS 
    Required
  MINIMUM 
    0
  UNITS 
    cfm  
  REPORTPRECISION
    0
  DEFAULT
    if( LocalCompAssigned( PriAirSegRef ) .AND.
        LocalCompAssigned( ZnServedRef ) .AND. 
        IfValidAnd( SysCnt > 0 ) )
    then
      if( Proj:AutoHardSize = 1 )
      then // For PROPOSED AutoHardSizing only
        if( Proj:ModelName != "" )
        then UNCHANGED // TableSizing is used, see Project-TableSizing rules
        else
        if( Type = "Uncontrolled" .AND.
           AirSys:IsSglZnSys .AND. 
           PriAirSegRef:IsCVSupFan .AND.
           ( ValidOr( AirSys:NumTrmlUnitAllTypes, 0 ) / SysCnt ) = 1 )
        then // Is SZ system with only 1 TrmlUnit, use supply Fan:FlowCap
          PriAirSegRef:FanFlowCap
        else // Use regular Autohardsize rules
          Max( ( ZnServedRef:CondFlrAreaWithMult * AirSys:AirFlowPerSqFt / SysCnt ),
               ( ZnServedRef:VentFlowWithMult / SysCnt ) )
        endif endif 
      else if( Type = "Uncontrolled" .AND.
               AirSys:IsSglZnSys .AND. 
               PriAirSegRef:IsCVSupFan .AND.
               ( ValidOr( AirSys:NumTrmlUnitAllTypes, 0 ) / SysCnt ) = 1 )
      then // Is SZ system with only 1 TrmlUnit, use supply Fan:FlowCap
        PriAirSegRef:FanFlowCap
      else UNDEFINED
      endif endif
    else UNDEFINED
    endif
  CHECKSIM
    if( IfValidAnd( PriAirFlowMaxPerArea = 0 ) )
    then 
      PostError("The max. primary flow of TrmlUnit '%s' is zero; check inputs for
                 consistency the actual design flow.", Name) 
    else if( IfValidAnd( PriAirFlowMaxPerArea < 0.3 ) .AND. AirSys:IsVentOnlySys = 0 )
    then 
      PostWarning("The max. primary flow of TrmlUnit '%s' is less than 0.3 cfm/ft2.
                   which may be insufficient to meet the zone loads.", Name) 
    else UNCHANGED
    endif endif  
  SIZING
    if( BaseSysNum > 0 )
    then UNDEFINED
    else u:PriAirFlowMax
    endif
  ANNUAL
    if( BaseSysNum > 0 )
    then
      if( IfValidAnd( z:ZnServedRef:ClgDsgnFlowSim >= 0 ) .AND.
          IfValidAnd( z:ZnServedRef:HtgDsgnFlowSim >= 0 ) .AND.
          SysCnt > 0 )
      then
        if( AirSys:IsMultiZnSys )
        then 
        // For multizone, cooling sizing ratio is not applied to TerminalUnit flow
        Max( Max( z:ZnServedRef:ClgDsgnFlowSim, z:ZnServedRef:HtgDsgnFlowSim ),
             z:ZnServedRef:VentFlowWithMult ) / SysCnt
        else 
        // Cooling sizing ratio applied to TerminalUnit flow to ensure total system 
        // air flow is consistent with oversized cooling capacity
        Max( Max( z:ZnServedRef:ClgDsgnFlowSim, z:ZnServedRef:HtgDsgnFlowSim ) * Proj:ClgSizingRat,
             z:ZnServedRef:VentFlowWithMult ) / SysCnt
        endif
      else 0
      endif
    else z:PriAirFlowMax
    endif
ENDRULE

RULE TrmlUnit:PriAirFlowMaxSim
  DESCRIPTION
    "The zone air delivery rate at design conditions, for simulation" 
  INPUTCLASS 
    NotInput
  MINIMUM 
    0
  UNITS 
    cfm  
  REPORTPRECISION
    0
  DEFAULT
    if( LocalStatus( PriAirFlowMax ) > 0 )
    then PriAirFlowMax * SysCnt
    else 0
    endif
  SIZING
    // Autosize
  ANNUAL
    if( LocalStatus( PriAirFlowMax ) > 0 )
    then PriAirFlowMax * SysCnt
    else 0
    endif
ENDRULE


// ********** Minimum Primary Airflow ******************************************
RULE TrmlUnit:PriAirFlowMin
  DESCRIPTION
    "The minimum air flow rate of variable volume TerminalUnits."
  REFERENCE 
    NACM Section 5.6.5.1
  INPUTCLASS 
    CondRequired
  MINIMUM 
    0 
  COMMONMAXIMUM
    10000
  UNITS 
    cfm 
  REPORTPRECISION
    0
  DEFAULT : T24N
    if( Proj:AutoHardSize = 1 .AND. SysCnt > 0 .AND.
        LocalCompAssigned( ZnServedRef ) )
    then // For PROPOSED AutoHardSizing only
      if( AirSys:IsVAVSys )
      then
        if( IfValidAnd( AirSys:SupFanFlowMinRat > 0 ) .AND. AirSys:IsMultiZnSys = 0 )
        then // Is a SZ system and the fan min flow capacity has been defined
          PriAirFlowMax * AirSys:SupFanFlowMinRat 
        else if( LabArea > 0 )
        then // For labs, mininimum flow is min of 40% of design vent rate or 50% design flow
          Min( ZnServedRef:VentFlowWithMult * 0.4, 
               PriAirFlowMaxSim * 0.5 ) / SysCnt
        else if( CommKitArea > 0 )
        then // For kitchens, mininimum flow is max of 50% of design vent rate or 50% design flow
          Max( ZnServedRef:VentFlowWithMult * 0.5, 
               PriAirFlowMaxSim * 0.5) / SysCnt
        else if( AirSys:Type = "SZVAVAC" .OR. AirSys:Type = "SZVAVHP" )
        then // Is regular SZVAV, mininimum flow is max of min vent rate or 50% design flow
          Min( Max( ZnServedRef:VentFlowMinWithMult, 
                    PriAirFlowMaxSim * 0.5 ),
               PriAirFlowMaxSim ) / SysCnt         
        else // Is PVAV or VAV, mininimum flow is max of min vent rate or 20% design flow
          Min( Max( ZnServedRef:VentFlowMinWithMult, 
                    PriAirFlowMaxSim * 0.2 ),
               PriAirFlowMaxSim ) / SysCnt
        endif endif endif endif
      else UNDEFINED
      endif
    else UNDEFINED
    endif
  DEFAULT : S901G ECBC
// Only difference between T24N and S901G is fall-through default is 30% min flow
    if( Proj:AutoHardSize = 1 .AND. SysCnt > 0 .AND.
        LocalCompAssigned( ZnServedRef ) )
    then // For PROPOSED AutoHardSizing only
      if( AirSys:IsVAVSys )
      then
        if( IfValidAnd( AirSys:SupFanFlowMinRat > 0 ) .AND. AirSys:IsMultiZnSys = 0 )
        then // Is a SZ system and the fan min flow capacity has been defined
          PriAirFlowMax * AirSys:SupFanFlowMinRat 
        else if( LabArea > 0 )
        then // For labs, mininimum flow is min of 40% of design vent rate or 50% design flow
          Min( ZnServedRef:VentFlowWithMult * 0.4, 
               PriAirFlowMaxSim * 0.5 ) / SysCnt
        else if( CommKitArea > 0 )
        then // For kitchens, mininimum flow is max of 50% of design vent rate or 50% design flow
          Max( ZnServedRef:VentFlowWithMult * 0.5, 
               PriAirFlowMaxSim * 0.5 ) / SysCnt
        else if( AirSys:Type = "SZVAVAC" .OR. AirSys:Type = "SZVAVHP" )
        then // Is regular SZVAV, mininimum flow is max of min vent rate or 50% design flow
          Min( Max( ZnServedRef:VentFlowMinWithMult, 
                    PriAirFlowMaxSim * 0.5 ),
               PriAirFlowMaxSim ) / SysCnt         
        else // Is PVAV or VAV, mininimum flow is max of min vent rate or 30% design flow
          Min( Max( ZnServedRef:VentFlowMinWithMult, 
                    PriAirFlowMaxSim * 0.3 ),
               PriAirFlowMaxSim ) / SysCnt
        endif endif endif endif
      else UNDEFINED
      endif
    else UNDEFINED
    endif
  CHECKCODE : T24N
    if( Type != "Uncontrolled" .AND.
        LocalStatus( PriAirFlowMin ) > 0 .AND.
        IfValidAnd( PriAirFlowMax > 0 ) .AND. 
        AirSys:LabArea = 0 ) 
    then
      if( PriAirFlowMin * Cnt < ZnServedRef:VentFlowMin * 0.99 )
      then 
        PostError("The min. primary flow of TrmlUnit '%s' is %.0f cfm, which is less
                   than the minimum zone ventilation flow of %.0f cfm.", 
                   Name, PriAirFlowMin, ZnServedRef:VentFlowMin )
      else 
      if( PriAirFlowMin < ( PriAirFlowMax * 0.2 * 0.99 ) )
      then
        PostWarning("The min. primary flow of TrmlUnit '%s' is %.0f cfm, which is
                     only %.1f% of the max. primary flow, %.0f cfm.", 
                     Name, PriAirFlowMin, PriAirFlowMin/PriAirFlowMax*100, 
                     PriAirFlowMax)
      else
      if( PriAirFlowMin > PriAirFlowMax * 1.01 )
      then
        PostWarning("The min. primary flow of TrmlUnit '%s' is %.0f cfm, which is
                     greater than the max. primary flow %.0f cfm. The minimum primary
                     flow will be reset to equal the maximum.", 
                     Name, PriAirFlowMin, PriAirFlowMax)
      else UNCHANGED
      endif endif endif
    else UNCHANGED
    endif
  CHECKCODE : S901G ECBC
    if( Type != "Uncontrolled" .AND.
        LocalStatus( PriAirFlowMin ) > 0 .AND.
        IfValidAnd( PriAirFlowMax > 0 ) .AND. 
        AirSys:LabArea = 0 ) 
    then
      if( PriAirFlowMin * Cnt < ZnServedRef:VentFlowMin * 0.99 )
      then // Increase tolerance on check. See issue 1268
        PostWarning("The min. primary flow of TrmlUnit '%s' is %.0f cfm, which is less
                   than the minimum zone ventilation flow of %.0f cfm.", 
                   Name, PriAirFlowMin, ZnServedRef:VentFlowMin )
      else 
      if( PriAirFlowMin < ( PriAirFlowMax * 0.2 * 0.99 ) )
      then
        PostWarning("The min. primary flow of TrmlUnit '%s' is %.0f cfm, which is
                     only %2.0f% of the max. primary flow, %.0f cfm.", 
                     Name, PriAirFlowMin, PriAirFlowMin/PriAirFlowMax*100, 
                     PriAirFlowMax)
      else
      if( PriAirFlowMin > PriAirFlowMax * 1.01 )
      then
        PostWarning("The min. primary flow of TrmlUnit '%s' is %.0f cfm, which is
                     greater than the max. primary flow %.0f cfm. The minimum primary
                     flow will be reset to equal the maximum.", 
                     Name, PriAirFlowMin, PriAirFlowMax)
      else UNCHANGED
      endif endif endif
    else UNCHANGED
    endif
  CHECKSIM
    if( Type != "Uncontrolled" )
    then 
      if( IfValidAnd( PriAirFlowMin > 0 ) = 0 )
      then
        PostError("The minimum primary flow of TerminalUnit '%s' must defined.", 
                   Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
  SIZING
    if( BaseSysNum > 0 .AND. Type != "Uncontrolled" )
    then // --> Is a BASELINE system
      if( LabArea > 0 )
      then // For labs, minimum flow is 40% of minimum vent rate
        ZnServedRef:VentFlowWithMult * 0.4 / SysCnt
      else if( CommKitArea > 0 )
      then // For kitchens, minimum flow is 50% of minimum vent rate
        ZnServedRef:VentFlowWithMult * 0.5 / SysCnt
      else // Use max of vent fraction
        ZnServedRef:VentFlowWithMult / SysCnt
      endif endif
    else if( AirSys:Type = "SZVAVAC" .OR. AirSys:Type = "SZVAVHP" )
    then // Look to system fan for min flow ratio or use 50% of TrmlUnit max flow
         // but no larger than PriAirFlowMax
      Min( PriAirFlowMax * ValidOr( AirSys:SupFanFlowMinRat, 0.5 ), PriAirFlowMax )
    else if( Type = "Uncontrolled" )
    then // Not used for 'Uncontrolled' TrmlUnits
      UNDEFINED 
    else // User value, but no larger than PriAirFlowMax
      Min( ValidOr( PriAirFlowMin, 0 ), PriAirFlowMax ) 
    endif endif endif
  ANNUAL : T24N
    if( Type != "Uncontrolled" ) 
    then 
      if( BaseSysNum > 0 .AND. AirSys:IsVAVSys )
      then // --> Is a BASELINE system
        if( LabArea > 0 )
        then // For labs, mininimum flow is min of 40% of design vent rate or 50% design flow
          Min( ZnServedRef:VentFlowWithMult * 0.4, 
               PriAirFlowMaxSim * 0.5 ) / SysCnt
        else if( CommKitArea > 0 )
        then // For kitchens, mininimum flow is max of 50% of design vent rate or 50% design flow
          Max( ZnServedRef:VentFlowWithMult * 0.5, 
               PriAirFlowMaxSim * 0.5 ) / SysCnt
        else if( AirSys:Type = "SZVAVAC" )
        then // Is regular SZVAV, mininimum flow is max of min vent rate or 50% design flow
          Max( ZnServedRef:VentFlowMinWithMult, 
               PriAirFlowMaxSim * 0.5 ) / SysCnt
        else // Is PVAV or VAV, mininimum flow is max of min vent rate or 20% design flow
          Max( ZnServedRef:VentFlowMinWithMult, 
               PriAirFlowMaxSim * 0.2 ) / SysCnt
        endif endif endif
      else z:PriAirFlowMin
      endif
    else UNDEFINED
    endif
  ANNUAL : S901G ECBC
// Only difference between T24N and S901G is fall-through default is 30% min flow
    if( Type != "Uncontrolled" ) 
    then 
      if( BaseSysNum > 0 .AND. AirSys:IsVAVSys )
      then // --> Is a BASELINE system
        if( LabArea > 0 )
        then // For labs, mininimum flow is min of 40% of design vent rate or 50% design flow
          Min( ZnServedRef:VentFlowWithMult * 0.4, 
               PriAirFlowMaxSim * 0.5 ) / SysCnt
        else if( CommKitArea > 0 )
        then // For kitchens, mininimum flow is max of 50% of design vent rate or 50% design flow
          Min( ZnServedRef:VentFlowWithMult * 0.5, 
               PriAirFlowMaxSim * 0.5 ) / SysCnt
        else if( AirSys:Type = "SZVAVAC" )
        then // Is regular SZVAV, mininimum flow is max of min vent rate or 50% design flow
          Max( ZnServedRef:VentFlowMinWithMult, 
               PriAirFlowMaxSim * 0.5 ) / SysCnt
        else // Is PVAV or VAV, mininimum flow is max of min vent rate or 20% design flow
          Max( ZnServedRef:VentFlowMinWithMult, 
               PriAirFlowMaxSim * 0.3 ) / SysCnt
        endif endif endif
      else z:PriAirFlowMin
      endif
    else UNDEFINED
    endif
ENDRULE
// Is SZVAV, baseline min flow is 50% or min vent rate
RULE TrmlUnit:PriAirFlowMinSim
  DESCRIPTION
    "The minimum air flow rate of variable volume TerminalUnits, for simulation." 
  INPUTCLASS 
    NotInput
  MINIMUM 
    0
  UNITS 
    cfm 
  REPORTPRECISION
    0
  DEFAULT
    if( LocalStatus( PriAirFlowMin ) > 0 )
    then PriAirFlowMin * SysCnt
    else UNDEFINED
    endif  
  SIZING
    if( LocalStatus( PriAirFlowMin ) > 0 )
    then PriAirFlowMin * SysCnt
    else UNDEFINED
    endif 
  ANNUAL
    if( LocalStatus( PriAirFlowMin ) > 0 )
    then PriAirFlowMin * SysCnt
    else UNDEFINED
    endif 
ENDRULE


// QC Rules
RULE NEW AirSys:NumTrmlUnitAllTypes
  DATATYPE
    Integer
  LONGFORM
    NumberTerminalUnitAllTypes
  DESCRIPTION
    "The number of TerminalUnits, of any Type, that are part of the AirSystem, 
     including TrmlUnit:Cnt and AirSys:Cnt multipliers." 
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildren( TrmlUnit:SysCnt )
  CHECKSIM
    if( IsExhSys = 0 .AND. NumTrmlUnitAllTypes = 0 )
    then 
      PostError("AirSystem '%s' has no TerminalUnits defined.", Name)
    else
    if( IsExhSys = 0 .AND. IsMultiZnSys = 0 .AND.
        ( NumTrmlUnitAllTypes - 
          SumChildrenIf( TrmlUnit:SysCnt, TrmlUnit:Type = "VAVNoReheatBox" ) -
          SumChildrenIf( TrmlUnit:SysCnt, TrmlUnit:Type = "Uncontrolled" ) ) > 0 )
    then
      PostError("AirSystem '%s' is single-zone system but has VAV fan-powered or
                 reheat terminals.  This is currently not supported.", Name)
    else UNCHANGED
    endif endif
  SIZING
    SumChildren( TrmlUnit:SysCnt )
  ANNUAL
    z:NumTrmlUnitAllTypes
ENDRULE
RULE NEW AirSys:NumTrmlUnitNonFanPowered
  DATATYPE
    Integer
  LONGFORM
    NumberTerminalUnitNonFanPowered
  DESCRIPTION
    "The number of non-fan-powered TerminalUnits (except Uncontrolled) 
     that are part of the AirSystem, including TrmlUnit:Cnt and AirSys:Cnt 
     multipliers." 
  INPUTCLASS 
    NotInput
  DEFAULT
    // NOTE: This will count NoReheatBoxes even if used in SZVAV.
    SumChildrenIf( TrmlUnit:SysCnt, TrmlUnit:Type = "VAVReheatBox" ) +
    SumChildrenIf( TrmlUnit:SysCnt, TrmlUnit:Type = "VAVNoReheatBox" )
  SIZING
    SumChildrenIf( TrmlUnit:SysCnt, TrmlUnit:Type = "VAVReheatBox" ) + 
    SumChildrenIf( TrmlUnit:SysCnt, TrmlUnit:Type = "VAVNoReheatBox" )
  ANNUAL
    z:NumTrmlUnitNonFanPowered
ENDRULE
RULE NEW AirSys:NumTrmlUnitFanPowered
  DATATYPE
    Integer
  LONGFORM
    NumberTerminalUnitFanPowered
  DESCRIPTION
    "The number of fan-powered TerminalUnits that are part of the AirSystem, 
     including TrmlUnit:Cnt and AirSys:Cnt multipliers." 
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildrenIf( TrmlUnit:SysCnt, TrmlUnit:Type = "ParallelFanBox" ) +
    SumChildrenIf( TrmlUnit:SysCnt, TrmlUnit:Type = "SeriesFanBox" )
  SIZING
    SumChildrenIf( TrmlUnit:SysCnt, TrmlUnit:Type = "ParallelFanBox" ) +
    SumChildrenIf( TrmlUnit:SysCnt, TrmlUnit:Type = "SeriesFanBox" )
   ANNUAL
     z:NumTrmlUnitFanPowered
ENDRULE
RULE NEW Bldg:NumTrmlUnit
  DATATYPE
    Integer
  LONGFORM
    NumberTerminalUnit
  DESCRIPTION
    "The number of non 'Uncontrolled' TerminalUnits used in building AirSystems, 
     including TrmlUnit:Cnt and AirSys:Cnt multipliers." 
  INPUTCLASS 
    NotInput
  DEFAULT
    SumChildren( AirSys:NumTrmlUnitNonFanPowered ) + 
    SumChildren( AirSys:NumTrmlUnitFanPowered )
  SIZING
    SumChildren( AirSys:NumTrmlUnitNonFanPowered ) + 
    SumChildren( AirSys:NumTrmlUnitFanPowered )
  ANNUAL 
    z:NumTrmlUnit
ENDRULE

// Calculate normalized air flow metrics
RULE NEW TrmlUnit:PriAirFlowMaxPerArea
  DATATYPE
    Float
  LONGFORM
    PrimaryAirFlowMaximumPerArea
  DESCRIPTION
    "The maximum primary air flow divided total zone area." 
  INPUTCLASS 
    NotInput
  UNITS
    cfm/ft2
  DEFAULT
    if( IfValidAnd( PriAirFlowMaxSim > 0 ) .AND.
        IfValidAnd( FlrAreaServed > 0 ) )
    then PriAirFlowMaxSim / FlrAreaServed
    else UNDEFINED
    endif
  SIZING
    UNDEFINED
  ANNUAL 
    if( IfValidAnd( PriAirFlowMaxSim > 0 ) .AND.
        IfValidAnd( FlrAreaServed > 0 ) )
    then PriAirFlowMaxSim / FlrAreaServed
    else UNDEFINED
    endif
ENDRULE
RULE NEW TrmlUnit:PriAirFlowMaxACH
  DATATYPE
    Float
  LONGFORM
    PrimaryAirFlowMaximumACH
  DESCRIPTION
    "The maximum primary air flow, converted to ACH" 
  INPUTCLASS 
    NotInput
  UNITS
    ACH
  DEFAULT
    if( IfValidAnd( PriAirFlowMaxSim > 0 ) .AND.
        IfValidAnd( VolServed > 0 ) )
    then PriAirFlowMaxSim * 60 / VolServed
    else UNDEFINED
    endif
  SIZING
    UNDEFINED
  ANNUAL 
    if( IfValidAnd( PriAirFlowMaxSim > 0 ) .AND.
        IfValidAnd( VolServed > 0 ) )
    then PriAirFlowMaxSim * 60 / VolServed
    else UNDEFINED
    endif
ENDRULE
RULE NEW TrmlUnit:PriAirFlowMinPerArea
  DATATYPE
    Float
  LONGFORM
    PrimaryAirFlowMinimumPerArea
  DESCRIPTION
    "The minimum primary air flow divided total zone area" 
  INPUTCLASS 
    NotInput
  UNITS
    cfm/ft2
  DEFAULT
    if( IfValidAnd( PriAirFlowMinSim > 0 ) .AND.
        IfValidAnd( FlrAreaServed > 0 ) )
    then PriAirFlowMinSim / FlrAreaServed
    else UNDEFINED
    endif
  SIZING
    UNDEFINED
  ANNUAL 
    if( IfValidAnd( PriAirFlowMinSim > 0 ) .AND.
        IfValidAnd( FlrAreaServed > 0 ) )
    then PriAirFlowMinSim / FlrAreaServed
    else UNDEFINED
    endif
ENDRULE
RULE NEW TrmlUnit:PriAirFlowMinACH
  DATATYPE
    Float
  LONGFORM
    PrimaryAirFlowMinimumACH
  DESCRIPTION
    "The minimum primary air flow, converted to ACH" 
  INPUTCLASS 
    NotInput
  UNITS
    ACH
  DEFAULT
    if( IfValidAnd( PriAirFlowMinSim > 0 ) .AND.
        IfValidAnd( VolServed > 0 ) )
    then PriAirFlowMinSim * 60 / VolServed
    else UNDEFINED
    endif
  SIZING
    UNDEFINED
  ANNUAL 
    if( IfValidAnd( PriAirFlowMinSim > 0 ) .AND.
        IfValidAnd( VolServed > 0 ) )
    then PriAirFlowMinSim * 60 / VolServed
    else UNDEFINED
    endif
ENDRULE
RULE TrmlUnit:PriAirFlowMinFrac
  DESCRIPTION
    "The fraction calculated by dividing the zone minimum primary air flow by the
     design (maximum) primary air flow for the zone."
  INPUTCLASS 
    NotInput
  REPORTPRECISION
    2
  DEFAULT 
    if( IfValidAnd( PriAirFlowMin > 0 ) .AND.
        IfValidAnd( PriAirFlowMax > 0 ) )
    then PriAirFlowMin / PriAirFlowMax
    else UNDEFINED
    endif
  ANNUAL 
    if( IfValidAnd( PriAirFlowMin > 0 ) .AND.
        IfValidAnd( PriAirFlowMax > 0 ) )
    then PriAirFlowMin / PriAirFlowMax
    else UNDEFINED
    endif
ENDRULE

// For reporting ThrmlZn Properties
RULE ThrmlZn:PriAirFlowMax
  DESCRIPTION
    "The maximum air flow rate of provided by the TerminalUnit that serves the zone."
  INPUTCLASS 
    NotInput
  UNITS 
    cfm 
  REPORTPRECISION
    0  
  DEFAULT
    if( LocalCompAssigned( TrmlUnitRef ) )
    then TrmlUnitRef:PriAirFlowMax
    else UNDEFINED
    endif
  ANNUAL
    if( LocalCompAssigned( TrmlUnitRef ) )
    then TrmlUnitRef:PriAirFlowMax
    else UNDEFINED
    endif
ENDRULE
RULE ThrmlZn:PriAirFlowMin
  DESCRIPTION
    "The minimum air flow rate of provided by the TerminalUnit that serves the zone.
     Only applicable to VAV terminal units."
  INPUTCLASS 
    NotInput
  UNITS 
    cfm
  REPORTPRECISION
    0  
  DEFAULT
    if( LocalCompAssigned( TrmlUnitRef ) )
    then TrmlUnitRef:PriAirFlowMin
    else UNDEFINED
    endif
  ANNUAL
    if( LocalCompAssigned( TrmlUnitRef ) )
    then TrmlUnitRef:PriAirFlowMin
    else UNDEFINED
    endif
ENDRULE
RULE ThrmlZn:PriAirFlowMinFrac
  DESCRIPTION
    "The fraction calculated by dividing the zone minimum primary air flow by the
     design (maximum) primary airflow for the zone."
  INPUTCLASS 
    NotInput
  REPORTPRECISION
    2
  DEFAULT 
    if( LocalCompAssigned( TrmlUnitRef ) )
    then TrmlUnitRef:PriAirFlowMinFrac
    else UNDEFINED
    endif
  ANNUAL 
    if( LocalCompAssigned( TrmlUnitRef ) )
    then TrmlUnitRef:PriAirFlowMinFrac
    else UNDEFINED
    endif
ENDRULE
