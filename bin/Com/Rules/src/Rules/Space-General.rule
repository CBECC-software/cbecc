// Space - General
//
// -------------------------------------------------------------------------
//  Copyright (c) 2014, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------
//  

//  This rule file addresses intermediate Space properties used for reporting and 
//  to deriving values for other propeties.


// No longer used
;RULE Spc:SpcCompleteBldgFunc
;  DESCRIPTION
;    "The method for selecting baseline lighting and other loads for a space"  
;  REFERENCE 
;    NACM Section 5.4.3
;  INPUTCLASS
;    NotInput
;DEFAULT
;    if( Building:FuncClassMthd = "CompleteBuildingMethod")
;    then Bldg:CompleteBldgFunc
;    else UNDEFINED
;    endif
;ENDRULE


// ********** Conditioning Type ***************************************************
RULE Spc:CondgType
  DESCRIPTION
    "The conditioning type designation for the Space."  
  HELP
    ""  
  REFERENCE 
    NACM Section 5.3.1    
  INPUTCLASS
    Required
//OPTION         
//  DirectlyConditioned
//  IndirectlyConditioned
//  Unconditioned
//  Plenum
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Spc:IsCond
  DATATYPE
    Integer
  LONGFORM
    IsConditioned
  DESCRIPTION
    "A flag that indicates if the space is either 'DirectlyConditioned' or
     IndirectlyConditioned'."  
  INPUTCLASS
    NotInput
  DEFAULT
    if( CondgType = "DirectlyConditioned" .OR.
        CondgType = "IndirectlyConditioned" )
    then 1
    else 0
    endif
ENDRULE



// ********** Plenum Space/ThrmlZn References **********************************
// ------------------- Supply plenums ------------------------
RULE Spc:SupPlenumSpcRef
  DESCRIPTION
    "The name of supply air plenum space for the current Space."
  HELP
    "If this Space reference is defined, the corresponding ThermalZone reference
     (SupplyPlenumZoneReference) is automatically defaulted."
  INPUTCLASS 
    Optional
// The following check is not useful since there is a Warning at AirSys:Num*PlenumZn
; CHECKSIM
;   if( LocalCompAssigned( SupPlenumSpcRef ) = 0 .AND.
;       IsPlenumSup = 1 )
;   then // System serving space has PlenumZones return air path, but not Space defined.
;     PostWarning("Space '%s' is part of a ThermalZone that is served by an
;                  AirSystem with a Supply AirSegment with Path = 'PlenumZones',
;                  but the Space has no SupplyPlenumSpaceReference defined. 
;                  Plenum return for this space/zone will not be be simulated.",
;                  Name)
;   else
;   if( LocalCompAssigned( SupPlenumSpcRef ) .AND.
;       IsPlenumSup = 1 )
;   then // System serving space has PlenumZones return air path, but not Space defined.
;     PostWarning("The supply air path to Space '%s' is via PlenumZones. Check
;                  Space/ThermalZone plenum references and the Supply AirSegment:Path
;                  if this is not intended.", Name)
;   else UNCHANGED
;   endif endif
  SIZING_PROPOSED
    if( IsCond .AND. Proj:CreateHVAC .AND. HVACAreaNew > 0 )
    then UNDEFINED // Ignore plenum space refs if creating baseline systems for proposed
    else u:SupPlenumSpcRef
    endif
  SIZING_BASELINE : T24N
    if( IsCond .AND. Proj:CreateHVAC = 0 .AND. HVACAreaNew = 0 )
    then zp:SupPlenumSpcRef // Same as proposed
    else UNDEFINED // Baseline does not use plenum return
    endif
  SIZING_BASELINE : S901G ECBC
    zp:SupPlenumSpcRef 
ENDRULE
// Set flag for PlenumSupply at AirSys
// -----------------------------------------------------------------------------
RULE NEW AirSys:IsPlenumSup
  DATATYPE
    Integer
  LONGFORM
    IsPlenumSupply
  INPUTCLASS 
    NotInput
  DEFAULT
    if( LocalCompAssigned( SupAirSegRef ) )
    then
      if( SupAirSegRef:Path = "PlenumZones" )
      then 1
      else 0
      endif
    else 0
    endif    
ENDRULE
// Set flag at ThrmlZn
// -----------------------------------------------------------------------------
RULE NEW ThrmlZn:IsPlenumSup
  DATATYPE
    Integer
  LONGFORM
    IsPlenumSupply
  DESCRIPTION
    "A flag that indicates if the AirSystem serving the zone uses plenum supply."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( LocalCompAssigned( PriAirCondgSysRef ) = ComponentType( "AirSys" ) .AND. 
        LocalCompAssigned( SupPlenumZnRef ) > 0 )
    then ValidOr( PriAirCondgSysRef:IsPlenumSup, 0 )
    else 
    if( LocalCompAssigned( VentSysRef ) = ComponentType( "AirSys" ) .AND. 
        LocalCompAssigned( SupPlenumZnRef ) > 0 )
    then ValidOr( VentSysRef:IsPlenumSup, 0 )
    else 0
    endif endif
  SIZING
    if( LocalCompAssigned( SupPlenumZnRef ) )
    then IsPlenumSup
    else 0
    endif
ENDRULE
// Set flag at Spc
// -----------------------------------------------------------------------------
RULE NEW Spc:IsPlenumSup
  DATATYPE
    Integer
  LONGFORM
    IsPlenumSupply
  DESCRIPTION
    "A flag that indicates if the AirSystem serving the Space uses plenum supply."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( IsCond .AND. 
        LocalCompAssigned( SupPlenumSpcRef ) .AND.
        LocalCompAssigned( ThrmlZnRef ) )
    then ThrmlZnRef:IsPlenumSup
    else 0
    endif
  SIZING
    if( LocalCompAssigned( SupPlenumSpcRef ) )
    then ThrmlZnRef:IsPlenumSup
    else 0
    endif    
ENDRULE
// Set name of plenum ThrmlZn at Space for defaulting
// -----------------------------------------------------------------------------
RULE NEW Spc:SupPlenumZnRef
  DATATYPE
    ThrmlZn
  LONGFORM
    SupplyPlenumZoneReference
  DESCRIPTION
    "The name of ThrmlZn referenced by the SupplyPlenumSpaceReference."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( LocalCompAssigned ( SupPlenumSpcRef ) )
    then SupPlenumSpcRef:ThrmlZnRef
    else UNDEFINED
    endif   
ENDRULE
// Default plenum for ThrmlZn
// -----------------------------------------------------------------------------
RULE ThrmlZn:SupPlenumZnRef
  DESCRIPTION
    "The name of supply air plenum zone for the current ThermalZone."
  HELP
    "To simulate a supply air plenum, the Type = Supply AirSegment of the 
     AirSystem that serves the zone must have Path = PlenumZones. Otherwise,
     the plenum supply is not simulated. Additionally, plenum supply
     is not used for ZoneSystems.


     This property is automatically defaulted if the SupplyPlenumSpaceReference
     is defined at the Space."
  INPUTCLASS 
    Optional
  DEFAULT
    // Default based on the PlenumSpcRef of the largest space that references the ThrmlZn
    if( LocalCompAssigned( SpcWithMaxAreaRef ) )
    then SpcWithMaxAreaRef:SupPlenumZnRef
    else UNDEFINED
    endif
  SIZING_PROPOSED
    if( IsPlenumSup = 0 )
    then UNDEFINED
    else if( Proj:CreateHVAC .AND. HVACAreaNew > 0 )
    then UNDEFINED // Ignore plenum space refs if creating baseline systems for proposed
    else u:SupPlenumZnRef
    endif endif
  SIZING_BASELINE : T24N
    if( Proj:CreateHVAC = 0 .AND. HVACAreaNew = 0 )
    then zp:SupPlenumZnRef // Same as proposed
    else UNDEFINED // Baseline does not use plenum return
    endif  
  SIZING_BASELINE : S901G ECBC
    zp:SupPlenumZnRef 
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW AirSys:NumSupPlenumZn
  DATATYPE
    Integer
  LONGFORM
    NumberSupplyPlenumZones
  INPUTCLASS 
    NotInput
  DEFAULT
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:IsPlenumSup ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:IsPlenumSup ) )
  CHECKSIM
    if( IsPlenumSup = 1 .AND. NumSupPlenumZn = 0 )
    then 
      PostWarning("AirSystem '%s' has Supply AirSegment:Path = 'PlenumZones', but
                 but serves no ThermalZones with SupplyPlenumZoneReference defined.
                 No supply air plenum will be simulated.", Name )
    else
    if( IsPlenumSup = 1 .AND. NumSupPlenumZn > 0 )
    then 
      PostWarning("AirSystem '%s' is modeled with a plenum supply air path. Check
                   Space/ThermalZone plenum references and the Supply 
                   AirSegment:Path inputs if this is not intended.", Name)
    else UNCHANGED
    endif endif
ENDRULE


// ------------------- Return plenums ------------------------
RULE Spc:RetPlenumSpcRef
  DESCRIPTION
    "The name of return air plenum space for the current Space."
  HELP
    "If this Space reference is defined, the corresponding ThermalZone reference
     (ReturnPlenumZoneReference) is automatically defaulted."
  INPUTCLASS 
    Optional
  CHECKSIM
    if( LocalCompAssigned( RetPlenumSpcRef ) = 0 .AND.
        IsPlenumRet = 1 )
    then // System serving space has PlenumZones return air path, but not Space defined.
      PostWarning("Space '%s' is part of a ThermalZone that is served by an
                   AirSystem with a Return/Relief AirSegment with Path = 'PlenumZones',
                   but the Space has no SupplyPlenumSpaceReference defined. 
                   Plenum return for this space/zone will not be be simulated.",
                   Name)
    else UNCHANGED
    endif
  SIZING_PROPOSED
    if( IsCond .AND. Proj:CreateHVAC .AND. HVACAreaNew > 0 )
    then UNDEFINED // Ignore plenum space refs if creating baseline systems for proposed
    else u:RetPlenumSpcRef
    endif
  SIZING_BASELINE : T24N
    if( IsCond .AND. Proj:CreateHVAC = 0 .AND. HVACAreaNew = 0 )
    then zp:RetPlenumSpcRef // Same as proposed
    else UNDEFINED // Baseline does not use plenum return
    endif 
  SIZING_BASELINE : S901G ECBC
    zp:RetPlenumSpcRef   
ENDRULE
// Rules for defaulting/checking HVAC plenum status/defaulting
// Set flag for PlenumReturn at AirSys
// -----------------------------------------------------------------------------
RULE NEW AirSys:IsPlenumRet
  DATATYPE
    Integer
  LONGFORM
    IsPlenumReturn
  INPUTCLASS 
    NotInput
  DEFAULT
    if( LocalCompAssigned( RetAirSegRef ) )
    then
      if( RetAirSegRef:Path = "PlenumZones" )
      then 1
      else 0
      endif
    else 0
    endif
ENDRULE
// Set flag at ThrmlZn
// -----------------------------------------------------------------------------
RULE NEW ThrmlZn:IsPlenumRet
  DATATYPE
    Integer
  LONGFORM
    IsPlenumReturn
  DESCRIPTION
    "A flag that indicates if the AirSystem serving the zone uses plenum return."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( LocalCompAssigned( PriAirCondgSysRef ) = ComponentType( "AirSys" ) .AND. 
        LocalCompAssigned( RetPlenumZnRef ) > 0 )
    then ValidOr( PriAirCondgSysRef:IsPlenumRet, 0 )
    else
    if( LocalCompAssigned( VentSysRef ) = ComponentType( "AirSys" ) .AND. 
        LocalCompAssigned( RetPlenumZnRef ) > 0 )
    then ValidOr( VentSysRef:IsPlenumRet, 0 )
    else 0
    endif endif
  SIZING
    if( LocalCompAssigned( RetPlenumZnRef ) )
    then u:IsPlenumRet
    else 0
    endif
ENDRULE
// Set flag at Spc
// -----------------------------------------------------------------------------
RULE NEW Spc:IsPlenumRet
  DATATYPE
    Integer
  LONGFORM
    IsPlenumReturn
  DESCRIPTION
    "A flag that indicates if the AirSystem serving the Space uses plenum return."
  INPUTCLASS 
    Optional
  DEFAULT
    if( IsCond .AND. 
        LocalCompAssigned( RetPlenumSpcRef ) .AND.
        LocalCompAssigned( ThrmlZnRef ) )
    then ThrmlZnRef:IsPlenumRet
    else 0
    endif
  SIZING
    if( LocalCompAssigned( RetPlenumSpcRef ) )
    then ThrmlZnRef:IsPlenumRet
    else 0
    endif    
ENDRULE
// Specify PlenumZn at space for defaulting
// -----------------------------------------------------------------------------
RULE NEW Spc:RetPlenumZnRef
  DATATYPE
    ThrmlZn
  LONGFORM
    ReturnPlenumZoneReference
  DESCRIPTION
    "The name of ThrmlZn referenced by the ReturnPlenumSpaceReference."
  INPUTCLASS 
    NotInput
  DEFAULT
    if( LocalCompAssigned ( RetPlenumSpcRef ) )
    then RetPlenumSpcRef:ThrmlZnRef
    else UNDEFINED
    endif   
ENDRULE
// Default plenum for ThrmlZn
// -----------------------------------------------------------------------------
RULE ThrmlZn:RetPlenumZnRef
  DESCRIPTION
    "The name of return air plenum zone for the current ThermalZone."
  HELP
    "To simulate a return air plenum, the Type = Return or Relief AirSegment of the 
     AirSystem that serves the zone must have Path = PlenumZones. Otherwise,
     the plenum return is not simulated. Additionally, plenum supply
     is not used for ZoneSystems.


     This property is automatically defaulted if the ReturnPlenumSpaceReference
     is defined at the Space."
  INPUTCLASS 
    Optional
  DEFAULT
    // Default based on the PlenumSpcRef of the largest space that references the ThrmlZn
    if( LocalCompAssigned( SpcWithMaxAreaRef ) )
    then SpcWithMaxAreaRef:RetPlenumZnRef
    else UNDEFINED
    endif
  SIZING_PROPOSED
    if( u:IsPlenumRet = 0 )
    then UNDEFINED
    else if( Proj:CreateHVAC .AND. HVACAreaNew > 0 )
    then UNDEFINED // Ignore plenum space refs if creating baseline systems for proposed
    else u:RetPlenumZnRef
    endif endif
  SIZING_BASELINE : T24N
    if( Proj:CreateHVAC = 0 .AND. HVACAreaNew = 0 )
    then zp:RetPlenumZnRef // Same as proposed
    else UNDEFINED // Baseline does not use plenum return
    endif 
  SIZING_BASELINE : S901G ECBC
    zp:RetPlenumZnRef   
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW AirSys:NumRetPlenumZn
  DATATYPE
    Integer
  LONGFORM
    NumberReturnPlenumZones
  INPUTCLASS 
    NotInput
  DEFAULT
    Max( SumRevRef( ThrmlZn:PriAirCondgSysRef, ThrmlZn:IsPlenumRet ),
         SumRevRef( ThrmlZn:VentSysRef, ThrmlZn:IsPlenumRet ) )
  CHECKSIM
    if( IsPlenumRet = 1 .AND. NumRetPlenumZn = 0 )
    then 
      PostWarning("AirSystem '%s' has Return/Relief AirSegment:Path = 'PlenumZones',
                 but serves no ThermalZones with ReturnPlenumZoneReference defined.
                 No return air plenum will be simulated.", Name )
    else
    if( IsPlenumRet = 1 .AND. NumRetPlenumZn > 0 )
    then 
      PostWarning("AirSystem '%s' is modeled with a plenum return air path. Check
                   Space/ThermalZone plenum references and the Return/Relief
                   AirSegment:Path inputs if this is not intended.", Name)
    else UNCHANGED
    endif endif
ENDRULE



// ********** Space Function ***************************************************
// Space Functions:  Each building space is assigned one space function.  
// Design internal loads and other space function input assumptions, including 
// the assigned schedule group described above, are defined in Appendix 5.4A. 
// The schedule group and the schedule values for each space function are prescribed 
// for compliance analysis, with the exception of the following space functions:
//      Corridors, Restrooms, Stairs, and Support Areas
//      Electrical, Mechanical, Telephone Rooms
//      Laundry
//      Lobby, Main Entry
//      Locker/Dressing Room
//      Waiting Area
// These space functions are common to many different building types, and therefore, 
// the user can assign any of the available schedule groups defined in Appendix 5.4B.  
// This mitigates the issue of conflicting schedule profiles if these common functions 
// are combined into a single thermal zone or served by the same HVAC system as 
// surrounding zones. In the event the user does not assign a schedule group to 
// these common space types, default assumptions are defined in the Appendix 5.4B. 
// -----------------------------------------------------------------------------
RULE Spc:SpcFunc 
  DESCRIPTION
    "The area category occupancy type from Nonresidential Appendix 5.4A"  
  HELP
    ""  
  REFERENCE 
    NACM Section 2.3.3
    NACM Section 5.4.1
    Appendix 5.4A
  INPUTCLASS
    Compulsory
// OPTION list defined in BEMEnums.txt to facilitate Building:FuncClassMthd & CompleteBldgFunc dependencies
  DEFAULT
    if( CondgType = "Plenum" )
    then "Unoccupied-Exclude from Gross Floor Area"
    else if( LocalCompAssigned( SpcFuncDefaultsRef ) )
    then SpcFuncDefaultsRef:SpcFunc
    else UNDEFINED
    endif endif
  CHECKCODE : T24N_2013
    if( LocalStatus( SpcFunc ) = 0 .OR. SpcFunc = "- specify -"  )
    then
      PostError("Space Function not defined for Spc: %s. Space Function
                 is a required input", Name)   
    else if( SpcFunc = "Transportation Function, Concourse & Baggage" .OR.
             SpcFunc = "Transportation Function, Ticketing" )
    then 
      PostError("For Spc: '%s', the space function '%s' is not valid for 
                 2013 Title-24 Part-6 compliance.  Please select a valid space
                 function.", Name, SpcFunc) 
    else UNCHANGED
    endif endif
  CHECKCODE : T24N_2016
    if( LocalStatus( SpcFunc ) = 0 .OR. SpcFunc = "- specify -"  )
    then
      PostError("Space Function not defined for Spc: %s. Space Function
                 is a required input", Name)   
    else if( SpcFunc = "Transportation Function" )
    then 
      PostError("For Spc: '%s', the space function '%s' is not valid for 
                 2013 Title-24 Part-6 compliance.  Please select a valid space
                 function.", Name, SpcFunc) 
    else UNCHANGED
    endif endif
  CHECKCODE : S901G
    if( LocalStatus( SpcFunc ) = 0 .OR. SpcFunc = "- specify -"  )
    then
      PostError("Space Function not defined for Spc: %s. Space Function
                 is a required input", Name)   
    else UNCHANGED
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE Spc:SpcFuncIdx
  RULESETS
    T24N
  DESCRIPTION
    "A Unique Index Associated with each space function, primarily for reporting
     purposes."  
  INPUTCLASS
    NotInput
  DEFAULT
    if( Bldg:FuncClassMthd == "CompleteBuildingMethod" )
    then UNDEFINED   ; Complete Building Method Not Currently Defined
    else
    if( LocalStatus( "SpcFunc" ) > 0 )
    then SpaceFunctionData:SpcFuncIdx( "FuncType",Spc:SpcFunc )
    else UNDEFINED
    endif endif
  SIZING
    u:SpcFuncIdx
  ANNUAL
    z:SpcFuncIdx
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:HasNoInternalLds
  DATATYPE
    Integer
  LONGFORM
    HasNoInternalLoads
  DESCRIPTION
    "A flag that indicates whether the space has no internal loads/schedules for
     reference in other rules. 1 indicates there should not be internal loads, 
     0 indicates the space can have internal loads."
  INPUTCLASS
    NotInput
  DEFAULT : S901G ECBC
    if( LocalStatus(SpcFunc) = 0 )
    then 0
    else 
    if( SpcFunc = "Unoccupied-Include in Gross Floor Area" .OR.
        SpcFunc = "Unoccupied-Exclude from Gross Floor Area" .OR.
	SpcFunc = "Attic or Crawlspace (Naturally or Mechanically Ventilated)" .OR.
	SpcFunc = "Attic or Crawlspace (Not Ventilated)" .OR.
        SpcFunc = "- specify -" .OR.
        CondgType = "Plenum" )
    then 1
    else 0
    endif endif
  DEFAULT
    if( LocalStatus(SpcFunc) = 0 )
    then 0
    else 
    if( SpcFunc = "Unoccupied-Include in Gross Floor Area" .OR.
        SpcFunc = "Unoccupied-Exclude from Gross Floor Area" .OR.
        SpcFunc = "- specify -" .OR.
        CondgType = "Plenum" )
    then 1
    else 0
    endif endif
ENDRULE


// ********** Occupancy Classification *****************************************
RULE Spc:OccClass
  DESCRIPTION
    "The occupancy classification of the space." 
  INPUTCLASS
    Prescribed
  OPTION
    Nonresidential
    Residential
  DEFAULT : T24N
    if( SpcFunc = "High-Rise Residential Living Spaces" .OR.
        SpcFunc = "Hotel/Motel Guest Room" )
    then "Residential"
    else "Nonresidential"
    endif
  DEFAULT : S901G ECBC
    if( SpcFunc = "Courthouse/Police Station/Penitentiary - Confinement Cells" .OR.
        SpcFunc = "Dormitory - Living Quarters" .OR.
        SpcFunc = "Fire Stations - Sleeping Quarters" .OR.
        SpcFunc = "Hospital - Nursery" .OR.
        SpcFunc = "Hospital - Patient Room" .OR.
        SpcFunc = "Hotel/Highway Lodging - Hotel Guest Rooms" .OR.
        SpcFunc = "Hotel/Highway Lodging - Highway Lodging Guest Rooms" .OR.
        SpcFunc = "Multifamily - Dwelling/Sleeping Units" )
    then "Residential"
    else "Nonresidential"
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:IsRes
  DATATYPE
    Integer
  LONGFORM
    IsResidential
  DESCRIPTION
    "An integer that indicates if the space is residential." 
  INPUTCLASS
    NotInput
  DEFAULT
    if( OccClass = "Residential" )
    then 1
    else 0
    endif
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Spc:IsNonRes
  DATATYPE
    Integer
  LONGFORM
    IsNonresidential
  DESCRIPTION
    "An integer that indicates if the space is nonresidential (1)." 
  INPUTCLASS
    NotInput
  DEFAULT
    if( OccClass = "Nonresidential" )
    then 1
    else 0
    endif
ENDRULE


// ********** Space Envelope Status ********************************************
RULE Spc:EnvStatus
  DESCRIPTION
    "Specifies the Status of the envelope surfaces in a space for Additions, 
    Alterations and Partial Compliance."
  HELP
    "Used to set default values for surface status.  Status of surfaces is 
     always new for some compliance type options and always existing for others.
     Only for ExistingAlterations or ExistingAdditionAndAlteration is user input
     of EnvStatus utilized."
  INPUTCLASS
    Default
  OPTION
    New
    Altered
    Existing
  DEFAULT
    if( Proj:IsNewEnv .OR. Proj:IsAdd )
    then "New"
    else "Existing"
    endif
  CHECKCODE
    if( Proj:IsNewEnv .AND. EnvStatus != "New" ) then
      PostWarning("Space '%s' has an EnvelopeStatus of '%s', but Compliance Type is '%s'.
                   The status of the space will be changed to 'New' for compliance
                   analysis.", Name, EnvStatus, Proj:CompType)
    else if( Proj:IsExistingEnv .AND. EnvStatus != "Existing" ) then
      PostWarning("Space '%s' has an EnvelopeStatus of '%s', but Compliance Type is '%s'.
                   The status of the space will be changed to 'Existing' for compliance
                   analysis.", Name, EnvStatus, Proj:CompType)
		else UNCHANGED
    endif endif
  SIZING
    if( Proj:IsNewEnv ) then
      "New"
    else if( Proj:IsExistingEnv ) then
      "Existing"
    else u:EnvStatus
    endif endif
  ANNUAL
    z:EnvStatus
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:IsExistingEnv
  DATATYPE
    Integer
  LONGFORM
    IsExistingEnvelope
  INPUTCLASS
    NotInput
  DEFAULT
    if( Proj:IsNewEnv ) then 0
    else if( Proj:IsExistingEnv ) then 1
    else if( EnvStatus = "Existing" ) then 1
    else 0
    endif endif endif
  SIZING
    if( Proj:IsNewEnv ) then 0
    else if( Proj:IsExistingEnv ) then 1
    else if( EnvStatus = "Existing" ) then 1
    else 0
    endif endif endif
  ANNUAL
    z:IsExistingEnv
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:IsAlteredEnv
  DATATYPE
    Integer
  LONGFORM
    IsAlteredEnvelope
  INPUTCLASS
    NotInput
  DEFAULT
    if( Proj:IsNewEnv ) then 0
    else if( Proj:IsExistingEnv ) then 1
    else if( EnvStatus = "Altered" ) then 1
    else 0
    endif endif endif
  SIZING
    if( Proj:IsNewEnv ) then 0
    else if( Proj:IsExistingEnv ) then 1
    else if( EnvStatus = "Altered" ) then 1
    else 0
    endif endif endif
  ANNUAL
    z:IsExistingEnv
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:IsNewEnv
  DATATYPE
    Integer
  LONGFORM
    IsNewEnvelope
  INPUTCLASS
    NotInput
  DEFAULT
    if( Proj:IsNewEnv ) then 1
    else if( Proj:IsExistingEnv ) then 0
    else if( EnvStatus = "New" ) then 1
    else if( ( IsExistingEnv + IsAlteredEnv ) = 0 ) then 1
    else 0
    endif endif endif endif
  SIZING
    if( Proj:IsNewEnv ) then 1
    else if( Proj:IsExistingEnv ) then 0
    else if( EnvStatus = "New" ) then 1
    else if( ( IsExistingEnv + IsAlteredEnv ) = 0 ) then 1
    else 0
    endif endif endif endif
  ANNUAL
    z:IsNewEnv
ENDRULE


// ********** Demising Surface Areas *******************************************
// The following rules are used to determine which occupancy class category
// demising surfaces (interior (Int) surfaces that separate conditioned from 
// unconditioned space) should be placed in for determining baseline envelope 
// requirements.

// These rules should be included AFTER the <SurfaceObject>:DemSurf and 
// Spc:OccClass rules, but before OpaqueEnvelope and other rules.


//  For Demising surfaces that are children of RESIDENTIAL spaces 
RULE NEW IntFlr:ResDemArea
  DATATYPE
    Float
  LONGFORM
    ResidentialDemisingArea
  DESCRIPTION
    "The area of an interior floor that is both a demising surface and the child 
     of a residential space."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2
  DEFAULT   
    if( DemSurf > 0 )
    then
      if( Spc:IsRes )
      then Area
      else if( LocalCompAssigned( AdjacentSpcRef ) ) 
      then
        if( AdjacentSpcRef:IsRes )
        then Area
        else 0
        endif
      else 0
      endif endif
    else 0
    endif
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW IntWall:ResDemArea
  DATATYPE
    Float
  LONGFORM
    ResidentialDemisingArea
  DESCRIPTION
    "The area of an interior wall that is both a demising surface and the child 
     of a residential space."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2            
  DEFAULT   
    if( DemSurf > 0 )
    then
      if( Spc:IsRes )
      then Area
      else if( LocalCompAssigned( AdjacentSpcRef ) ) 
      then
        if( AdjacentSpcRef:IsRes )
        then Area
        else 0
        endif
      else 0
      endif endif
    else 0
    endif
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Ceiling:ResDemArea
  DATATYPE
    Float
  LONGFORM
    ResidentialDemisingArea
  DESCRIPTION
    "The area of an interior ceiling that is both a demising surface and the child 
     of a residential space."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2            
  DEFAULT   
    if( DemSurf > 0 )
      then
      if( Spc:IsRes )
      then Area
      else if( LocalCompAssigned( AdjacentSpcRef ) )
        then
        if( AdjacentSpcRef:IsRes )
        then Area
        else 0
        endif
      else 0
      endif endif
    else 0
    endif
ENDRULE

//  For NON Demising surfaces that are children of RESIDENTIAL spaces 
// -----------------------------------------------------------------------------
RULE NEW IntFlr:ResNonDemArea
  DATATYPE
    Float
  LONGFORM
    ResidentialNonDemisingArea
  DESCRIPTION
    "The area of an interior floor that is not a demising surface and is the 
     child of a residential space."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2
  DEFAULT   
    if( DemSurf = 0 )
    then
      if( Spc:IsRes )
      then Area
      else if( LocalCompAssigned( AdjacentSpcRef ) )
      then
        if( AdjacentSpcRef:IsRes )
        then Area
        else 0
        endif
      else 0
      endif endif
    else 0
    endif
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW IntWall:ResNonDemArea
  DATATYPE
    Float
  LONGFORM
    ResidentialNonDemisingArea
  DESCRIPTION
    "The area of an interior wall that is not a demising surface and is the 
     child of a residential space."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2            
  DEFAULT   
    if( DemSurf = 0 )
    then
      if( Spc:IsRes )
      then Area
      else if( LocalCompAssigned( AdjacentSpcRef ) )
      then
        if( AdjacentSpcRef:IsRes )
        then Area
        else 0
        endif
      else 0
      endif endif
    else 0
    endif
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Ceiling:ResNonDemArea
  DATATYPE
    Float
  LONGFORM
    ResidentialNonDemisingArea
  DESCRIPTION
     "The area of an interior ceiling that is not a demising surface and is the 
     child of a residential space."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2            
  DEFAULT   
    if( DemSurf = 0 )
    then
      if( Spc:IsRes )
      then Area
      else if( LocalCompAssigned( AdjacentSpcRef ) )
      then
        if( AdjacentSpcRef:IsRes )
        then Area
        else 0
        endif
      else 0
      endif endif
    else 0
    endif
ENDRULE

// For Demising surfaces that are children of NONRESIDENTIAL spaces
// -----------------------------------------------------------------------------
RULE NEW IntFlr:NonResDemArea
  DATATYPE
    Float
  LONGFORM
    NonresidentialDemisingArea
  DESCRIPTION
    "The area of an interior floor that is both a demising surface and the child 
     of a Nonresidential space."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2            
  DEFAULT
    if( DemSurf > 0 )
    then
      if( Spc:IsNonRes )
      then Area
      else if( LocalCompAssigned( AdjacentSpcRef ) )
      then
        if( AdjacentSpcRef:IsNonRes )
        then Area
        else 0
        endif
      else 0
      endif endif
    else 0
    endif
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW IntWall:NonResDemArea
  DATATYPE
    Float
  LONGFORM
    NonresidentialDemisingArea
  DESCRIPTION
    "The area of an interior wall that is both a demising surface and the child 
     of a Nonresidential space."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2            
  DEFAULT
    if( DemSurf > 0 )
    then
      if( Spc:IsNonRes )
      then Area
      else if( LocalCompAssigned( AdjacentSpcRef ) )
      then
        if( AdjacentSpcRef:IsNonRes )
        then Area
        else 0
        endif
      else 0
      endif endif
    else 0
    endif
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Ceiling:NonResDemArea
  DATATYPE
    Float
  LONGFORM
    NonresidentialDemisingArea
  DESCRIPTION
    "The area of an interior ceiling that is both a demising surface and the child 
     of a Nonresidential space."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2            
  DEFAULT
    if( DemSurf > 0 )
    then
      if( Spc:IsNonRes )
      then Area
      else if( LocalCompAssigned( AdjacentSpcRef ) )
      then
        if( AdjacentSpcRef:IsNonRes )
        then Area
        else 0
        endif
      else 0
      endif endif
    else 0
    endif
ENDRULE

// For NON Demising surfaces that are children of NONRESIDENTIAL spaces
// -----------------------------------------------------------------------------
RULE NEW IntFlr:NonResNonDemArea
  DATATYPE
    Float
  LONGFORM
    NonresidentialNonDemisingArea
  DESCRIPTION
    "The area of an interior floor that is not a demising surface and is the 
     child of a Nonresidential space."
  INPUTCLASS
    NotInput
  UNITS
    ft2
  DEFAULT
    if( DemSurf <= 0 )
    then
      if( Spc:IsNonRes )
      then Area
      else if( LocalCompAssigned( AdjacentSpcRef ) )
      then
        if( AdjacentSpcRef:IsNonRes )
        then Area
        else 0
        endif
      else 0
      endif endif
    else 0
    endif
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW IntWall:NonResNonDemArea
  DATATYPE
    Float
  LONGFORM
    NonresidentialNonDemisingArea
  DESCRIPTION
    "The area of an interior wall that is not a demising surface and is the 
     child of a Nonresidential space."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2            
  DEFAULT
    if( DemSurf <= 0 )
    then
      if( Spc:IsNonRes )
      then Area
      else if( LocalCompAssigned( AdjacentSpcRef ) )
      then
        if( AdjacentSpcRef:IsNonRes )
        then Area
        else 0
        endif
      else 0
      endif endif
    else 0
    endif
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Ceiling:NonResNonDemArea
  DATATYPE
    Float
  LONGFORM
    NonresidentialNonDemisingArea
  DESCRIPTION
    "The area of an interior ceiling that is not a demising surface and is the 
     child of a Nonresidential space."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2            
  DEFAULT
    if( DemSurf <= 0 )
    then
      if( Spc:IsNonRes )
      then Area
      else if( LocalCompAssigned( AdjacentSpcRef ) )
      then
        if( AdjacentSpcRef:IsNonRes )
        then Area
        else 0
        endif
      else 0
      endif endif
    else 0
    endif
ENDRULE

// The following rules sum up the demising area for each surface type by the 
// adjacent occupancy.
// For RESIDENTIAL category
// -----------------------------------------------------------------------------
RULE NEW Spc:DemResIntFlrArea
  DATATYPE
    Float
  LONGFORM
    DemisingResidentialInteriorFloorArea
  DESCRIPTION
    "The area of demising interior floors that are adjacent to residential spaces."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2       
  DEFAULT  
    // Sum local child surfaces first, then add children of other spaces that 
    // reference the local space (remote surfaces)    
    SumChildren( IntFlr:ResDemArea ) + 
    SumRevRef( IntFlr:AdjacentSpcRef,  IntFlr:ResDemArea )
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Spc:DemResIntWallArea
  DATATYPE
    Float
  LONGFORM
    DemisingResidentialInteriorFloorArea
  DESCRIPTION
    "The area of demising interior walls that are adjacent to residential spaces."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2       
  DEFAULT  
    // Sum local child surfaces first, then add children of other spaces that 
    // reference the local space (remote surfaces)    
    SumChildren( IntWall:ResDemArea ) + 
    SumRevRef( IntWall:AdjacentSpcRef ,  IntWall:ResDemArea )
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Spc:DemResCeilingArea
  DATATYPE
    Float
  LONGFORM
    DemisingResidentialCeilingArea
  DESCRIPTION
    "The area of demising ceilings that are adjacent to residential spaces."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2       
  DEFAULT  
    // Sum local child surfaces first, then add children of other spaces that 
    // reference the local space (remote surfaces)    
    SumChildren( Ceiling:ResDemArea ) + 
    SumRevRef( Ceiling:AdjacentSpcRef,  Ceiling:ResDemArea )
ENDRULE
// For NONRESIDENTIAL category
// -----------------------------------------------------------------------------
RULE NEW Spc:DemNonResIntFlrArea
  DATATYPE
    Float
  LONGFORM
    DemisingNonresidentialInteriorFloorArea
  DESCRIPTION
    "The area of demising interior floors that are adjacent to Nonresidential spaces."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2       
  DEFAULT  
    // Sum local child surfaces first, then add children of other spaces that 
    // reference the local space (remote surfaces)    
    SumChildren( IntFlr:NonResDemArea ) + 
    SumRevRef( IntFlr:AdjacentSpcRef,  IntFlr:NonResDemArea )
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Spc:DemNonResIntWallArea
  DATATYPE
    Float
  LONGFORM
    DemisingNonresidentialInteriorFloorArea
  DESCRIPTION
    "The area of demising interior walls that are adjacent to Nonresidential spaces."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2       
  DEFAULT  
    // Sum local child surfaces first, then add children of other spaces that 
    // reference the local space (remote surfaces)    
    SumChildren( IntWall:NonResDemArea ) + 
    SumRevRef( IntWall:AdjacentSpcRef,  IntWall:NonResDemArea )
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Spc:DemNonResCeilingArea
  DATATYPE
    Float
  LONGFORM
    DemisingNonresidentialCeilingArea
  DESCRIPTION
    "The area of demising ceilings that are adjacent to Nonresidential spaces."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2       
  DEFAULT  
    // Sum local child surfaces first, then add children of other spaces that 
    // reference the local space (remote surfaces)    
    SumChildren( Ceiling:NonResDemArea ) + 
    SumRevRef( Ceiling:AdjacentSpcRef,  Ceiling:NonResDemArea )
ENDRULE

// The following rules sum up the NON demising area for each surface type by the 
// adjacent occupancy.
// For RESIDENTIAL category
// -----------------------------------------------------------------------------
RULE NEW Spc:NonDemResIntFlrArea
  DATATYPE
    Float
  LONGFORM
    NonDemisingResidentialInteriorFloorArea
  DESCRIPTION
    "The area of NON demising interior floors that are adjacent to residential spaces."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2       
  DEFAULT  
    // Sum local child surfaces first, then add children of other spaces that 
    // reference the local space (remote surfaces)    
    SumChildren( IntFlr:ResNonDemArea ) + 
    SumRevRef( IntFlr:AdjacentSpcRef,  IntFlr:ResNonDemArea )
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Spc:NonDemResIntWallArea
  DATATYPE
    Float
  LONGFORM
    NonDemisingResidentialInteriorFloorArea
  DESCRIPTION
    "The area of Non demising interior walls that are adjacent to residential spaces."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2       
  DEFAULT  
    // Sum local child surfaces first, then add children of other spaces that 
    // reference the local space (remote surfaces)    
    SumChildren( IntWall:ResNonDemArea ) + 
    SumRevRef( IntWall:AdjacentSpcRef,  IntWall:ResNonDemArea )
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Spc:NonDemResCeilingArea
  DATATYPE
    Float
  LONGFORM
    NonDemisingResidentialCeilingArea
  DESCRIPTION
    "The area of Non demising ceilings that are adjacent to residential spaces."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2       
  DEFAULT  
    // Sum local child surfaces first, then add children of other spaces that 
    // reference the local space (remote surfaces)    
    SumChildren( Ceiling:ResNonDemArea ) + 
    SumRevRef( Ceiling:AdjacentSpcRef,  Ceiling:ResNonDemArea )
ENDRULE
// For NONRESIDENTIAL category
// -----------------------------------------------------------------------------
RULE NEW Spc:NonDemNonResIntFlrArea
  DATATYPE
    Float
  LONGFORM
    NonDemisingNonresidentialInteriorFloorArea
  DESCRIPTION
    "The area of Non demising interior floors that are adjacent to Nonresidential spaces."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2       
  DEFAULT  
    // Sum local child surfaces first, then add children of other spaces that 
    // reference the local space (remote surfaces)    
    SumChildren( IntFlr:NonResNonDemArea ) + 
    SumRevRef( IntFlr:AdjacentSpcRef,  IntFlr:NonResNonDemArea )
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Spc:NonDemNonResIntWallArea
  DATATYPE
    Float
  LONGFORM
    NonDemisingNonresidentialInteriorFloorArea
  DESCRIPTION
    "The area of Non demising interior walls that are adjacent to Nonresidential spaces."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2       
  DEFAULT  
    // Sum local child surfaces first, then add children of other spaces that 
    // reference the local space (remote surfaces)    
    SumChildren( IntWall:NonResNonDemArea ) + 
    SumRevRef( IntWall:AdjacentSpcRef,  IntWall:NonResNonDemArea )
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Spc:NonDemNonResCeilingArea
  DATATYPE
    Float
  LONGFORM
    NonDemisingNonresidentialCeilingArea
  DESCRIPTION
    "The area of Non demising ceilings that are adjacent to Nonresidential spaces."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2       
  DEFAULT  
    // Sum local child surfaces first, then add children of other spaces that 
    // reference the local space (remote surfaces)    
    SumChildren( Ceiling:NonResNonDemArea ) + 
    SumRevRef( Ceiling:AdjacentSpcRef,  Ceiling:NonResNonDemArea )
ENDRULE

// SUM connected RES and NONRES demising surfaces at the space level at the space level
// -----------------------------------------------------------------------------
RULE NEW Spc:DemResSurfArea
  DATATYPE
    Float
  LONGFORM
    DemisingResidentialSurfaceArea
  DESCRIPTION
    "The area of demising surfaces that are adjacent to Residential spaces."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2 
  DEFAULT
    DemResIntFlrArea + DemResIntWallArea + DemResCeilingArea
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Spc:DemNonResSurfArea
  DATATYPE
    Float
  LONGFORM
    DemisingNonResidentialSurfaceArea
  DESCRIPTION
    "The area of demising surfaces that are adjacent to Nonresidential spaces."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2 
  DEFAULT
    DemNonResIntFlrArea + DemNonResIntWallArea + DemNonResCeilingArea
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Spc:NonDemResSurfArea
  DATATYPE
    Float
  LONGFORM
    NonDemisingResidentialSurfaceArea
  DESCRIPTION
    "The area of Non demising surfaces that are adjacent to Residential spaces."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2 
  DEFAULT
    NonDemResIntFlrArea + NonDemResIntWallArea + NonDemResCeilingArea
ENDRULE
// -----------------------------------------------------------------------------
RULE NEW Spc:NonDemNonResSurfArea
  DATATYPE
    Float
  LONGFORM
    NonDemisingNonResidentialSurfaceArea
  DESCRIPTION
    "The area of Non demising surfaces that are adjacent to Nonresidential spaces."
  INPUTCLASS
    NotInput   
  UNITS 
    ft2 
  DEFAULT
    NonDemNonResIntFlrArea + NonDemNonResIntWallArea + NonDemNonResCeilingArea
ENDRULE


// ------------ Update 'Unoccupied' space occupancy classification -------------
// This rule updates the occupancy classification of Unoccupied spaces to reflect
// the predominant occupancy classification of adjacent spaces.
RULE Spc:OccClass
  DEFAULT
    if( SpcFunc = "Unoccupied-Include in Gross Floor Area" .OR.
        SpcFunc = "Unoccupied-Exclude from Gross Floor Area")
    then 
       if( (DemResSurfArea + NonDemResSurfArea ) > 
          (DemNonResSurfArea + NonDemNonResSurfArea))
       then "Residential"
       else "Nonresidential"
       endif
    else UNCHANGED
    endif
ENDRULE


// ------------ Calculate the number of adjacent interior surfaces -------------
// IntWalls
RULE NEW Spc:NumAdjacentIntWall
  DATATYPE
    Integer
  LONGFORM
    NumberAdjacentInteriorWalls
  DESCRIPTION
    "The number of interior walls that are not children of the space, but are children of
     other spaces that are adjacent to the local space."
  INPUTCLASS
    NotInput   
  DEFAULT
    CountRefs( IntWall:AdjacentSpcRef )
ENDRULE
// IntFlrs
// -----------------------------------------------------------------------------
RULE NEW Spc:NumAdjacentIntFloor
  DATATYPE
    Integer
  LONGFORM
    NumberAdjacentInteriorFloors
  DESCRIPTION
    "The number of interior floors that are not children of the space, but are children of
     other spaces that are adjacent to the local space."
  INPUTCLASS
    NotInput   
  DEFAULT
    CountRefs( IntFlr:AdjacentSpcRef )
ENDRULE
// Ceilings
// -----------------------------------------------------------------------------
RULE NEW Spc:NumAdjacentCeiling
  DATATYPE
    Integer
  LONGFORM
    NumberAdjacentCeilings
  DESCRIPTION
    "The number of (interior) ceilings that are not children of the space, but are children of
     other spaces that are adjacent to the local space."
  INPUTCLASS
    NotInput   
  DEFAULT
    CountRefs( Ceiling:AdjacentSpcRef )
ENDRULE


// ------------ Story multiplier ---------------------------  
// Moved from Building-General to set Spc:Mult before being referenced below in this file
RULE Story:Mult
  DESCRIPTION
    "Story multiplier"  
  HELP
    "This property is user specified for quickly multiplying the spaces and 
     related thermal zones on each building floors.

     The following SDD modeling rules for Multipliers must be followed: 
     - All spaces that are combined into a thermal zone must have the same Multiplier
     - Spaces that are combined into a thermal zone cannot span multiple stories
     - All ThermalZones that are served by the same HVAC system must have the same Multiplier"  
  REFERENCE 
    NACM Section 2.3.1
    NACM Section 5.3
  INPUTCLASS
    Default
  MINIMUM 
    1
  REPORTPRECISION
    0
  DEFAULT 
    1
  SIZING
    u:Mult
  ANNUAL
    z:Mult
ENDRULE
; Update space multiplier
// -----------------------------------------------------------------------------
RULE Spc:Mult
  DESCRIPTION
    "Space multiplier"  
  INPUTCLASS
    NotInput
  REPORTPRECISION
    0
  DEFAULT 
    Story:Mult
ENDRULE


// ********** Space geometry rules ********************************************
// ---------- Flr Z ------------------------------------------------------------
RULE Spc:FlrZ
  DESCRIPTION
    "Height above site ground level (negative for below grade spaces)"  
  HELP
    ""  
  INPUTCLASS
    Optional 
  REPORTPRECISION
    1
  DEFAULT
    if( ParentStatus( Z ) > 0 )
    then
      if( CondgType .NE. "Plenum" )
      then Story:Z
      else if( ParentStatus( FlrToCeilingHgt ) > 0 )
      then Story:Z + Story:FlrToCeilingHgt
			else UNDEFINED
      endif endif
    else SumChildren( PolyLp:ZBottom, 1 )
    endif
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 )
    then
      if( LocalStatus(  FlrZ ) < 1 )
      then POSTERROR("Space '%s' must have a valid FlrZ (height above site ground level) (whenever GeometryInpType = 'Simplified').",Name)
      else UNCHANGED
      endif
	  else UNCHANGED
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:MaxZ
  DATATYPE
    Float
  LONGFORM
    MaximumZ
  DESCRIPTION
    "The average Z-coordinate of the highest roof or ceiling surface, or 
     the maximum Z-coordinate value of child walls."  
  HELP
    ""  
  INPUTCLASS
    NotInput 
  REPORTPRECISION
    1
  DEFAULT
    if( Proj:IsDetailedGeometry = 1 ) 
    then
      if( IfValidAnd( MaxChild( Roof:MaxZ) > 0 ) )
      then ( MaxChild( Roof:MaxZ) + MaxChild( Roof:MinZ) ) / 2
      else if( IfValidAnd( MaxChild( ExtWall:MaxZ) > 0 ) )
      then MaxChild( ExtWall:MaxZ)
      else if( IfValidAnd( MaxChild( IntWall:MaxZ) > 0 ) )
      then MaxChild( IntWall:MaxZ)
      else if( IfValidAnd( MaxChild( UndgrWall:MaxZ) > 0 ) )
      then MaxChild( UndgrWall:MaxZ)
      else 10
      endif endif endif endif
    else ValidOr( FlrZ, 0 ) + ValidOr( FlrToCeilingHgt, 0 )
    endif
ENDRULE

// ---------- Calculate/Populate Space:Area from Polyloop data if available-
RULE Spc:Area
  DESCRIPTION
    "The floor area of any geometric space, including plenums, attics and 
     other non-occupiable spaces." 
  MINIMUM 
    1
  INPUTCLASS
    Compulsory
  REPORTPRECISION
    0
  DEFAULT 
    if( Proj:IsDetailedGeometry )
    then  if( ChildCount(PolyLp) < 1 )
       then 0 
          else SumChildren( PolyLp:Area, 1 ) 
          endif
    else  UNCHANGED  
    endif
  CHECKSIM
    if( Proj:IsDetailedGeometry )
    then  if( ChildCount(PolyLp) < 1 )
       then POSTERROR("Space '%s' has no Polyloop defined.  A polyloop is required for this object.",Name)
          else UNCHANGED
          endif
    else  UNCHANGED
    endif
ENDRULE

// ---------- Calculate/Populate Space:FlrArea from Polyloop data if available--
//                  or from Spc:Area for Simple Geometry
RULE Spc:FlrArea
  DESCRIPTION
    "The floor area of a space that is not a plenum or attic." 
  HELP
    ""  
  REFERENCE 
    
  INPUTCLASS
    NotInput  IgnoreUserInput  "Spc:FlrArea no longer an allowed input as of version 2016.1.0 / 2013 v3d"
  REPORTPRECISION
    0
  DEFAULT 
    if( SpcFunc .NE. "Unoccupied-Exclude from Gross Floor Area" )
    then ValidOr( Area, 0 )
    else 0
    endif
ENDRULE

// ------------ Calculate floor area/volumes with multiplier -------------------
RULE NEW Spc:FlrAreaWithMult
  DATATYPE
    Float
  LONGFORM
    FloorAreaWithMuliplier
  DESCRIPTION
    "The multiplied floor area of a space that is not a plenum or attic." 
  INPUTCLASS
    NotInput
  MINIMUM 
    0
  UNITS 
    ft2  
  DEFAULT 
    if( SpcFunc .NE. "Unoccupied-Exclude from Gross Floor Area" )
      then FlrArea * Mult
    else 0
    endif
ENDRULE

// ---------- Space Flr to Ceiling Hgt -----------------------------------------
RULE Spc:FlrToCeilingHgt
  DESCRIPTION
    "The measurement of height from the top surface of the floor to the bottom 
     surface of the ceiling in an enclosed space.  For spaces with sloped ceilings
     or floors, this is the nominal height, calculated from the space volume and 
     floor area." 
  HELP
    "For 'Simplified' goeometry models, this is defaulted based on the BuildingStory
     input.

     For 'Detailed' geometry models, the value defined by the space volume / area,
     or if volume is not defined, from maximum Z-coordinate of the child PolyLoops
     surfaces, or a default of 10 feet is assumed."
  INPUTCLASS
    Default
  MINIMUM 
    0
  UNITS 
    ft  
  REPORTPRECISION
    1
  DEFAULT
    if( Proj:IsDetailedGeometry = 1 )
    then // Is detailed geometry model
      if( IfValidAnd( Area > 0 ) .AND. LocalStatus( Vol ) > 4 )
      then // Calculate from user-defined volume and space area
        Vol / Area	
      else if( LocalStatus( MaxZ ) > 0 .AND. LocalStatus( FlrZ ) > 0 )
      then
        MaxZ - FlrZ
      else 10
      endif endif
    else // Is simplified geometry model
    if( IfValidAnd( Story:FlrToCeilingHgt > 0 ) )
    then
      if( CondgType .NE. "Plenum" )
      then Story:FlrToCeilingHgt
      else if(IfValidAnd( Story:FlrToFlrHgt > Story:FlrToCeilingHgt ) )
      then Story:FlrToFlrHgt - Story:FlrToCeilingHgt
      else UNDEFINED  
      endif endif
    else UNCHANGED
    endif endif
// SAC 6/5/15 - removed since the root cause would be reported based on Story inputs
//  CHECKSIM
//    if( Proj:IsDetailedGeometry = 0 )
//    then
//      if( LocalStatus( FlrToCeilingHgt ) < 1 )
//      then
//        PostError( "Space '%s' must have a valid floor-to-ceiling height 
//                   (FlrToCeilingHgt) (whenever GeometryInpType = 'Simplified').", Name )
//			else if( FlrToCeilingHgt <= 0 )
//      then
//        PostError( "Space '%s' floor-to-ceiling height (FlrToCeilingHgt) must be
//                   > 0 (whenever GeometryInpType = 'Simplified').", Name )
//      else UNCHANGED
//      endif endif
//	  else UNCHANGED
//	  endif
ENDRULE

// ---------- Volume -----------------------------------------------------------
RULE Spc:Vol
  DESCRIPTION
    "The volume of the space."
  HELP
    "For 'Simplified' goeometry models, this is calculated from the space
     space area and user-defined floor-to-ceiling height.

     For 'Detailed' geometry models, the value defined in the input file is shown
     in the UI, but for simulation, this value is determined automatically by the
     simulation engine.  If not defined in the input file, the volume will be 
     defaulted floor area and floor-to-ceiling height, if these can be calculated."
  INPUTCLASS
    Required
  REPORTPRECISION
    0
  DEFAULT
    if( IfValidAnd( Area >= 0 ) .AND. IfValidAnd( FlrToCeilingHgt >= 0 ) )
    then Area * FlrToCeilingHgt
    else UNCHANGED
    endif
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 )
    then
      if( IfValidAnd( Vol <= 0 ) )
      then
        PostError( "Space '%s' must have a non-zero volume.  Check inputs for 
                   floor area, floor-to-floor height, and floor-to-ceiling
                   height.", Name )
      else UNCHANGED
      endif
    else UNCHANGED
    endif
  SIZING
    if( Proj:IsDetailedGeometry = 0  )
    then Area * FlrToCeilingHgt
    else UNCHANGED
    endif
  ANNUAL
    z:Vol
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:VolWithMult
  DATATYPE
    Float
  LONGFORM
    VolumeWithMuliplier
  DESCRIPTION
    "The directly or indirectly conditioned volume of a space." 
  INPUTCLASS
    NotInput
  MINIMUM 
    0
  UNITS 
    ft2  
  CHECKSIM
    if ( IfValidAnd( Vol > 0 ) ) then
      UNCHANGED
    else
      PostError("Space '%s' must have a non-zero volume", Name)
    endif
  DEFAULT 
    if( IfValidAnd( Vol > 0 )  ) then
      Vol * Mult
    else 0
    endif
  SIZING
    Vol * Mult
  ANNUAL
    u:VolWithMult
ENDRULE

// ------------ Identify conditioned space floor area --------------------------
RULE NEW Spc:CondFlrArea
  DATATYPE
    Float
  LONGFORM
    ConditionedFloorArea
  DESCRIPTION
    "The directly or indirectly conditioned floor area of a space." 
  INPUTCLASS
    NotInput
  MINIMUM 
    0
  UNITS 
    ft2  
  DEFAULT 
    if( CondgType = "DirectlyConditioned" .OR.
        CondgType = "IndirectlyConditioned" )
    then FlrArea
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE Spc:CondFlrAreaWithMult
  DESCRIPTION
    "The directly or indirectly conditioned floor area of a space, 
     with multiplier." 
  INPUTCLASS
    NotInput
  MINIMUM 
    0
  UNITS 
    ft2  
  REPORTPRECISION
    0
  DEFAULT 
    CondFlrArea * Mult
ENDRULE

// ------------ Identify floor area by OccClass -------------------------------

RULE NEW Spc:IsHighRiseRes
  DATATYPE
    Integer
  LONGFORM
    IsHighRiseResidential
  DESCRIPTION
    "Whether the space is a high-rise residential living unit." 
  INPUTCLASS
    NotInput
  DEFAULT 
    if( SpcFunc = "High-Rise Residential Living Spaces" )
    then 1
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:IsHotelMotelGuestRm
  DATATYPE
    Integer
  LONGFORM
    IsHotelMotelGuestRoom
  DESCRIPTION
    "Whether the space is a hotel/motel guest room." 
  INPUTCLASS
    NotInput
  DEFAULT 
    if( SpcFunc = "Hotel/Motel Guest Room" )
    then 1
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE Spc:ResLivingUnitCnt
  DESCRIPTION
    "This is the number of high-rise residential living units in the space,
     based on what is entered in the Dwelling Unit Data tab."
  INPUTCLASS
    NotInput
  DEFAULT
    if( IsHighRiseRes )
    then     
      ValidOr(DwellingUnitTypeCnt[1],0) + 
      ValidOr(DwellingUnitTypeCnt[2],0) + 
      ValidOr(DwellingUnitTypeCnt[3],0) +
      ValidOr(DwellingUnitTypeCnt[4],0) +
      ValidOr(DwellingUnitTypeCnt[5],0) +
      ValidOr(DwellingUnitTypeCnt[6],0)
    else UNDEFINED
    endif
  CHECKCODE
    if( SpcFunc = "High-Rise Residential Living Spaces" .AND.
        IfValidAnd( ResLivingUnitCnt > 0 )==0 )
    then 
      PostError("There are no dwelling units defined for space '%s'.  Enter the number 
                 and size of the units in the Dwelling Unit Data tab.", Name)
    else UNCHANGED
    endif
SIZING
  u:ResLivingUnitCnt 
ANNUAL
  z:ResLivingUnitCnt
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:ResLivingUnitCntWithMult
  LONGFORM
    ResidentialLivingUnitCountWithMultiplier
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DESCRIPTION
    "This is the number of residential living or hotel/motel units in a modeled
     space times with space multiplier."
  DEFAULT
    if( IsHighRiseRes )
    then ResLivingUnitCnt * Mult
    else UNDEFINED
    endif
  SIZING
    u:ResLivingUnitCntWithMult
  ANNUAL
    z:ResLivingUnitCntWithMult
ENDRULE

// -----------------------------------------------------------------------------
RULE Spc:HotelMotelGuestRmCnt
  DESCRIPTION
    "This is the number of hotel/motel units in a modeled
     space."
  INPUTCLASS
    CondRequired
  DEFAULT
    if( IsHotelMotelGuestRoom )
    then 1		// would prefer default of 0 here, but that would cause change in analysis for past models
    else UNDEFINED
    endif
  CHECKCODE
    if( IsHotelMotelGuestRm .AND. IfValidAnd( HotelMotelGuestRmCnt > 0 ) = 0 )
    then 
      PostError("The number of guest rooms for space '%s' must be greater than 
                 zero. Enter the number of guest rooms.", Name)
    else UNCHANGED
    endif
  SIZING
    u:HotelMotelGuestRmCnt 
  ANNUAL
    z:HotelMotelGuestRmCnt
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:HotelMotelGuestRmCntWithMult
  LONGFORM
    HotelMotelGuestRoomCountWithMultiplier
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DESCRIPTION
    "This is the number of hotel/motel units in a modeled
     space including the space multiplier."
  DEFAULT
    if( IsHotelMotelGuestRm )
    then HotelMotelGuestRmCnt * Mult
    else 0 
    endif
  SIZING
    u:HotelMotelGuestRmCntWithMult
  ANNUAL
    z:HotelMotelGuestRmCntWithMult
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:HotelMotelGuestRmAveArea
  LONGFORM
    HotelMotelGuestRoomAverageArea
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DESCRIPTION
    "This is the average floor area of the hotel/motel units
     included in the modeled space."
  UNITS
    ft2
  DEFAULT
    if( IsHotelMotelGuestRm .AND. IfValidAnd( HotelMotelGuestRmCnt > 0 ) )
    then FlrArea / HotelMotelGuestRmCnt
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:ResCondFlrArea
  DATATYPE
    Float
  LONGFORM
    ResidentialConditionedFloorArea
  DESCRIPTION
    "The residential conditioned floor area of a space.  This includes High Rise
     Residential and Hotel / Motel." 
  INPUTCLASS
    NotInput
  MINIMUM 
    0
  UNITS 
    ft2  
  DEFAULT 
    if( IsRes )
    then CondFlrArea
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:ResCondFlrAreaWithMult
  DATATYPE
    Float
  LONGFORM
    ResidentialConditionedFloorAreaWithMultiplier
  DESCRIPTION
    "The residential conditioned floor area of a space,
     with multiplier." 
  INPUTCLASS
    NotInput
  MINIMUM 
    0
  UNITS 
    ft2  
  DEFAULT 
    ResCondFlrArea * Mult
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:HighRiseResCondFlrArea
  DATATYPE
    Float
  LONGFORM
    HighRiseResidentialConditionedFloorArea
  DESCRIPTION
    "The high rise residential conditioned floor area of a space.  This is High Rise
     Residential only."
  INPUTCLASS
    Optional
  MINIMUM 
    0
  UNITS 
    ft2  
  DEFAULT 
    if( IsHighRiseRes = 1 )
    then CondFlrArea
    else 0
    endif
  SIZING
    u:HighRiseResCondFlrArea
  ANNUAL
    z:HighRiseResCondFlrArea
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:HighRiseResCondFlrAreaWithMult
  DATATYPE
    Float
  LONGFORM
    HighRiseResidentialConditionedFloorAreaWithMultiplier
  DESCRIPTION
    "The high rise residential conditioned floor area of a space,
     with multiplier." 
  INPUTCLASS
    NotInput
  MINIMUM 
    0
  UNITS 
    ft2  
  DEFAULT 
    HighRiseResCondFlrArea * Mult
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:HotelMotelGuestRmCondFlrArea
  DATATYPE
    Float
  LONGFORM
    HotelMotelGuestRoomConditionedFloorArea
  DESCRIPTION
    "The hotel-model guest room conditioned floor area of a space.  This is High Rise
     Residential only."
  INPUTCLASS
    Optional
  MINIMUM 
    0
  UNITS 
    ft2  
  DEFAULT 
    if( IsHotelMotelGuestRm = 1 )
    then CondFlrArea
    else 0
    endif
  SIZING
    u:HotelMotelGuestRmCondFlrArea
  ANNUAL
    z:HotelMotelGuestRmCondFlrArea
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:HotelMotelGuestRmCondFlrAreaWithMult
  DATATYPE
    Float
  LONGFORM
    HotelMotelGuestRoomConditionedFloorAreaWithMultiplier
  DESCRIPTION
    "The hotel-model guest room conditioned floor area of a space,
     with multiplier." 
  INPUTCLASS
    NotInput
  MINIMUM 
    0
  UNITS 
    ft2  
  DEFAULT 
    HotelMotelGuestRmCondFlrArea * Mult
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:NonResCondFlrArea
  DATATYPE
    Float
  LONGFORM
    NonresidentialConditionedFloorArea
  DESCRIPTION
    "The nonresidential conditioned floor area of a space." 
  INPUTCLASS
    NotInput
  MINIMUM 
    0
  UNITS 
    ft2  
  DEFAULT 
    if( IsNonRes )
    then CondFlrArea
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:NonResCondFlrAreaWithMult
  DATATYPE
    Float
  LONGFORM
    NonresidentialConditionedFloorAreaWithMultiplier
  DESCRIPTION
    "The nonresidential conditioned floor area of a space,
     with multiplier." 
  INPUTCLASS
    NotInput
  MINIMUM 
    0
  UNITS 
    ft2  
  DEFAULT 
    NonResCondFlrArea * Mult
ENDRULE


// ------------ Identify floor area by CondgTypes ------------------------------
RULE NEW Spc:DirectCondArea
  DATATYPE
    Float
  LONGFORM
    DirectConditionedArea
  DESCRIPTION
    "The area of a space if CondgType = 'DirectlyConditioned'." 
  INPUTCLASS
    NotInput
  MINIMUM 
    0
  UNITS 
    ft2  
  DEFAULT 
    if( CondgType = "DirectlyConditioned" )
    then Area
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:IndirectCondArea
  DATATYPE
    Float
  LONGFORM
    IndirectConditionedArea
  DESCRIPTION
    "The area of a space if CondgType = 'IndirectlyConditioned'." 
  INPUTCLASS
    NotInput
  MINIMUM 
    0
  UNITS 
    ft2  
  DEFAULT 
    if( CondgType = "IndirectlyConditioned" )
    then Area
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:UncondArea
  DATATYPE
    Float
  LONGFORM
    UnconditionedArea
  DESCRIPTION
    "The area of a space if CondgType = 'Unconditioned'." 
  INPUTCLASS
    NotInput
  MINIMUM 
    0
  UNITS 
    ft2  
  DEFAULT 
    if( CondgType = "Unconditioned" )
    then Area
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:PlenumArea
  DATATYPE
    Float
  LONGFORM
    PlenumArea
  DESCRIPTION
    "The area of a space if CondgType = 'Plenum'" 
  INPUTCLASS
    NotInput
  MINIMUM 
    0
  UNITS 
    ft2  
  DEFAULT 
    if( CondgType = "Plenum" )
    then Area
    else 0
    endif
ENDRULE


// ------------ Identify 'Unoccupied' space area -------------------------------
RULE NEW Spc:UnoccupiedArea
  DATATYPE
    Float
  LONGFORM
    UnoccupiedArea
  DESCRIPTION
    "The area of a space that is classified as 'Unoccupied'." 
  INPUTCLASS
    NotInput
  MINIMUM 
    0
  UNITS 
    ft2  
  DEFAULT 
    if( SpcFunc = "Unoccupied-Include in Gross Floor Area" .OR.
        SpcFunc = "Unoccupied-Exclude from Gross Floor Area" )
    then Area
    else 0
    endif
ENDRULE

// ------------ Identify conditioned space volume area -------------------------
RULE NEW Spc:CondVolWithMult
  DATATYPE
    Float
  LONGFORM
    ConditionedVolumeWithMultiplier
  DESCRIPTION
    "The directly or indirectly conditioned volume of a space." 
  INPUTCLASS
    NotInput
  MINIMUM 
    0
  UNITS 
    ft2  
  DEFAULT 
    if( CondgType = "DirectlyConditioned" .OR.
        CondgType = "IndirectlyConditioned" )
    then VolWithMult
    else 0
    endif
ENDRULE

// ------------  Identify exterior surface area of each space ------------------
RULE NEW Spc:IsExtSpc
  DATATYPE
    Integer
  LONGFORM
    IsExteriorSpace
  INPUTCLASS 
    NotInput 
  DEFAULT
    if( SumChildren( ExtWall:WinArea) > 0  )
    then 1
    else 0
    endif
ENDRULE

// ---------- Calculate perimeter of each Space --------------------------------
; SAC 6/5/15 - Spc:ExtWallLen & Spc:IntWallLen no longer used - replaced w/ PolyLp:Perim
; RULE NEW Spc:ExtWallLen
;   DATATYPE
;     Float
;   LONGFORM
;     ExteriorWallLength
;   INPUTCLASS 
;     Prescribed  
;   DEFAULT
;     SumChildren( ExtWall:Len )
; ENDRULE
; 
; RULE NEW Spc:IntWallLen
;   DATATYPE
;     Float
;   LONGFORM
;     InteriorWallLength
;   INPUTCLASS 
;     Prescribed  
;   DEFAULT
;     SumChildren( IntWall:Len ) + 
;     SumRevRef( IntWall:AdjacentSpcRef, IntWall:Len )
; ENDRULE

// -----------------------------------------------------------------------------
RULE Spc:Perim
  DESCRIPTION
    "The perimeter of a space."
  HELP
    "For models using the simplified geometry method, perimeter is a required 
     user input if tailored method lighting inputs are used.  Otherwise it may
     be left unspecified." 
  INPUTCLASS
    Optional
  REPORTPRECISION
    0
  DEFAULT
    if( Proj:IsDetailedGeometry )
    then  if( ChildCount(PolyLp) < 1 )
      then 0 
      else SumChildren( PolyLp:Perim, 1 )   ; was: ExtWallLen + IntWallLen
      endif
    else UNCHANGED
    endif
  SIZING
    u:Perim
  ANNUAL
    z:Perim
ENDRULE

// ---------- Calculate exterior perimeter of each Space -----------------------
RULE NEW Spc:ExtPerim
  DATATYPE
    Float
  LONGFORM
    ExteriorPerimeter
  INPUTCLASS 
    Prescribed  
  DEFAULT
    SumChildren( ExtWall:Len )
ENDRULE


// QC rules for space 
// -----------------------------------------------------------------------------
RULE Spc:ThrmlZnRef
  DESCRIPTION
    "The thermal zone that a space is assigned."
  INPUTCLASS 
    Required
  CHECKSIM
    if( LocalCompAssigned(ThrmlZnRef) = 0 )
    then PostError("Space '%s' must be assigned to a thermal zone.", Name)
    else UNCHANGED
    endif
ENDRULE
// The name reference of the space's parent 
// -----------------------------------------------------------------------------
RULE NEW Spc:ParentStoryRef
  DATATYPE
    Story
  LONGFORM
    ParentStoryReference
  DESCRIPTION
    "The name of the parent BuildingStory object."
  INPUTCLASS 
    NotInput
  DEFAULT
    Parent( Name )
ENDRULE



// ------------ setup description for display in component tree ----------------------
RULE NEW Spc:TreeDescrip
  DATATYPE
    String
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( Area > 0 )  )
    then Format( "%s, %s ft2 -> Zn: %s", CondgType, FltToStr( Area ), ThrmlZnRef )
    else Format( "%s -> Zn: %s", CondgType, ThrmlZnRef )
    endif
ENDRULE


// ---------- Maximum Heating Setpoint Value Assigned to Space --------------
RULE NEW Spc:HtgTstatSchMaxVal
  DATATYPE
    Float
  LONGFORM
    HeatingThermostatScheduleReferenceMaximumValue
  DESCRIPTION
    "This is the maximum value of the heating thermostat schedule assigned to the space."
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ValidOr( ThrmlZnRef:HtgTstatSchMaxVal, 70)
    else 70
    endif
  SIZING
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ValidOr( ThrmlZnRef:HtgTstatSchMaxVal, 70)
    else 70
    endif
  ANNUAL
    z:HtgTstatSchMaxVal
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:ClgTstatSchMinVal
  DATATYPE
    Float
  LONGFORM
    CoolingThermostatScheduleReferenceMinimumValue
  DESCRIPTION
    "This is the minimum value of the cooling thermostat schedule assigned to the space."
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ValidOr( ThrmlZnRef:HtgTstatSchMaxVal, 75)
    else 75
    endif
  SIZING
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ValidOr( ThrmlZnRef:HtgTstatSchMaxVal, 75)
    else 75
    endif
  ANNUAL
    z:ClgTstatSchMinVal
ENDRULE


// ---------- Boolean for S901G_2010 Semiheated or not --------------
RULE NEW Spc:Semiheated
  RULESETS
    S901G ECBC
  DATATYPE
    Integer
  DESCRIPTION
    "This is the boolean value if a space is Semiheated or not, based on
     the maximum heating setpoint value."
  HELP
    ""
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ThrmlZnRef ) )
    then 
      if( ThrmlZnRef:Type = "Conditioned" .AND.
          IfValidAnd( HtgTstatSchMaxVal < 60 ) .AND. 
          IfValidAnd( NotEnclosed = 0 ) )
      then 1
      else 0
      endif
    else UNDEFINED
    endif
  SIZING
    u:Semiheated
  ANNUAL
    z:Semiheated
ENDRULE


// ---------- Heating Fuel Source --------------
// Thermal Zone
RULE NEW ThrmlZn:HtgFuelSrc
  DATATYPE
    Integer
  LONGFORM
    HeatingFuelSource
  DESCRIPTION
    "A flag that indcates the heating fuel source of the ThrmlZn."
  HELP
    "The flag values are:
    -1 = Unconditioned, or no heating
     0 = Electic or other
     1 = Fossil fuel or fossil/electric"
  INPUTCLASS
    NotInput
  DEFAULT
    if( Type = "Conditioned" )
    then 
      if( LocalCompAssigned( PriAirCondgSysRef ) .AND.
          LocalCompAssigned( VentSysRef ) )
      then  Max( ValidOr( PriAirCondgSysRef:HtgFuelSrc, 0 ), 
                 ValidOr( VentSysRef:HtgFuelSrc, 0 ) )
      else if( LocalCompAssigned( PriAirCondgSysRef ) )
      then ValidOr( PriAirCondgSysRef:HtgFuelSrc, 0 )
      else 0
      endif endif
    else -1
    endif
ENDRULE
// Space
// -----------------------------------------------------------------------------
RULE NEW Spc:HtgFuelSrc
  DATATYPE
    Integer
  LONGFORM
    HeatingFuelSource
  DESCRIPTION
    "A flag that indcates the heating fuel source of the Space."
  HELP
    "The flag values are:
    -1 = Unconditioned, or no heating
     0 = Electic or other
     1 = Fossil fuel or fossil/electric"
  INPUTCLASS
    NotInput
  DEFAULT
    if( LocalCompAssigned( ThrmlZnRef ) )
    then ThrmlZnRef:HtgFuelSrc
    else -1
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:IsSemiheatedArea
  RULESETS
    S901G ECBC
  DATATYPE
    Float
  LONGFORM
    IsSemiheatedArea
  INPUTCLASS
    NotInput
  DEFAULT
    if( (Spc:CondgType != "Plenum") .AND.
        (Spc:Semiheated = 1 .OR.
         Spc:CondgType = "Unconditioned") )
    then Spc:Area
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:IsCondArea
  RULESETS
    S901G ECBC
  DATATYPE
    Float
  LONGFORM
    IsConditionedArea
  INPUTCLASS
    NotInput
  DEFAULT
    if( Spc:CondgType != "Plenum" .AND.
        Spc:Semiheated != 1 .AND.
        Spc:CondgType != "Unconditioned" )
    then Spc:Area
    else 0
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:IsSemiheatedPlenum
  RULESETS
    S901G ECBC
  DATATYPE
    Integer
  LONGFORM
    IsSemiheatedPlenum
  INPUTCLASS
    NotInput
  DEFAULT
    if( CondgType = "Plenum" )
    then
      if( (SumRevRef( Spc:SupPlenumSpcRef, Spc:IsSemiheatedArea ) >
           SumRevRef( Spc:SupPlenumSpcRef, Spc:IsCondArea )) .OR.
          (SumRevRef( Spc:RetPlenumSpcRef, Spc:IsSemiheatedArea ) >
           SumRevRef( Spc:RetPlenumSpcRef, Spc:IsCondArea )))
      then 1
      else 0
      endif
    else 0
    endif
ENDRULE

// ********** Space 'Enclosed' Status ******************************************
// This rule developed by DR, has been superceded by rule below 
// RULE Spc:EnclosedSpc
//   RULESETS
//     S901G ECBC
//   DESCRIPTION
//     "A flag that indicates whether the space is 'Enclosed' for determining
//      baseline envelope and system requirements." 
//   HELP
//     "Enclosed space is defined as a volume substantially surrounded by solid
//      surfaces such as walls, floors, roof, and openable devises such as doors
//      and operable windows."
//   INPUTCLASS
//     NotInput
//   DEFAULT 
//     if( LocalCompAssigned( ThrmlZnRef ) )
//     then
//       if( ThrmlZnRef:VentSrc = "Forced" .OR. ThrmlZnRef:VentSrc = "Natural" )
// // TO DO: Review if we want to enforce number of surface criteria for this as well
// ;         .AND.
// ;         ( ( ChildCount( IntWall ) + NumAdjacentIntWall
// ;              ChildCount( ExtWall ) + 
// ;              ChildCount ( UndgrWall ) ) 
// ;            +
// ;            ( ChildCount( ExtFlr ) + NumAdjacentIntFloor )
// ;            +
// ;            ( ChildCount( Roof ) + NumAdjacentCeiling )
// ;          ) > 4 )
// ;       // Assume each space has at least 1 floor and 3 walls.  
// ;       // Roof/Ceiling is optional since it may be a multiplied story
//       then 1
//       else 0
//       endif
//     else -1
//     endif
// ENDRULE


// -----------------------------------------------------------------------------
RULE NEW Spc:NotEnclosed
  RULESETS
    S901G ECBC
  DATATYPE
    Integer
  LONGFORM
    NotEnclosed
  DESCRIPTION
    "This is the boolean value if a space is Not Enclosed, based on
     the Space Function."
  HELP
    ""
  INPUTCLASS
    NotInput
  DEFAULT
    if( SpcFunc = "Attic or Crawlspace (Naturally or Mechanically Ventilated)" .OR.
        SpcFunc = "Parking Garage - Garage Area" )
    then 1
    else 0
    endif
  SIZING
    u:NotEnclosed
  ANNUAL
    z:NotEnclosed
ENDRULE


// -----------------------------------------------------------------------------
RULE Spc:ClgUMLHLimit
  DESCRIPTION
    "The limit on Unmet Load Hours in cooling for the space, 
     based on the Space Function."
  HELP
    ""
  INPUTCLASS
    NotInput
  DEFAULT : T24N
    if( IfValidAnd( SpcFunc != "- specify -" ) )
    then SpaceFunctionData:ClgUMLHLimit("FuncType",SpcFunc)
    else 0
    endif
  DEFAULT : S901G ECBC
    UNDEFINED
  ANNUAL
    u:ClgUMLHLimit
ENDRULE


// -----------------------------------------------------------------------------
RULE Spc:HtgUMLHLimit
  DESCRIPTION
    "The limit on Unmet Load Hours in heating for the space, 
     based on the Space Function."
  HELP
    ""
  INPUTCLASS
    NotInput
  DEFAULT : T24N
    if( IfValidAnd( SpcFunc != "- specify -" ) )
    then SpaceFunctionData:HtgUMLHLimit("FuncType",SpcFunc)
    else 0
    endif
  DEFAULT : S901G ECBC
    UNDEFINED
  ANNUAL
    u:HtgUMLHLimit
ENDRULE


// ********** Space type is Mall or Atrium Check ********************************
RULE Spc:IsAtriumGT55Ft
  RULESETS
    T24N
  DESCRIPTION
    "A flag to indicate that the space is an Atrium > 55 ft tall"
  HELP
    "User Editable if SpcFunc = 'Malls and Atria'.  Defaults to false (0), 
     unless SpcFunc = 'Malls and Atria AND FlrToCeilingHt > 55."
  INPUTCLASS 
    Default          ; An Optional or Required property that is set to a default value by BEMEnums or DEFAULT rule.
                     ; The user may override the default value.
                     ; The property will be included in the SDD Input Data Model.txt file.
  DEFAULT 
    if( SpcFunc = "Malls and Atria" .AND. FlrToCeilingHgt > 55 )
    then 1
    else 0
    endif  
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Spc:AtriumGT55FtFlag
  DATATYPE
    Integer
  LONGFORM
    AtriumGreaterThan55FeetFlag
  DESCRIPTION
    "A flag that indicates whether the user input of IsAtriumGT55ft is valid."  
  INPUTCLASS
    NotInput
  DEFAULT
    if( IsAtriumGT55ft .AND. 
        IfValidAnd( SpcFunc = "Malls and Atria" ) )
    then 1
    else 0
    endif
  CHECKCODE
    if( IsAtriumGT55ft .AND. 
        AtriumGT55FtFlag = 0 )
    then PostWarning( "Space '%s' is identified as being an Atrium over 55 ft high,
                       however the specified Space Function is set to '%s'.  User
                       input for 'IsAtriumGT55ft' will be ignored.", 
                       Name, SpcFunc )
    else UNCHANGED
    endif
ENDRULE

// -----------------------------------------------------------------------------
RULE NEW Bldg:HasAtriumGT55Ft
  DATATYPE
    Integer
  LONGFORM
    HasAtriumGreaterThan55Feet
  DESCRIPTION
    "A flag that indicates if any space in the builidng is identified as an 
     Atrium over 55 ft tall."  
  INPUTCLASS
    NotInput
  DEFAULT
    SumChildren( Spc:AtriumGT55FtFlag ) 
ENDRULE
