// Space Use - Occupants
//
// -------------------------------------------------------------------------
//  Copyright (c) 2012, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------
//  
//
// According to 5.4.2 ACM Draft April 24 2012, items:  
//     Number of Occupants
//     Occupant Heat Rate
//     Occupant Schedule
//
// External References:
//     NACMSpaceTypeData table defined in file 'App5-4A_SpaceUseData.csv'
// 
// The main objects in the SDD are:
//     Project:Building:BuildingStory:Space
//     SpaceFunctionDefaults



// -------------- Minimum # Occupants / Density -------------------------------
// Minimum for egress/DCV design purposes
RULE NEW Spc:MinOccNum
  DATATYPE
    Float
  LONGFORM
    MinimumOccupancyNumber
  DESCRIPTION
    "The minimum number of occupants in the Space for egress/DCV design purposes."
  INPUTCLASS
    NotInput
  UNITS 
    people
  DEFAULT 
    if( HasNoInternalLds )
    then 0 // Is Unoccupied, Attic/Crawlspace, or Plenum space
    else if( IsHighRiseRes )
    then // Is high-rise res or hotel/motel
      2 * ValidOr( DwellingUnitTypeCnt[1], 0 ) +
      2 * ValidOr( DwellingUnitTypeCnt[2], 0 ) +
      3 * ValidOr( DwellingUnitTypeCnt[3], 0 ) +
      4 * ValidOr( DwellingUnitTypeCnt[4], 0 ) +
      5 * ValidOr( DwellingUnitTypeCnt[5], 0 ) +
      6 * ValidOr( DwellingUnitTypeCnt[6], 0 )  
    else if( IfValidAnd( FxdSeat > 0 ) .AND. SpcFunc != "Unleased Tenant Area" )
    then // Fixed seating can be used
      ValidOr( OccNumFxdSeat, 0 )
    else if( LocalStatus( SpcFunc ) > 0 .AND. IfValidAnd( Area > 0 ) )
    then // Calculated using OccDens
      SpaceFunctionData:OccDens("FuncType", SpcFunc) * Area / 1000
    else 0
    endif endif endif endif
ENDRULE
RULE NEW Spc:MinOccDens
  DATATYPE
    Float
  LONGFORM
    MinimumOccupantDensity
  DESCRIPTION
    "The minimum density of occupants in the Space for egress/DCV design purposes."
  INPUTCLASS
    NotInput
  UNITS 
    people/1000ft2
  DEFAULT
    if( IfValidAnd( Area > 0 ) )
    then MinOccNum / Area * 1000
    else 0
    endif
ENDRULE
RULE NEW ThrmlZn:MinOccDens
  DATATYPE
    Float
  LONGFORM
    MinimumOccupancyDensity
  DESCRIPTION
    "The minimum number of occupants in the ThermalZone for egress/DCV
     design purposes."
  INPUTCLASS
    NotInput
  UNITS 
    people/1000ft2
  DEFAULT
    if( IfValidAnd( FlrArea > 0 ) )
    then SumRevRef( Spc:ThrmlZnRef, Spc:MinOccNum ) / FlrArea * 1000
    else 0
    endif
ENDRULE
// For simulation
RULE NEW Spc:MinOccNumSim
  DATATYPE
    Float
  LONGFORM
    MinimumOccupantNumberSimulated
  DESCRIPTION
    "The minimum number of people of a Space for simulation."
  INPUTCLASS
    NotInput
  UNITS 
    people
  DEFAULT : T24N
    if( HasNoInternalLds )
    then 0 // Is Unoccupied, Attic/Crawlspace, or Plenum space
    else if( IsHighRiseRes )
    then MinOccNum
    else if( IfValidAnd( FxdSeat > 0 ) .AND. SpcFunc != "Unleased Tenant Area" )
    then MinOccNum
    else MinOccNum * 0.5 // 50% of egress density
    endif endif endif
  DEFAULT : S901G ECBC
    MinOccNum * 0.5
ENDRULE
RULE NEW Spc:MinOccDensSim
  DATATYPE
    Float
  LONGFORM
    MinimumOccupantDensitySimulated
  DESCRIPTION
    "The minimum density of people of a Space for simulation."
  INPUTCLASS
    NotInput
  UNITS 
    people/1000ft2
  DEFAULT
    if( IfValidAnd( Area > 0 ) )
    then MinOccNumSim / Area * 1000
    else 0
    endif
ENDRULE


// -------------- Occupancy Fraction ------------------------------------------
RULE Spc:OccFrac
  DESCRIPTION
    "The expected fraction of the exiting density of people in a Space, based 
     on SpaceFunction, which will determine the design occupancy."  
  INPUTCLASS
    Default
  MINIMUM
    0.5
  COMMONMAXIMUM
    1.0
  MAXIMUM
    5.0
  DEFAULT : T24N 
    if( HasNoInternalLds )
    then UNDEFINED
    else if( LocalCompAssigned( SpcFuncDefaultsRef ) .AND. LocalStatus( SpcFunc ) < 5 ) 
    then SpcFuncDefaultsRef:OccFrac
    else Proj:OccFrac
    endif endif
ENDRULE


// -------------- Fixed Seating ------------------------------------------
RULE Spc:FxdSeat
  DESCRIPTION
    "A flag that indicates that the space has fixed seating and the space 
     occupancy will be entered as a number of occupants."
  INPUTCLASS
    Default
  DEFAULT
    0
  SIZING 
    if( HasNoInternalLds .OR. 
        IsRes .OR. 
        SpcFunc = "Unleased Tenant Area" )
    then 0
    else u:FxdSeat
    endif
  ANNUAL
    z:FxdSeat
ENDRULE
RULE Spc:OccNumFxdSeat
  DESCRIPTION
    "A number of occupants in the space for simulation and ventilation calculations
     if FixedSeating is selected and is a valid choice."
  INPUTCLASS
    Default
  UNITS
    people
  DEFAULT
    0
  CHECKCODE
    if( OccNumFxdSeat > 0 .AND. FxdSeat > 0 .AND.
        ( HasNoInternalLds .OR. 
          IsRes .OR. 
          SpcFunc = "Unleased Tenant Area" ) )
   then
     PostWarning("For Space %s, OccupantNumberFixedSeating is not valid. This
                  input will be ignored, and default occupancy will be used.",
                  Name)
    else UNCHANGED
    endif
  SIZING
    if( FxdSeat =  0 )
    then 0 
    else u:OccNumFxdSeat
    endif
  ANNUAL
    z:OccNumFxdSeat
ENDRULE
RULE NEW Spc:OccFracFxdSeat
  DATATYPE
   Float
 LONGFORM
   OccupancyFractionFixedSeating
  DESCRIPTION
    "The occupancy fraction back calculated from the Number of Occupants input used  
     for space with fixed seating."  
  INPUTCLASS
    NotInput
//DEFAULT : T24N 
//  if( HasNoInternalLds .OR. 
//      IsRes .OR. 
//      SpcFunc = "Unleased Tenant Area" .OR.
//      FxdSeat = 0 )
//  then UNDEFINED
//  else
//    ValidOr( OccNumSim, 0 ) * 1000 / ValidOr( Area, 1 ) / ValidOr( OccDens, 1 )
//  endif
ENDRULE


// -------------- # Occupants / Density ---------------------------------------
// Occupant number / density 
RULE NEW Spc:OccNum
  DATATYPE
    Float
  LONGFORM
    OccupancyNumber
  DESCRIPTION
    "The number of occupants in the Space for egress/DCV design purposes."
  INPUTCLASS
    NotInput
  UNITS 
    people
  REPORTPRECISION
    0
  DEFAULT
    if( IfValidAnd( Area > 0 ) )
    then MinOccDens * Area / 1000
    else 0
    endif
ENDRULE
RULE Spc:OccDens
  DESCRIPTION
    "The density of occupants in the Space for egress/DCV design purposes."  
  REFERENCE 
    NACM 5.4.3 Occupants
    NACM Appendix 5.4A
  INPUTCLASS : T24N
    NotInput  IgnoreUserInput  "Spc:OccDens no longer an allowed input as of version 2016.1.0 / 2013 v3d"
  INPUTCLASS : S901G ECBC
    Default
  MINIMUM 
    0
  COMMONMINIMUM
    1
  COMMONMAXIMUM
    70
  MAXIMUM 
    200
  UNITS 
    people/1000ft2
  DEFAULT : T24N
    if( IfValidAnd( Area > 0 ) )
    then OccNum / Area * 1000
    else 0
    endif
  DEFAULT : S901G ECBC
    if( HasNoInternalLds )
    then UNDEFINED
    else if( LocalCompAssigned( SpcFuncDefaultsRef ) .AND. LocalStatus( SpcFunc ) < 5 ) 
    then SpcFuncDefaultsRef:OccDens
    else MinOccDens
    endif endif
// Property is NotInput, CHECK no longer needed
//CHECKCODE : T24N
//  if( IfValidAnd( OccDens < MinOccDens - 0.01 ) )
//  then 
//    PostError("The specified OccupantDensity of Space '%s' is %.2f people/1000ft2,
//               which is less than the default value of %.2f people/1000ft2 used
//               for compliance analysis. Restore the default value for this
//               property, or change to match or exceed the minimum.", 
//               Name, OccDens, MinOccDens)
//  else if( IfValidAnd( OccDens > MinOccDens + 0.01 ) )
//  then 
//    PostWarning("The specified OccupantDensity of Space '%s' is %.2f people/1000ft2,
//               which is greater than the default value of %.2f people/1000ft2 used
//               for compliance analysis. The specified value will be used for
//               compliance analysis.", 
//               Name, OccDens, MinOccDens)
//  else UNCHANGED
//  endif endif
  SIZING_PROPOSED : T24N
    u:OccDens
  SIZING_PROPOSED : S901G ECBC
    if( HasNoInternalLds .OR. 
        IfValidAnd( OccDens > 0 ) = 0 )
    then UNDEFINED
    else u:OccDens
    endif
  SIZING_BASELINE
    zp:OccDens
  ANNUAL
    z:OccDens
ENDRULE
// For simulation
RULE Spc:OccNumSim
  DESCRIPTION
    "The number of people in a space for simulation and ventilation calculations."  
  INPUTCLASS
    NotInput  IgnoreUserInput  "Removed in transition from 2013 version 3d to 3e and 2016.1 to .2"
  DEFAULT 
    if( HasNoInternalLds )
    then 0 // Is Unoccupied, Attic/Crawlspace, or Plenum space
    else if( IsHighRiseRes )
    then // Is high-rise res or hotel/motel
      MinOccNum
    else if( FxdSeat > 0 .AND. SpcFunc != "Unleased Tenant Area" )
    then // Fixed seating can be used
      OccNumFxdSeat
    else // Calculated using OccDensSim
      OccDens * ValidOr( OccFrac, 0 ) * ValidOr( Area, 0 ) / 1000
    endif endif endif
  SIZING
    u:OccNumSim
  ANNUAL
    z:OccNumSim
ENDRULE
RULE Spc:OccDensSim
  DESCRIPTION
    "The density of people of in a space for simulation and ventilation calculations." 
  HELP
    ""  
  REFERENCE 
    NACM 5.4.3 Occupants
    NACM Appendix 5.4A
  INPUTCLASS
    NotInput
  UNITS 
    people/1000ft2
  DEFAULT : T24N
    if( HasNoInternalLds )
    then UNDEFINED
    else if( IfValidAnd( Area > 0 ) )
    then OccNumSim / Area * 1000
    else 0
    endif endif
  DEFAULT : S901G ECBC
    if( HasNoInternalLds )
    then UNDEFINED
    else if( LocalCompAssigned( SpcFuncDefaultsRef ) .AND. 
             LocalStatus( SpcFunc ) < 5 )
    then
      SpcFuncDefaultsRef:OccDens
    else OccDens
    endif endif
// See below for SIZING/ANNUAL rule
ENDRULE


// -----------------------------------------------------------------------------
RULE NEW ThrmlZn:OccDens
  DATATYPE
    Float
  LONGFORM
    OccupantDensity
  DESCRIPTION
    "The density of occupants in the ThermalZone for egress/DCV 
     design purposes."
  INPUTCLASS
    NotInput
  UNITS 
    people/1000ft2
  REPORTPRECISION
    0
  DEFAULT
    if( IfValidAnd( FlrArea > 0 ) = 0 ) 
    then 0
    else SumRevRef( Spc:ThrmlZnRef, Spc:OccNum ) / FlrArea * 1000
    endif
  SIZING
    if( IfValidAnd( FlrArea > 0 ) = 0 ) 
    then 0
    else SumRevRef( Spc:ThrmlZnRef, Spc:OccNum ) / FlrArea * 1000
    endif
  ANNUAL
    z:OccDens
ENDRULE
RULE ThrmlZn:OccNumSim
  DESCRIPTION
    "The minimum number of people of in a ThermalZone for simulation."
  INPUTCLASS
    NotInput
  UNITS 
    people
  REPORTPRECISION
    0
  DEFAULT
    SumRevRef( Spc:ThrmlZnRef, Spc:OccNumSim )
  SIZING
    SumRevRef( Spc:ThrmlZnRef, Spc:OccNumSim )
  ANNUAL
    z:OccNumSim
ENDRULE
RULE NEW ThrmlZn:OccDensSim
  DATATYPE
    Float
  LONGFORM
    OccupancyDensity
  DESCRIPTION
    "The density of people in the ThermalZone at design occupancy."
  INPUTCLASS
    NotInput
  UNITS 
    people/1000ft2
  DEFAULT
    if( IfValidAnd( FlrArea > 0 ) = 0 ) 
    then 0
    else OccNumSim / FlrArea * 1000
    endif
  SIZING
    if( FlrArea = 0 ) 
    then 0
    else OccNumSim / FlrArea * 1000
    endif
  ANNUAL
    z:OccDensSim
ENDRULE


// ---------- Number of Occupants with Multiplier --------------
RULE NEW Spc:OccNumSimWithMult
  DATATYPE
    Float
  LONGFORM
    OccupancyNumberSimulatedWithMultiplier
  DESCRIPTION
    "The simulated number of people in the Space, including BuildingStory multiplier."
  INPUTCLASS
    NotInput
  UNITS 
    people
  DEFAULT 
    OccNumSim * Mult
  SIZING
    OccNumSim * Mult
ENDRULE
RULE NEW Story:OccNumSimWithMult
  DATATYPE
    Float
  LONGFORM
    OccupancyNumberSimulatedWithMultiplier
  DESCRIPTION
    "The simulated number of people on the BuildingStory, including multiplier."
  INPUTCLASS
    NotInput
  UNITS 
    people
  DEFAULT 
    SumChildren( Spc:OccNumSimWithMult )
ENDRULE


// -------------- Occupancy Schedule --------------------
RULE Spc:OccSchRef
  DESCRIPTION
    "Reference to a schedule that describes the fraction of occupancy on an 
     hourly basis."  
  HELP
    ""  
  REFERENCE 
    ACM-5.4.3 Occupants
  INPUTCLASS : T24N
    Prescribed
  INPUTCLASS : S901G ECBC
    Default
  DEFAULT
    if( HasNoInternalLds .OR.
        LocalStatus(OccDens) = 0 )
    then UNDEFINED
    else if( LocalCompAssigned(SpcFuncDefaultsRef) .AND. LocalStatus(SpcFunc)<5) 
    then SpcFuncDefaultsRef:OccSchRef
    else UNDEFINED
    endif endif
  SIZING_PROPOSED : S901G ECBC
    if( HasNoInternalLds .OR.
        LocalStatus(OccDens) = 0 )
    then UNDEFINED
    else if( (u:OccSchRef = "- none -" .OR.
              LocalCompAssigned(u:OccSchRef) = 0) .AND.
	      IfValidAnd(u:OccDens > 0) )
    then RuleLibrary(Schedule,(SpaceFunctionGroups:OccSchRef("FuncGroup",FuncSchGrp)))
    else if( u:OccSchRef != "- none -" .AND.
	      IfValidAnd(u:OccDens > 0) )
    then u:OccSchRef
    else UNDEFINED
    endif endif endif
  SIZING_PROPOSED
    if( HasNoInternalLds .OR.
        LocalStatus(OccDens) = 0 )
    then UNDEFINED
    else RuleLibrary(Schedule,(SpaceFunctionGroups:OccSchRef("FuncGroup",FuncSchGrp)))
    endif
  SIZING_BASELINE
    zp:OccSchRef  
  ANNUAL
    z:OccSchRef
ENDRULE
  

// -------------- Occupant Heat Rates --------------------
RULE Spc:OccSensHtRt
  DESCRIPTION
    "The rate of sensible heat released per person which is a function of activity"  
  HELP
    ""  
  REFERENCE 
    ACM-5.4.3 Occupants
  INPUTCLASS : T24N
    Prescribed
  INPUTCLASS : S901G ECBC
    Default
  MINIMUM 
    0
  COMMONMINIMUM
    100
  COMMONMAXIMUM
    1000
  MAXIMUM 
    2000
  UNITS 
    Btu/hr-person
  DEFAULT
    if( HasNoInternalLds .OR.
        LocalStatus(OccDens) = 0 )
    then UNDEFINED
    else if( LocalCompAssigned(SpcFuncDefaultsRef) .AND. LocalStatus(SpcFunc)<5) 
    then SpcFuncDefaultsRef:OccSensHtRt
    else if( LocalStatus(SpcFunc) > 1 ) 
    then SpaceFunctionData:OccSensHtRt("FuncType",SpcFunc)
    else UNDEFINED
    endif endif endif
  SIZING_PROPOSED : S901G ECBC
    if( HasNoInternalLds .OR.
        IfValidAnd(u:OccDens = 0) )
    then UNDEFINED
    else if( IfValidAnd(u:OccSensHtRt = 0) .AND.
	     IfValidAnd(u:OccDens > 0) )
    then SpaceFunctionData:OccSensHtRt("FuncType",SpcFunc)
    else if( IfValidAnd(u:OccSensHtRt > 0) .AND.
	     IfValidAnd(u:OccDens > 0) )
    then u:OccSensHtRt
    else UNDEFINED
    endif endif endif
  SIZING_PROPOSED
    if( HasNoInternalLds .OR.
        LocalStatus(OccDens) = 0 )
    then UNDEFINED
    else SpaceFunctionData:OccSensHtRt("FuncType",SpcFunc)  
    endif
  SIZING_BASELINE
    zp:OccSensHtRt
  ANNUAL
    z:OccSensHtRt
ENDRULE
RULE Spc:OccLatHtRt
  DESCRIPTION
    "The rate of latent heat released per person which is a function of activity"  
  HELP
    ""  
  REFERENCE 
    ACM-5.4.3 Occupants
  INPUTCLASS : T24N
    Prescribed
  INPUTCLASS : S901G ECBC
    Default
  MINIMUM 
    0
  COMMONMINIMUM
    100
  COMMONMAXIMUM
    1000
  MAXIMUM 
    2000
  UNITS 
    Btu/hr-person
  DEFAULT
    if( HasNoInternalLds .OR.
        LocalStatus(OccDens) = 0 )
    then UNDEFINED
    else if( LocalCompAssigned(SpcFuncDefaultsRef)  .AND. LocalStatus(SpcFunc)<5) 
    then SpcFuncDefaultsRef:OccLatHtRt
    else if( LocalStatus(SpcFunc) > 1 ) 
    then SpaceFunctionData:OccLatHtRt("FuncType",SpcFunc)
    else UNDEFINED
    endif endif endif
  SIZING_PROPOSED : S901G ECBC
    if( HasNoInternalLds .OR.
        IfValidAnd(u:OccDens = 0) )
    then UNDEFINED
    else if( IfValidAnd(u:OccLatHtRt = 0) .AND.
	     IfValidAnd(u:OccDens > 0) )
    then SpaceFunctionData:OccLatHtRt("FuncType",SpcFunc) 
    else if( IfValidAnd(u:OccLatHtRt > 0) .AND.
	     IfValidAnd(u:OccDens > 0) )
    then u:OccLatHtRt
    else UNDEFINED
    endif endif endif
  SIZING_PROPOSED
    if( HasNoInternalLds .OR.
        LocalStatus(OccDens) = 0 )
    then UNDEFINED
    else SpaceFunctionData:OccLatHtRt("FuncType",SpcFunc)  
    endif
  SIZING_BASELINE
    zp:OccLatHtRt
  ANNUAL
    z:OccLatHtRt
ENDRULE



; Removed, see Issue 1310 and OccFrac
// ---------- Occupancy Fraction for Minimum Design Ventilation Calculations ---
;RULE NEW Spc:OccVentFrac
;  DATATYPE
;    Float
;  LONGFORM
;    OccupancyVentilationFraction
;  DESCRIPTION
;    "The fraction of design occupancy that is assumed for calculating the minimum
;     design ventilation rate for compliance analysis."
;  INPUTCLASS
;    NotInput
;  DEFAULT : T24N
;    if( HasNoInternalLds )
;    then 1.0
;    else SpaceFunctionData:OccVentFrac("FuncType",SpcFunc)
;    endif
;  SIZING
;    u:OccVentFrac
;ENDRULE


// -----------------------------------------------------------------------------
RULE Spc:DwellingUnitTypeCnt[1]
  DESCRIPTION
    "Studio apartment unit count"  
  MINIMUM 
    0
  DEFAULT
    0
  SIZING
    u:DwellingUnitTypeCnt[1]
  ANNUAL
    z:DwellingUnitTypeCnt[1]
ENDRULE

// -----------------------------------------------------------------------------
RULE Spc:DwellingUnitTypeCnt[2]
  DESCRIPTION
    "1 bedroom unit count"  
  MINIMUM 
    0
  DEFAULT
    if( IfValidAnd( IsHighRiseRes = 1 ) )
      then 0
    else 
      if ( IfValidAnd( IsHotelMotelGuestRm = 1 ) )
      then HotelMotelGuestRmCnt
      else 0
      endif
    endif     
  SIZING
    u:DwellingUnitTypeCnt[2]
  ANNUAL
    z:DwellingUnitTypeCnt[2]
ENDRULE

// -----------------------------------------------------------------------------
RULE Spc:DwellingUnitTypeCnt[3]
  DESCRIPTION
    "2 bedrooms unit count"  
  MINIMUM 
    0
  DEFAULT
    0
  SIZING
    u:DwellingUnitTypeCnt[3]
  ANNUAL
    z:DwellingUnitTypeCnt[3]
ENDRULE

// -----------------------------------------------------------------------------
RULE Spc:DwellingUnitTypeCnt[4]
  DESCRIPTION
    "3 bedrooms unit count"  
  MINIMUM 
    0
  DEFAULT
    0
  SIZING
    u:DwellingUnitTypeCnt[4]
  ANNUAL
    z:DwellingUnitTypeCnt[4]
ENDRULE

// -----------------------------------------------------------------------------
RULE Spc:DwellingUnitTypeCnt[5]
  DESCRIPTION
    "4 bedrooms unit count"  
  MINIMUM 
    0
  DEFAULT
    0
  SIZING
    u:DwellingUnitTypeCnt[5]
  ANNUAL
    z:DwellingUnitTypeCnt[5]
ENDRULE

// -----------------------------------------------------------------------------
RULE Spc:DwellingUnitTypeCnt[6]
  DESCRIPTION
    "5 or more bedrooms unit count"  
  MINIMUM 
    0
  DEFAULT
    0
  SIZING
    u:DwellingUnitTypeCnt[6]
  ANNUAL
    z:DwellingUnitTypeCnt[6]
ENDRULE


// -----------------------------------------------------------------------------
RULE Spc:DwellingUnitTypeArea[1]
  DESCRIPTION
    "Average floor area of studio apartment units"  
  UNITS 
    ft2        
  REPORTPRECISION
    0
  MINIMUM 
    0
  DEFAULT
    if( IfValidAnd( DwellingUnitTypeCnt[1] > 0 ) .AND.
        IfValidAnd( Area > 0 ) )
    then
      Area / DwellingUnitTypeCnt[1] 
    else 0
    endif
  SIZING
    u:DwellingUnitTypeArea[1]
  ANNUAL
    z:DwellingUnitTypeArea[1]
ENDRULE

// -----------------------------------------------------------------------------
RULE Spc:DwellingUnitTypeArea[2]
  DESCRIPTION
    "Average floor area of 1 bedroom units"  
  UNITS 
    ft2        
  REPORTPRECISION
    0
  MINIMUM 
    0
  DEFAULT
    if( IfValidAnd( DwellingUnitTypeCnt[2] > 0 ) .AND.
        IfValidAnd( Area > 0 ) )
    then
      Area / DwellingUnitTypeCnt[2] 
    else 0
    endif
  SIZING
    u:DwellingUnitTypeArea[2]
  ANNUAL
    z:DwellingUnitTypeArea[2]
ENDRULE

// -----------------------------------------------------------------------------
RULE Spc:DwellingUnitTypeArea[3]
  DESCRIPTION
    "Average floor area of 2 bedroom units"  
  UNITS 
    ft2        
  REPORTPRECISION
    0
  MINIMUM 
    0
  DEFAULT
    if( IfValidAnd( DwellingUnitTypeCnt[3] > 0 ) .AND.
        IfValidAnd( Area > 0 ) )
    then
      Area / DwellingUnitTypeCnt[3]
    else 0
    endif
  SIZING
    u:DwellingUnitTypeArea[3]
  ANNUAL
    z:DwellingUnitTypeArea[3]
ENDRULE

// -----------------------------------------------------------------------------
RULE Spc:DwellingUnitTypeArea[4]
  DESCRIPTION
    "Average floor area of 3 bedroom units"  
  UNITS 
    ft2        
  REPORTPRECISION
    0
  MINIMUM 
    0
  DEFAULT
    if( IfValidAnd( DwellingUnitTypeCnt[4] > 0 ) .AND.
        IfValidAnd( Area > 0 ) )
    then
      Area / DwellingUnitTypeCnt[4]
    else 0
    endif
  SIZING
    DwellingUnitTypeArea[4]
  ANNUAL
    DwellingUnitTypeArea[4]
ENDRULE

// -----------------------------------------------------------------------------
RULE Spc:DwellingUnitTypeArea[5]
  DESCRIPTION
    "Average floor area of 4 bedroom units"  
  UNITS 
    ft2        
  REPORTPRECISION
    0
  MINIMUM 
    0
  DEFAULT
    if( IfValidAnd( DwellingUnitTypeCnt[5] > 0 ) .AND.
        IfValidAnd( Area > 0 ) )
    then
      Area / DwellingUnitTypeCnt[5]
    else 0
    endif
  SIZING
    DwellingUnitTypeArea[5]
  ANNUAL
    DwellingUnitTypeArea[5]
ENDRULE

// -----------------------------------------------------------------------------
RULE Spc:DwellingUnitTypeArea[6]
  DESCRIPTION
    "Average floor area of units with 5 or more bedrooms"  
  UNITS 
    ft2    
  REPORTPRECISION
    0
  MINIMUM 
    0
  DEFAULT
    if( IfValidAnd( DwellingUnitTypeCnt[6] > 0 ) .AND.
        IfValidAnd( Area > 0 ) )
    then
      Area / DwellingUnitTypeCnt[6]
    else 0
    endif
  SIZING
    DwellingUnitTypeArea[6]
  ANNUAL
    DwellingUnitTypeArea[6]
ENDRULE



// -----------------------------------------------------------------------------
RULE NEW Spc:DwellingUnitSpcTotArea
  DATATYPE
    Float
  LONGFORM
    DwellingUnitSpaceTotalArea
  DESCRIPTION
    "The total floor area of all dwelling units"
  INPUTCLASS
    NotInput
  UNITS 
    ft2
  DEFAULT
    if( IfValidAnd( IsHighRiseRes = 1 ) )
    then
      ( ValidOr(DwellingUnitTypeArea[1],0) * ValidOr(DwellingUnitTypeCnt[1],0) + 
        ValidOr(DwellingUnitTypeArea[2],0) * ValidOr(DwellingUnitTypeCnt[2],0) + 
        ValidOr(DwellingUnitTypeArea[3],0) * ValidOr(DwellingUnitTypeCnt[3],0) +
        ValidOr(DwellingUnitTypeArea[4],0) * ValidOr(DwellingUnitTypeCnt[4],0) +
        ValidOr(DwellingUnitTypeArea[5],0) * ValidOr(DwellingUnitTypeCnt[5],0) +
        ValidOr(DwellingUnitTypeArea[6],0) * ValidOr(DwellingUnitTypeCnt[6],0) )
    else if ( IfValidAnd( IsHotelMotelGuestRm = 1 ) )
      then Spc:Area
    else
      0
    endif endif    
 CHECKCODE
    if( IfValidAnd( IsHighRiseRes = 0 ) .OR.
        IfValidAnd( CondgType = "Plenum" ) .OR.
        IfValidAnd( CondgType = "Unconditioned" ) )
    then UNCHANGED
    else if( LocalStatus( DwellingUnitSpcTotArea ) = 0 ) 
    then
      PostError("Residential Unit floor areas must be specified for space '%s'.",Name)
    else // Check for consistency between Spc:Area and total unit floor area
      if( DwellingUnitSpcTotArea > Spc:Area * ( 1 + 0.05 ) .OR.
          DwellingUnitSpcTotArea < Spc:Area * ( 1 - 0.05 ) )
      then 
        PostError("Total Floor Area of dwelling units in space '%s' differs by more 
                   than %g percent from the Space Area. Revise the 
                   Average Floor Area per unit inputs.", Name, (5) ) 
      else UNCHANGED
      endif
    endif endif
ENDRULE


// -----------------------------------------------------------------------------
RULE NEW Spc:DefaultedDwellingUnitArea
  DATATYPE
    Integer
  LONGFORM
    DefaultedDwellingUnitArea
  DESCRIPTION
    "A flag to indicate that one of more values for dwelling unit floor area 
     in the space are defaulted values.  Compliance will not be valID if any 
     spaces have non-zero values."
  INPUTCLASS
    NotInput
  DEFAULT
    if( SpcFunc = "High-Rise Residential Living Spaces" .AND.
        IfValidAnd(ResLivingUnitCnt > 0) .AND.
      ( (IfValidAnd( DwellingUnitTypeCnt[1] > 0 ) .AND. LocalStatus(DwellingUnitTypeArea[1]) < 7) .OR.
        (IfValidAnd( DwellingUnitTypeCnt[2] > 0 ) .AND. LocalStatus(DwellingUnitTypeArea[2]) < 7) .OR.
        (IfValidAnd( DwellingUnitTypeCnt[3] > 0 ) .AND. LocalStatus(DwellingUnitTypeArea[3]) < 7) .OR.
        (IfValidAnd( DwellingUnitTypeCnt[4] > 0 ) .AND. LocalStatus(DwellingUnitTypeArea[4]) < 7) .OR.
        (IfValidAnd( DwellingUnitTypeCnt[5] > 0 ) .AND. LocalStatus(DwellingUnitTypeArea[5]) < 7) .OR.
        (IfValidAnd( DwellingUnitTypeCnt[6] > 0 ) .AND. LocalStatus(DwellingUnitTypeArea[6]) < 7) ) ) 
    then 1
    else 0
    endif
ENDRULE


// -----------------------------------------------------------------------------
RULE NEW Proj:DefaultedDwellingUnitArea
  DATATYPE
    Integer
  LONGFORM
    DefaultedDwellingUnitArea
  DESCRIPTION
    "The number of High-Rise Residential Living Spaces which have defaulted 
     values for dwelling unit floor area in the space.  Compliance will not 
     be valid if this value is non-zero."
  INPUTCLASS
    NotInput
  DEFAULT
    SumAll(Spc:DefaultedDwellingUnitArea)
ENDRULE


// -----------------------------------------------------------------------------
RULE NEW Spc:DwellingUnitSpcTotAreaWithMult
  DATATYPE
    Float
  LONGFORM
    DwellingUnitSpaceTotalAreaWithMultiplier
  DESCRIPTION
    "The total floor area of all dwelling units including multipliers"
  INPUTCLASS
    NotInput
  UNITS 
    ft2
  DEFAULT
    DwellingUnitSpcTotArea * Mult
ENDRULE


// -----------------------------------------------------------------------------
RULE NEW Spc:HaveResDHW
  DATATYPE
    Integer
  LONGFORM
    HaveResidentialDHW
  DESCRIPTION
    "flag indicating that this Spc is residential and served by a ResDHWSys"
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd( OccClass = "Residential" ) .AND.
        IfValidAnd( CondgType != "Plenum" ) .AND.
        IfValidAnd( CondgType != "Unconditioned" ) .AND.
        LocalCompAssigned( ResDHWSysRef ) .AND.
        DwellingUnitSpcTotArea > 0 )
    then  1
    else  0
    endif
ENDRULE
