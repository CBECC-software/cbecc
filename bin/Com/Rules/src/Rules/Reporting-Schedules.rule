// Schedules - Reporting
//
// -------------------------------------------------------------------------
//  Copyright (c) 2014, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
// 
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------
//  

// 
// The main objects in the SDD are:
//     SchDay  (no rules to date??)
//     SchWeek
//     Schedule
//             
// -------------------------------------------------------------------------
// Updates:            
//    
// -------------------------------------------------------------------------


// ISSUE: Do we need for tracking exact num week assignments beyond 20 (since only used to toggle UI controls on/off)?
RULE NEW Sch:NumWeeks
   DESCRIPTION
     "Number of weeks currently assigned to annual schedule."
  MINIMUM
    0  
  INPUTCLASS
    NotInput
  DEFAULT
         if (IfValidAnd( EndMonth[20] > 0 ) .AND. IfValidAnd( EndDay[20] > 0 ) .AND. LocalCompAssigned( SchWeekRef[20] )) then  52
    else if (IfValidAnd( EndMonth[19] > 0 ) .AND. IfValidAnd( EndDay[19] > 0 ) .AND. LocalCompAssigned( SchWeekRef[19] )) then  19
    else if (IfValidAnd( EndMonth[18] > 0 ) .AND. IfValidAnd( EndDay[18] > 0 ) .AND. LocalCompAssigned( SchWeekRef[18] )) then  18
    else if (IfValidAnd( EndMonth[17] > 0 ) .AND. IfValidAnd( EndDay[17] > 0 ) .AND. LocalCompAssigned( SchWeekRef[17] )) then  17
    else if (IfValidAnd( EndMonth[16] > 0 ) .AND. IfValidAnd( EndDay[16] > 0 ) .AND. LocalCompAssigned( SchWeekRef[16] )) then  16
    else if (IfValidAnd( EndMonth[15] > 0 ) .AND. IfValidAnd( EndDay[15] > 0 ) .AND. LocalCompAssigned( SchWeekRef[15] )) then  15
    else if (IfValidAnd( EndMonth[14] > 0 ) .AND. IfValidAnd( EndDay[14] > 0 ) .AND. LocalCompAssigned( SchWeekRef[14] )) then  14
    else if (IfValidAnd( EndMonth[13] > 0 ) .AND. IfValidAnd( EndDay[13] > 0 ) .AND. LocalCompAssigned( SchWeekRef[13] )) then  13
    else if (IfValidAnd( EndMonth[12] > 0 ) .AND. IfValidAnd( EndDay[12] > 0 ) .AND. LocalCompAssigned( SchWeekRef[12] )) then  12
    else if (IfValidAnd( EndMonth[11] > 0 ) .AND. IfValidAnd( EndDay[11] > 0 ) .AND. LocalCompAssigned( SchWeekRef[11] )) then  11
    else if (IfValidAnd( EndMonth[10] > 0 ) .AND. IfValidAnd( EndDay[10] > 0 ) .AND. LocalCompAssigned( SchWeekRef[10] )) then  10
    else if (IfValidAnd( EndMonth[ 9] > 0 ) .AND. IfValidAnd( EndDay[ 9] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 9] )) then   9
    else if (IfValidAnd( EndMonth[ 8] > 0 ) .AND. IfValidAnd( EndDay[ 8] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 8] )) then   8
    else if (IfValidAnd( EndMonth[ 7] > 0 ) .AND. IfValidAnd( EndDay[ 7] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 7] )) then   7
    else if (IfValidAnd( EndMonth[ 6] > 0 ) .AND. IfValidAnd( EndDay[ 6] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 6] )) then   6
    else if (IfValidAnd( EndMonth[ 5] > 0 ) .AND. IfValidAnd( EndDay[ 5] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 5] )) then   5
    else if (IfValidAnd( EndMonth[ 4] > 0 ) .AND. IfValidAnd( EndDay[ 4] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 4] )) then   4
    else if (IfValidAnd( EndMonth[ 3] > 0 ) .AND. IfValidAnd( EndDay[ 3] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 3] )) then   3
    else if (IfValidAnd( EndMonth[ 2] > 0 ) .AND. IfValidAnd( EndDay[ 2] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 2] )) then   2
    else if (IfValidAnd( EndMonth[ 1] > 0 ) .AND. IfValidAnd( EndDay[ 1] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 1] )) then   1
    else  0  endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif
   SIZING
         if (IfValidAnd( EndMonth[20] > 0 ) .AND. IfValidAnd( EndDay[20] > 0 ) .AND. LocalCompAssigned( SchWeekRef[20] )) then  52
    else if (IfValidAnd( EndMonth[19] > 0 ) .AND. IfValidAnd( EndDay[19] > 0 ) .AND. LocalCompAssigned( SchWeekRef[19] )) then  19
    else if (IfValidAnd( EndMonth[18] > 0 ) .AND. IfValidAnd( EndDay[18] > 0 ) .AND. LocalCompAssigned( SchWeekRef[18] )) then  18
    else if (IfValidAnd( EndMonth[17] > 0 ) .AND. IfValidAnd( EndDay[17] > 0 ) .AND. LocalCompAssigned( SchWeekRef[17] )) then  17
    else if (IfValidAnd( EndMonth[16] > 0 ) .AND. IfValidAnd( EndDay[16] > 0 ) .AND. LocalCompAssigned( SchWeekRef[16] )) then  16
    else if (IfValidAnd( EndMonth[15] > 0 ) .AND. IfValidAnd( EndDay[15] > 0 ) .AND. LocalCompAssigned( SchWeekRef[15] )) then  15
    else if (IfValidAnd( EndMonth[14] > 0 ) .AND. IfValidAnd( EndDay[14] > 0 ) .AND. LocalCompAssigned( SchWeekRef[14] )) then  14
    else if (IfValidAnd( EndMonth[13] > 0 ) .AND. IfValidAnd( EndDay[13] > 0 ) .AND. LocalCompAssigned( SchWeekRef[13] )) then  13
    else if (IfValidAnd( EndMonth[12] > 0 ) .AND. IfValidAnd( EndDay[12] > 0 ) .AND. LocalCompAssigned( SchWeekRef[12] )) then  12
    else if (IfValidAnd( EndMonth[11] > 0 ) .AND. IfValidAnd( EndDay[11] > 0 ) .AND. LocalCompAssigned( SchWeekRef[11] )) then  11
    else if (IfValidAnd( EndMonth[10] > 0 ) .AND. IfValidAnd( EndDay[10] > 0 ) .AND. LocalCompAssigned( SchWeekRef[10] )) then  10
    else if (IfValidAnd( EndMonth[ 9] > 0 ) .AND. IfValidAnd( EndDay[ 9] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 9] )) then   9
    else if (IfValidAnd( EndMonth[ 8] > 0 ) .AND. IfValidAnd( EndDay[ 8] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 8] )) then   8
    else if (IfValidAnd( EndMonth[ 7] > 0 ) .AND. IfValidAnd( EndDay[ 7] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 7] )) then   7
    else if (IfValidAnd( EndMonth[ 6] > 0 ) .AND. IfValidAnd( EndDay[ 6] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 6] )) then   6
    else if (IfValidAnd( EndMonth[ 5] > 0 ) .AND. IfValidAnd( EndDay[ 5] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 5] )) then   5
    else if (IfValidAnd( EndMonth[ 4] > 0 ) .AND. IfValidAnd( EndDay[ 4] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 4] )) then   4
    else if (IfValidAnd( EndMonth[ 3] > 0 ) .AND. IfValidAnd( EndDay[ 3] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 3] )) then   3
    else if (IfValidAnd( EndMonth[ 2] > 0 ) .AND. IfValidAnd( EndDay[ 2] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 2] )) then   2
    else if (IfValidAnd( EndMonth[ 1] > 0 ) .AND. IfValidAnd( EndDay[ 1] > 0 ) .AND. LocalCompAssigned( SchWeekRef[ 1] )) then   1
    else  0  endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif
  ANNUAL
    z:NumWeeks
ENDRULE



// -------------- SchDay stats --------------------
//

RULE NEW SchDay:Sum
   DESCRIPTION
     "Sum of hourly schedule values."
  MINIMUM
    0  
  INPUTCLASS
    NotInput
  DEFAULT
    Hr[1]  + Hr[2]  + Hr[3]  + Hr[4]  + Hr[5]  + Hr[6]  + Hr[7]  + Hr[8]  + Hr[9]  + Hr[10] + 
    Hr[11] + Hr[12] + Hr[13] + Hr[14] + Hr[15] + Hr[16] + Hr[17] + Hr[18] + Hr[19] + Hr[20] + 
    Hr[21] + Hr[22] + Hr[23] + Hr[24]
  SIZING
    Hr[1]  + Hr[2]  + Hr[3]  + Hr[4]  + Hr[5]  + Hr[6]  + Hr[7]  + Hr[8]  + Hr[9]  + Hr[10] + 
    Hr[11] + Hr[12] + Hr[13] + Hr[14] + Hr[15] + Hr[16] + Hr[17] + Hr[18] + Hr[19] + Hr[20] + 
    Hr[21] + Hr[22] + Hr[23] + Hr[24]
  ANNUAL
    z:Sum
ENDRULE


RULE NEW SchDay:Avg
   DESCRIPTION
     "Average of hourly schedule values."
  MINIMUM
    0  
  INPUTCLASS
    NotInput
  DEFAULT
    Sum / 24
  SIZING
    Sum / 24
  ANNUAL
    z:Avg
ENDRULE

//ISSUE: Waiting for LocalMaxArray function
RULE NEW SchDay:MaxVal
  DATATYPE
    Float
  DESCRIPTION
    "Maximum of hourly schedule values."
  INPUTCLASS
    NotInput
  DEFAULT
    Hr[1]
ENDRULE
//ISSUE: Waiting for LocalMaxArray function
RULE NEW SchWeek:MaxVal
  DATATYPE
    Float
  DESCRIPTION
    "Maximum weekly schedule value."
  INPUTCLASS
    NotInput
  DEFAULT
    SchDaySunRef:MaxVal
ENDRULE
//ISSUE: Waiting for LocalMaxArray function
RULE NEW Sch:MaxVal
  DATATYPE
    Float
  DESCRIPTION
    "Maximum weekly schedule value."
  INPUTCLASS
    NotInput
  DEFAULT
    SchWeekRef[1]:MaxVal
ENDRULE


RULE NEW Sch:ApproxFullLdHrs
  DATATYPE
    Float
  LONGFORM
    ApproximateFullLoadHours
  DESCRIPTION
    "APPROXIMATE full load hours - currently valid only when a single week schedule
     is assigned and assuming run year of 2009 and standard CEC holidays."
  INPUTCLASS
    NotInput
  DEFAULT
    if (NumWeeks > 1 .OR. EndMonth[1] != 12 .OR. EndDay[1] != 31) then  0
    else if (Type != "Fraction") then  0
; IF NO HOLIDAYS ...
;    else  (SchWeekRef[1]:SchDaySunRef:Sum * 52 ) +
;          (SchWeekRef[1]:SchDayMonRef:Sum * 52 ) +
;          (SchWeekRef[1]:SchDayTueRef:Sum * 52 ) +
;          (SchWeekRef[1]:SchDayWedRef:Sum * 52 ) +
;          (SchWeekRef[1]:SchDayThuRef:Sum * 53 ) +
;          (SchWeekRef[1]:SchDayFriRef:Sum * 52 ) +
;          (SchWeekRef[1]:SchDaySatRef:Sum * 52 ) +
;          (SchWeekRef[1]:SchDayHolRef:Sum *  0 )
; WITH HOLIDAYS ...
    else  (SchWeekRef[1]:SchDaySunRef:Sum * 52 ) +
          (SchWeekRef[1]:SchDayMonRef:Sum * 46 ) +
          (SchWeekRef[1]:SchDayTueRef:Sum * 52 ) +
          (SchWeekRef[1]:SchDayWedRef:Sum * 51 ) +
          (SchWeekRef[1]:SchDayThuRef:Sum * 51 ) +
          (SchWeekRef[1]:SchDayFriRef:Sum * 51 ) +
          (SchWeekRef[1]:SchDaySatRef:Sum * 52 ) +
          (SchWeekRef[1]:SchDayHolRef:Sum * 10 )
    endif endif
  SIZING
    if (NumWeeks > 1 .OR. EndMonth[1] != 12 .OR. EndDay[1] != 31) then  0
    else if (Type != "Fraction") then  0
    else  (SchWeekRef[1]:SchDaySunRef:Sum * 52 ) +
          (SchWeekRef[1]:SchDayMonRef:Sum * 46 ) +
          (SchWeekRef[1]:SchDayTueRef:Sum * 52 ) +
          (SchWeekRef[1]:SchDayWedRef:Sum * 51 ) +
          (SchWeekRef[1]:SchDayThuRef:Sum * 51 ) +
          (SchWeekRef[1]:SchDayFriRef:Sum * 51 ) +
          (SchWeekRef[1]:SchDaySatRef:Sum * 52 ) +
          (SchWeekRef[1]:SchDayHolRef:Sum * 10 )
    endif endif
  ANNUAL
    z:ApproxFullLdHrs
ENDRULE


