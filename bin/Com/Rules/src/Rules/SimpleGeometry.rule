// Simple Geometry rules
//
// -------------------------------------------------------------------------
//  Copyright (c) 2012, California Energy Commission
//  All rights reserved.
//  Redistribution and use in source and binary forms, with or without
//  modification, are permitted provided that the following conditions are
//  met:
//
//    * Redistributions of source code must retain the above copyright
//  notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//  notice, this list of conditions and the following disclaimer in
//  the documentation and/or other materials provided with the
//  distribution.
//    * Neither the name of the California Energy Commission nor the names of its
//  contributors may be used to endorse or promote products
//  derived from this software without specific prior written
//  permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
//  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
//  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
//  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION
//  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
//  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
//  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
//  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
//  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// -------------------------------------------------------------------------

//  This rule file addresses the following building descriptors:
//
//  n/a

// ********** BuildingStory rules **********************************************

// ---------- Story Z ----------------------------------------------------------
RULE Proj:Bldg:Story:Z
  DESCRIPTION
    "Height above site ground level (negative for below grade stories)"
  HELP
    ""
  INPUTCLASS
    Optional    ; Compulsory when in 2D mode
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 ) then
      if( LocalStatus(Z) < 6 .OR. LocalStatus(Z) > 7 ) then
        POSTERROR("Building story '%s' must have a user-defined Z (height above site ground level) whenever GeometryInpType = 'Simplified.'",Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE

// ---------- Story Flr to Flr Hgt ---------------------------------------------
RULE Proj:Bldg:Story:FlrToFlrHgt
  DESCRIPTION
    "Height from this floor to the next higher floor"
  HELP
    ""
  INPUTCLASS
    Optional    ; Compulsory when in 2D mode
;  MINIMUM
;    0.01
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 ) then
      if( LocalStatus(FlrToFlrHgt) < 6 .OR. LocalStatus(FlrToFlrHgt) > 7 ) then
        POSTERROR("Building story '%s' must have a user-defined floor-to-floor height (FlrToFlrHgt) whenever GeometryInpType = 'Simplified.'",Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE

// ---------- Story Flr to Ceiling Hgt -----------------------------------------
RULE Proj:Bldg:Story:FlrToCeilingHgt
  DESCRIPTION
    "Height of occupied spaces on this floor"
  HELP
    ""
  INPUTCLASS
    Optional    ; Compulsory when in 2D mode
;  MINIMUM
;    0.01
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 ) then
      if( LocalStatus(FlrToCeilingHgt) < 6 .OR. LocalStatus(FlrToCeilingHgt) > 7 ) then
        POSTERROR("Building story '%s' must have a user-defined floor-to-ceiling height (FlrToCeilingHgt) whenever GeometryInpType = 'Simplified.'",Name)
      else if( IfValidAnd(FlrToCeilingHgt > FlrToFlrHgt) ) then
        POSTERROR("Building story '%s' floor-to-ceiling height (FlrToCeilingHgt) must be <= flr-to-flr height (FlrToFlrHgt) whenever GeometryInpType = 'Simplified.'",Name)
      else UNCHANGED
      endif endif
	 else UNCHANGED
	 endif
ENDRULE


// ********** Ceiling rules ****************************************************

// ---------- Area -------------------------------------------------------------
RULE Proj:Bldg:Story:Spc:Ceiling:Area
; other rule sections listed in other rule blocks
  MINIMUM
    0.01
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 ) then
      if( LocalStatus(Area) < 6 .OR. LocalStatus(Area) > 7 ) then
        POSTERROR("Ceiling '%s' must have a user-defined Area whenever GeometryInpType = 'Simplified.'",Name)
      else UNCHANGED
      endif
	 else UNCHANGED
	 endif
ENDRULE

// ---------- Tilt -------------------------------------------------------------
RULE Ceiling:Tilt
  HELP
    "The angle between the ceiling surface and horizontal"
  DESCRIPTION
    "Angle Between Ceiling and Horizontal"
  INPUTCLASS
    NotInput
  MINIMUM
    0
  MAXIMUM
    180
  DEFAULT
    if( Proj:IsDetailedGeometry = 0 ) then
      0
    else UNDEFINED
    endif
ENDRULE

// ---------- Poly Z -----------------------------------------------------------
RULE NEW Ceiling:PolyZ
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    if( ParentStatus(Spc:FlrZ) > 0 .AND.
        IfValidAnd(Spc:FlrToCeilingHgt > 0) ) then
      Spc:FlrZ + Spc:FlrToCeilingHgt
    else UNDEFINED
    endif
ENDRULE


// ********** ExtFlr rules *****************************************************

// ---------- Area -------------------------------------------------------------
RULE Proj:Bldg:Story:Spc:ExtFlr:Area
; other rule sections listed in other rule blocks
  MINIMUM
    0.01
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 ) then
      if( LocalStatus(Area) < 6 .OR. LocalStatus(Area) > 7 ) then
        POSTERROR("Exterior floor '%s' must have a user-defined Area whenever GeometryInpType = 'Simplified.'", Name)
      else UNCHANGED
      endif
	 else UNCHANGED
	 endif
ENDRULE

// ---------- Azimuth ----------------------------------------------------------
RULE ExtFlr:Az
  DESCRIPTION
    "Angle between Vector P and True North as defined by NVector"
  MINIMUM
    0
  MAXIMUM
    360
  DEFAULT
    if( Proj:IsDetailedGeometry = 0 ) then
// Pass Az such that each floor in the model is rotated 15deg, fanning them out 
//    for display in 3-D rendering of model. 
      360 - (15 * mod( (ComponentIndex() - 1), 24 ))
    else UNCHANGED
    endif
ENDRULE

// ---------- Tilt -------------------------------------------------------------
RULE ExtFlr:Tilt
; other rule sections listed in other rule blocks
  DEFAULT
    if( Proj:IsDetailedGeometry = 0 ) then
      180
    else UNCHANGED
    endif
ENDRULE

// ---------- Poly Z -----------------------------------------------------------
RULE NEW ExtFlr:PolyZ
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    if( ParentStatus(Spc:FlrZ) > 0 ) then
      Spc:FlrZ
    else UNDEFINED
    endif
ENDRULE


// ********** ExtWall rules ****************************************************

// ---------- Area -------------------------------------------------------------
RULE Proj:Bldg:Story:Spc:ExtWall:Area
; other rule sections listed in other rule blocks
  MINIMUM
    0.01
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 ) then
      if( LocalStatus(Area) < 1 ) then
        POSTERROR("Exterior wall '%s' must have a valid Area defined whenever GeometryInpType = 'Simplified.'",Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE

// ---------- Azimuth ----------------------------------------------------------
RULE ExtWall:Az
; other rule sections listed in other rule blocks
  MINIMUM
    0
  MAXIMUM
    360
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 ) then
      if( LocalStatus(Az) < 6 .OR. LocalStatus(Az) > 7 ) then
        POSTERROR("Exterior wall '%s' must have a user-defined Az (azimuth) whenever GeometryInpType = 'Simplified.'",Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE

// ---------- Tilt -------------------------------------------------------------
RULE ExtWall:Tilt
; other rule sections listed in other rule blocks
  MINIMUM
    0
  MAXIMUM
    180
  DEFAULT
    if( Proj:IsDetailedGeometry = 0 ) then
      90
    else UNCHANGED
    endif
ENDRULE

// ---------- Poly Z -----------------------------------------------------------
RULE NEW ExtWall:PolyZ
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    if( ParentStatus(Spc:FlrZ) > 0 ) then
      Spc:FlrZ
    else UNDEFINED
    endif
ENDRULE

// ---------- Poly DZ ----------------------------------------------------------
// SAC 6/9/16 - logic added to enforce a minimum wall width = 1.1 + ((# child windows & doors) * 0.5)
RULE NEW ExtWall:PolyDZ
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd(Spc:FlrToCeilingHgt > 0) ) then
      if (IfValidAnd( Area > 0 )==0)
      then  Spc:FlrToCeilingHgt
      else if (Area > Spc:FlrToCeilingHgt * (1.1 + ((ChildCount(Win) + ChildCount(Dr)) * 0.5)))
      then  Spc:FlrToCeilingHgt
      else  Area / (1.1 + ((ChildCount(Win) + ChildCount(Dr)) * 0.5))
      endif endif
    else UNDEFINED
    endif
ENDRULE


// ********** Win rules ********************************************************

// ---------- Area -------------------------------------------------------------
RULE Win:Area
; other rule sections listed in other rule blocks
  MINIMUM
    0.01
; revised rule to allow Area to be defaulted based on Hgt * Wd (if specified in conjunction w/ window shades)
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 ) then
      if( LocalStatus(Area) < 1 ) then
        POSTERROR("Window '%s' must have a valid Area defined whenever GeometryInpType = 'Simplified.'", Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
  DEFAULT
    if (IfValidAnd( ShadeGeomReqd > 0 ) .AND. IfValidAnd( Hgt > 0 ) .AND. IfValidAnd( Wd > 0 ))
    then  Hgt * Wd
    else  UNDEFINED
    endif
ENDRULE

// ---------- IsGlazedDoor? ----------------------------------------------------
RULE NEW Win:IsGlazedDoor
  DATATYPE
    Integer
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd(FenConsRef:FenProdType = "GlazedDoor") ) 
    then 1
    else 0
    endif
ENDRULE

// ---------- Poly Z -----------------------------------------------------------
RULE NEW Win:PolyZ
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
; possibly offset Z and or X/Y
    if( IfValidAnd(Spc:FlrZ > -9999) ) then
      Spc:FlrZ
    else UNDEFINED
    endif
ENDRULE


// ********** Dr rules *********************************************************

// ---------- Area -------------------------------------------------------------
RULE Dr:Area
; other rule sections listed in other rule blocks
  MINIMUM
    0.01
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 ) then
      if( LocalStatus(Area) < 6 .OR. LocalStatus(Area) > 7 ) then
        POSTERROR("Door '%s' must have a user-defined Area whenever GeometryInpType = 'Simplified.'", Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
  DEFAULT
    if (IfValidAnd( ShadeGeomReqd > 0 ) .AND. IfValidAnd( Hgt > 0 ) .AND. IfValidAnd( Wd > 0 ))
    then  Hgt * Wd
    else  UNDEFINED
    endif
ENDRULE

// ---------- Poly Z -----------------------------------------------------------
RULE NEW Dr:PolyZ
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd(Spc:FlrZ > -9999) ) then
      Spc:FlrZ
    else UNDEFINED
    endif
ENDRULE


// ********** Skylt rules ******************************************************

// ---------- Area -------------------------------------------------------------
RULE Skylt:Area
; other rule sections listed in other rule blocks
  MINIMUM
    0.01
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 ) then
      if( LocalStatus(Area) < 6 .OR. LocalStatus(Area) > 7 ) then
        POSTERROR("Skylt '%s' must have a user-defined Area whenever GeometryInpType = 'Simplified.'", Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE

// ---------- Poly Z -----------------------------------------------------------
RULE NEW Skylt:PolyZ
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd(Spc:FlrZ > -9999) .AND.
        IfValidAnd(Spc:FlrToCeilingHgt > 0) ) then
      Spc:FlrZ + Spc:FlrToCeilingHgt
    else UNDEFINED
    endif
ENDRULE


// ********** IntFlr rules *****************************************************

// ---------- Area -------------------------------------------------------------
RULE Proj:Bldg:Story:Spc:IntFlr:Area
; other rule sections listed in other rule blocks
  MINIMUM
    0.01
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 ) then
      if( LocalStatus(Area) < 6 .OR. LocalStatus(Area) > 7 ) then
        POSTERROR("Interior floor '%s' must have a user-defined Area whenever GeometryInpType = 'Simplified.'", Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE

// ---------- Tilt -------------------------------------------------------------
RULE IntFlr:Tilt
; other rule sections listed in other rule blocks
  DEFAULT
    if( Proj:IsDetailedGeometry = 0 ) then
      180
    else UNDEFINED
    endif
ENDRULE

// ---------- Poly Z -----------------------------------------------------------
RULE NEW IntFlr:PolyZ
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    if( ParentStatus(Spc:FlrZ) > 0 ) then
      Spc:FlrZ
    else UNDEFINED
    endif
ENDRULE

// ---------- PolyAz -----------------------------------------------------------
RULE NEW IntFlr:PolyAz
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    180 - (15 * (ComponentIndex() - 1))
ENDRULE


// ********** IntWall rules ****************************************************

// ---------- Area -------------------------------------------------------------
RULE Proj:Bldg:Story:Spc:IntWall:Area
; other rule sections listed in other rule blocks
  MINIMUM
    0.01
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 ) then
      if( LocalStatus(Area) < 6 .OR. LocalStatus(Area) > 7 ) then
        POSTERROR("Interior wall '%s' must have a user-defined Area whenever GeometryInpType = 'Simplified.'",Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE

// ---------- Tilt -------------------------------------------------------------
RULE IntWall:Tilt
; other rule sections listed in other rule blocks
  MINIMUM
    0
  MAXIMUM
    180
  DEFAULT
    if( Proj:IsDetailedGeometry = 0 ) then
      90
    else UNDEFINED
    endif
ENDRULE

// ---------- Poly Z -----------------------------------------------------------
RULE NEW IntWall:PolyZ
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    if( ParentStatus(Spc:FlrZ) > 0 ) then
      Spc:FlrZ
    else UNDEFINED
    endif
ENDRULE

// ---------- Poly DZ ----------------------------------------------------------
// SAC 6/9/16 - logic added to enforce a minimum wall width = 1.1 + ((# child doors) * 0.5)
RULE NEW IntWall:PolyDZ
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    if( IfValidAnd(Spc:FlrToCeilingHgt > 0) ) then
      if (IfValidAnd( Area > 0 )==0)
      then  Spc:FlrToCeilingHgt
      else if (Area > Spc:FlrToCeilingHgt * (1.1 + (ChildCount(Dr) * 0.5)))
      then  Spc:FlrToCeilingHgt
      else  Area / (1.1 + (ChildCount(Dr) * 0.5))
      endif endif
    else UNDEFINED
    endif
ENDRULE

// ---------- PolyAz -----------------------------------------------------------
RULE NEW IntWall:PolyAz
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    355 - (10 * (ComponentIndex() - 1))
ENDRULE


// ********** Roof rules *******************************************************

// ---------- Area -------------------------------------------------------------
RULE Roof:Area
; other rule sections listed in other rule blocks
  MINIMUM
    0.01
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 ) then
      if( LocalStatus(Area) < 6 .OR. LocalStatus(Area) > 7 ) then
        POSTERROR("Roof '%s' must have a user-defined Area whenever GeometryInpType = 'Simplified.'", Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE

// ---------- Azimuth ----------------------------------------------------------
RULE Roof:Az
; other rule sections listed in other rule blocks
  MINIMUM
    0
  MAXIMUM
    360
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 ) then
      if( LocalStatus(Az) < 6 .OR. LocalStatus(Az) > 7 ) then
        POSTERROR("Roof '%s' must have a user-defined Az (azimuth) whenever GeometryInpType = 'Simplified.'", Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE

// ---------- Tilt -------------------------------------------------------------
RULE Roof:Tilt
; other rule sections listed in other rule blocks
  MINIMUM
    0
  MAXIMUM
    180
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 ) then
      if( LocalStatus(Tilt) < 6 .OR. LocalStatus(Tilt) > 7 ) then
        POSTERROR("Roof '%s' must have a user-defined Tilt whenever GeometryInpType = 'Simplified.'", Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE

// ---------- Poly Z -----------------------------------------------------------
RULE NEW Roof:PolyZ
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    if( ParentStatus(Spc:FlrZ) > 0 .AND.
        IfValidAnd(Spc:FlrToCeilingHgt > 0) ) then
      Spc:FlrZ + Spc:FlrToCeilingHgt
    else UNDEFINED
    endif
ENDRULE


// ********** UndgrFlr rules ***************************************************

// ---------- Area -------------------------------------------------------------
RULE UndgrFlr:Area
; other rule sections listed in other rule blocks
  MINIMUM
    0.01
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 ) then
      if( LocalStatus(Area) < 6 .OR. LocalStatus(Area) > 7 ) then
        POSTERROR("Underground floor '%s' must have a user-defined Area whenever GeometryInpType = 'Simplified.'", Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE

// ---------- Poly Z -----------------------------------------------------------
RULE NEW UndgrFlr:PolyZ
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    if( ParentStatus(Spc:FlrZ) > 0 ) then
      Spc:FlrZ
    else UNDEFINED
    endif
ENDRULE

// ---------- PolyAz -----------------------------------------------------------
RULE NEW UndgrFlr:PolyAz
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    180 - (15 * (ComponentIndex() - 1))
ENDRULE


// ********** UndgrWall rules **************************************************

// ---------- Area -------------------------------------------------------------
RULE Proj:Bldg:Story:Spc:UndgrWall:Area
; other rule sections listed in other rule blocks
  MINIMUM
    0.01
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 ) then
      if( LocalStatus(Area) < 6 .OR. LocalStatus(Area) > 7 ) then
        POSTERROR("Underground wall '%s' must have a user-defined Area whenever GeometryInpType = 'Simplified.'", Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE

// ---------- Height -----------------------------------------------------------
RULE UndgrWall:Hgt
; other rule sections listed in other rule blocks
  CHECKSIM
    if( Proj:IsDetailedGeometry = 0 ) then
      if( LocalStatus(Area) < 6 .OR. LocalStatus(Area) > 7 ) then
        POSTERROR("Underground wall '%s' must have a user-defined Area whenever GeometryInpType = 'Simplified.'", Name)
      else UNCHANGED
      endif
    else UNCHANGED
    endif
ENDRULE

// ---------- Poly Z -----------------------------------------------------------
RULE NEW UndgrWall:PolyZ
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    if( ParentStatus(Spc:FlrZ) > 0 ) then
      Spc:FlrZ
    else UNDEFINED
    endif
ENDRULE

// ---------- PolyAz -----------------------------------------------------------
RULE NEW UndgrWall:PolyAz
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  DEFAULT
    5 + (10 * (ComponentIndex() - 1))
ENDRULE


// *****************************************************************************
// *****************************************************************************
//         Check that spaces have a floor
//RULE NEW Spc:ExtFlrArea
//  DATATYPE
//    Float
//  INPUTCLASS
//    NotInput
//  DEFAULT
////    if( Proj:IsDetailedGeometry = 0 ) then
//      if( LocalStatus( ExtFlr:Area ) > 0 ) then
//        SumChildren( ExtFlr:Area )
//      else 0
//      endif
////    else UNDEFINED
////    endif
//ENDRULE
//
//
//RULE NEW Spc:IntFlrArea
//  DATATYPE
//    Float
//  INPUTCLASS
//    NotInput
//  DEFAULT
////    if( Proj:IsDetailedGeometry = 0 ) then
//      if( LocalStatus( IntFlr:Area ) > 0 ) then
//        SumChildren( IntFlr:Area )
//      else 0
//      endif
////    else UNDEFINED
////    endif
//ENDRULE
//
//
//RULE NEW Spc:UndgrFlrArea
//  DATATYPE
//    Float
//  INPUTCLASS
//    NotInput
//  DEFAULT
////    if( Proj:IsDetailedGeometry = 0 ) then
//      if( LocalStatus( UndgrFlr:Area ) > 0 ) then
//        SumChildren( UndgrFlr:Area )
//      else 0
//      endif
////    else UNDEFINED
////    endif
//ENDRULE


RULE NEW Spc:FlrCheck
  DATATYPE
    Float
  INPUTCLASS
    NotInput
  CHECKSIM
//    if( Proj:IsDetailedGeometry = 0 ) then
      if( SumChildren( ExtFlr:Area ) +
          SumChildren( IntFlr:Area ) +
          SumChildren( UndgrFlr:Area ) > Spc:Area * 0.8 ) then
        UNCHANGED
      else 
        POSTERROR("All spaces must have a floor. Space '%s' does not have one 
                   or the floor area is much less than the space floor area. 
                   All exterior surfaces must also be defined.", Name)
      endif
//    else UNDEFINED
//    endif
ENDRULE


    
// *****************************************************************************
// *****************************************************************************
// ** debugging rule evaluation duration **
RULE NEW Proj:RuleEvalDuration
  INPUTCLASS
    NotInput
  DEFAULT
    LogDuration( "            time to evaluate remaining 2DGeometry DEFAULT rules:  %.3f seconds" )
  SIZING_PROPOSED
    LogDuration( "            time to evaluate remaining 2DGeometry SIZING_PROPOSED rules:  %.3f seconds" )
  SIZING_BASELINE
    LogDuration( "            time to evaluate remaining 2DGeometry SIZING_BASELINE rules:  %.3f seconds" )
  ANNUAL_PROPOSED
    LogDuration( "            time to evaluate remaining 2DGeometry ANNUAL_PROPOSED rules:  %.3f seconds" )
  ANNUAL_BASELINE
    LogDuration( "            time to evaluate remaining 2DGeometry ANNUAL_BASELINE rules:  %.3f seconds" )
ENDRULE

