; -------------------------------------------------------------------------
; Rules pertaining to:   Prep For and Clean-up After each CSE Energy Simulation
; CEC Title-24 Residential Energy Code
; -------------------------------------------------------------------------
; Copyright (c) 2012-2016, California Energy Commission
; Copyright (c) 2012-2016, Wrightsoft Corporation
; All rights reserved.
; Redistribution and use in source and binary forms, with or without modification,
; are permitted provided that the following conditions are met:
; - Redistributions of source code must retain the above copyright notice, this
;   list of conditions and the following disclaimer.
; - Redistributions in binary form must reproduce the above copyright notice, this
;   list of conditions, the following disclaimer in the documentation and/or other
;   materials provided with the distribution.
; - Neither the name of the California Energy Commission nor the names of its
;   contributors may be used to endorse or promote products derived from this
;   software without specific prior written permission.
; DISCLAIMER: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
; THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
; NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL CALIFORNIA ENERGY COMMISSION,
; WRIGHTSOFT CORPORATION, ITRON, INC. OR ANY OTHER AUTHOR OR COPYRIGHT HOLDER OF
; THIS SOFTWARE (COLLECTIVELY, THE "AUTHORS") BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
; OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
; LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
; OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  EACH LICENSEE AND SUBLICENSEE OF THE
; SOFTWARE AGREES NOT TO ASSERT ANY CLAIM AGAINST ANY OF THE AUTHORS RELATING TO
; THIS SOFTWARE, WHETHER DUE TO PERFORMANCE ISSUES, TITLE OR INFRINGEMENT ISSUES,
; STRICT LIABILITY OR OTHERWISE.
; -------------------------------------------------------------------------


;*************************************************************************
RULELIST "CSE_SimulationPrep_PV" 1 0 0 1
;   Rules which are executed immediately prior to performing a CSE simulation - covering PVARRAY objects only
;*************************************************************************

	"Create PVARRAY #1 (when called for)"		Proj:Action	= {	if (IfValidAnd( PVWDCSysSize[1] > 0 ) == 0 .OR. IfValidAnd( PVWAzm[1] >= 0 )==0 .OR. IfValidAnd( PVWAzm[1] <= 360 )==0 .OR.
																						 IfValidAnd( PVWArrayTiltDeg[1] >= 0 )==0 .OR. IfValidAnd( PVWArrayTiltDeg[1] <= 90 )==0) then  UNCHANGED
																					else	CreateComp( csePVARRAY, "pvarray 1", "CreateCSE_PVArray_1" )  endif  }

	"Create PVARRAY #2 (when called for)"		Proj:Action	= {	if (IfValidAnd( PVWDCSysSize[2] > 0 ) == 0 .OR. IfValidAnd( PVWAzm[2] >= 0 )==0 .OR. IfValidAnd( PVWAzm[2] <= 360 )==0 .OR.
																						 IfValidAnd( PVWArrayTiltDeg[2] >= 0 )==0 .OR. IfValidAnd( PVWArrayTiltDeg[2] <= 90 )==0 .OR. PVWInputs < 1) then  UNCHANGED
																					else	CreateComp( csePVARRAY, "pvarray 2", "CreateCSE_PVArray_2" )  endif  }

	"Create PVARRAY #3 (when called for)"		Proj:Action	= {	if (IfValidAnd( PVWDCSysSize[3] > 0 ) == 0 .OR. IfValidAnd( PVWAzm[3] >= 0 )==0 .OR. IfValidAnd( PVWAzm[3] <= 360 )==0 .OR.
																						 IfValidAnd( PVWArrayTiltDeg[3] >= 0 )==0 .OR. IfValidAnd( PVWArrayTiltDeg[3] <= 90 )==0 .OR. PVWInputs < 1) then  UNCHANGED
																					else	CreateComp( csePVARRAY, "pvarray 3", "CreateCSE_PVArray_3" )  endif  }

	"Create PVARRAY #4 (when called for)"		Proj:Action	= {	if (IfValidAnd( PVWDCSysSize[4] > 0 ) == 0 .OR. IfValidAnd( PVWAzm[4] >= 0 )==0 .OR. IfValidAnd( PVWAzm[4] <= 360 )==0 .OR.
																						 IfValidAnd( PVWArrayTiltDeg[4] >= 0 )==0 .OR. IfValidAnd( PVWArrayTiltDeg[4] <= 90 )==0 .OR. PVWInputs < 1) then  UNCHANGED
																					else	CreateComp( csePVARRAY, "pvarray 4", "CreateCSE_PVArray_4" )  endif  }

	"Create PVARRAY #5 (when called for)"		Proj:Action	= {	if (IfValidAnd( PVWDCSysSize[5] > 0 ) == 0 .OR. IfValidAnd( PVWAzm[5] >= 0 )==0 .OR. IfValidAnd( PVWAzm[5] <= 360 )==0 .OR.
																						 IfValidAnd( PVWArrayTiltDeg[5] >= 0 )==0 .OR. IfValidAnd( PVWArrayTiltDeg[5] <= 90 )==0 .OR. PVWInputs < 1) then  UNCHANGED
																					else	CreateComp( csePVARRAY, "pvarray 5", "CreateCSE_PVArray_5" )  endif  }
END
;*************************************************************************

;*************************************************************************
RULELIST "CreateCSE_PVArray_1" 1 0 0 0
	"Set csePVARRAY:pvDCSysSize"		csePVARRAY:pvDCSysSize		= {	Proj:PVWDCSysSize[1]  }			; already checked before PVARRAY created
	"Set csePVARRAY:pvModuleType"		csePVARRAY:pvModuleType		= {	if (IfValidAnd( Proj:PVWModuleType[1] > 0 ) .AND. IfValidAnd( Proj:PVWModuleType[1] < 5 ))
																							then	Proj:PVWModuleType[1]  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvArrayType"		csePVARRAY:pvArrayType		= {	if (IfValidAnd( Proj:PVWArrayType[1] > 0 ) .AND. IfValidAnd( Proj:PVWArrayType[1] < 6 ))
																							then	Proj:PVWArrayType[1]  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvTilt"				csePVARRAY:pvTilt				= {	Proj:PVWArrayTiltDeg[1]  }		; already checked before PVARRAY created
	"Set csePVARRAY:pvAzm"				csePVARRAY:pvAzm				= {	Proj:PVWAzm[1]  }					; already checked before PVARRAY created
;	"Set csePVARRAY:pvGrndRefl"		csePVARRAY:pvGrndRefl		= {	
	"Set csePVARRAY:pvGCR"				csePVARRAY:pvGCR				= {	if (IfValidAnd( Proj:PVWGCR[1]         >= 0 )) then  Proj:PVWGCR[1]                else  UNDEFINED  endif  }
	"Set csePVARRAY:pvDCtoACRatio"	csePVARRAY:pvDCtoACRatio	= {	if (IfValidAnd( Proj:PVWDCtoACRatio[1] >  0 )) then  Proj:PVWDCtoACRatio[1]        else  UNDEFINED  endif  }
	"Set csePVARRAY:pvInverterEff"	csePVARRAY:pvInverterEff	= {	if (IfValidAnd( Proj:PVWInverterEff[1] >  0 )) then  Proj:PVWInverterEff[1] / 100  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvSysLosses"		csePVARRAY:pvSysLosses		= {	if (IfValidAnd( Proj:PVWSysLosses[1]   >  0 )) then  Proj:PVWSysLosses[1]   / 100  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvCoverRefrInd"	csePVARRAY:pvCoverRefrInd	= {	if (IfValidAnd( Proj:PVWCoverRefrInd[1] >= 1 ) .AND. IfValidAnd( Proj:PVWModuleType[1] = 4 ))
																							then  Proj:PVWCoverRefrInd[1]   else  UNDEFINED  endif  }
	"Set csePVARRAY:pvTempCoeff"		csePVARRAY:pvTempCoeff		= {	if (IfValidAnd( Proj:PVWTempCoeff[1]  > -100 ) .AND. IfValidAnd( Proj:PVWModuleType[1] = 4 ))
																							then  Proj:PVWTempCoeff[1]      else  UNDEFINED  endif  }
	"Set csePVARRAY:pvUsePVWatts"		csePVARRAY:pvUsePVWatts		= {	if (IfValidAnd( Proj:UsePVWattsDLL     >  0 )) then  "Yes"  else  UNDEFINED  endif  }

	"Set csePVARRAY:pvElecMtr"			csePVARRAY:pvElecMtr			= {	if (Proj:Fuel_HaveElec > 0.5 .AND. GlobalCompAssigned( Proj:CSE_ElecMETER ))
																							then  Proj:CSE_ElecMETER  else  UNDEFINED  endif  }
;	"Set csePVARRAY:pvEndUse"			csePVARRAY:pvEndUse			= {	
END
;*************************************************************************
RULELIST "CreateCSE_PVArray_2" 1 0 0 0
	"Set csePVARRAY:pvDCSysSize"		csePVARRAY:pvDCSysSize		= {	Proj:PVWDCSysSize[2]  }			; already checked before PVARRAY created
	"Set csePVARRAY:pvModuleType"		csePVARRAY:pvModuleType		= {	if (IfValidAnd( Proj:PVWModuleType[2] > 0 ) .AND. IfValidAnd( Proj:PVWModuleType[2] < 5 ))
																							then	Proj:PVWModuleType[2]  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvArrayType"		csePVARRAY:pvArrayType		= {	if (IfValidAnd( Proj:PVWArrayType[2] > 0 ) .AND. IfValidAnd( Proj:PVWArrayType[2] < 6 ))
																							then	Proj:PVWArrayType[2]  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvTilt"				csePVARRAY:pvTilt				= {	Proj:PVWArrayTiltDeg[2]  }		; already checked before PVARRAY created
	"Set csePVARRAY:pvAzm"				csePVARRAY:pvAzm				= {	Proj:PVWAzm[2]  }					; already checked before PVARRAY created
;	"Set csePVARRAY:pvGrndRefl"		csePVARRAY:pvGrndRefl		= {	
	"Set csePVARRAY:pvGCR"				csePVARRAY:pvGCR				= {	if (IfValidAnd( Proj:PVWGCR[2]         >= 0 )) then  Proj:PVWGCR[2]                else  UNDEFINED  endif  }
	"Set csePVARRAY:pvDCtoACRatio"	csePVARRAY:pvDCtoACRatio	= {	if (IfValidAnd( Proj:PVWDCtoACRatio[2] >  0 )) then  Proj:PVWDCtoACRatio[2]        else  UNDEFINED  endif  }
	"Set csePVARRAY:pvInverterEff"	csePVARRAY:pvInverterEff	= {	if (IfValidAnd( Proj:PVWInverterEff[2] >  0 )) then  Proj:PVWInverterEff[2] / 100  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvSysLosses"		csePVARRAY:pvSysLosses		= {	if (IfValidAnd( Proj:PVWSysLosses[2]   >  0 )) then  Proj:PVWSysLosses[2]   / 100  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvCoverRefrInd"	csePVARRAY:pvCoverRefrInd	= {	if (IfValidAnd( Proj:PVWCoverRefrInd[2] >= 1 ) .AND. IfValidAnd( Proj:PVWModuleType[2] = 4 ))
																							then  Proj:PVWCoverRefrInd[2]   else  UNDEFINED  endif  }
	"Set csePVARRAY:pvTempCoeff"		csePVARRAY:pvTempCoeff		= {	if (IfValidAnd( Proj:PVWTempCoeff[2]  > -100 ) .AND. IfValidAnd( Proj:PVWModuleType[2] = 4 ))
																							then  Proj:PVWTempCoeff[2]      else  UNDEFINED  endif  }
	"Set csePVARRAY:pvUsePVWatts"		csePVARRAY:pvUsePVWatts		= {	if (IfValidAnd( Proj:UsePVWattsDLL     >  0 )) then  "Yes"  else  UNDEFINED  endif  }

	"Set csePVARRAY:pvElecMtr"			csePVARRAY:pvElecMtr			= {	if (Proj:Fuel_HaveElec > 0.5 .AND. GlobalCompAssigned( Proj:CSE_ElecMETER ))
																							then  Proj:CSE_ElecMETER  else  UNDEFINED  endif  }
;	"Set csePVARRAY:pvEndUse"			csePVARRAY:pvEndUse			= {	
END
;*************************************************************************
RULELIST "CreateCSE_PVArray_3" 1 0 0 0
	"Set csePVARRAY:pvDCSysSize"		csePVARRAY:pvDCSysSize		= {	Proj:PVWDCSysSize[3]  }			; already checked before PVARRAY created
	"Set csePVARRAY:pvModuleType"		csePVARRAY:pvModuleType		= {	if (IfValidAnd( Proj:PVWModuleType[3] > 0 ) .AND. IfValidAnd( Proj:PVWModuleType[3] < 5 ))
																							then	Proj:PVWModuleType[3]  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvArrayType"		csePVARRAY:pvArrayType		= {	if (IfValidAnd( Proj:PVWArrayType[3] > 0 ) .AND. IfValidAnd( Proj:PVWArrayType[3] < 6 ))
																							then	Proj:PVWArrayType[3]  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvTilt"				csePVARRAY:pvTilt				= {	Proj:PVWArrayTiltDeg[3]  }		; already checked before PVARRAY created
	"Set csePVARRAY:pvAzm"				csePVARRAY:pvAzm				= {	Proj:PVWAzm[3]  }					; already checked before PVARRAY created
;	"Set csePVARRAY:pvGrndRefl"		csePVARRAY:pvGrndRefl		= {	
	"Set csePVARRAY:pvGCR"				csePVARRAY:pvGCR				= {	if (IfValidAnd( Proj:PVWGCR[3]         >= 0 )) then  Proj:PVWGCR[3]                else  UNDEFINED  endif  }
	"Set csePVARRAY:pvDCtoACRatio"	csePVARRAY:pvDCtoACRatio	= {	if (IfValidAnd( Proj:PVWDCtoACRatio[3] >  0 )) then  Proj:PVWDCtoACRatio[3]        else  UNDEFINED  endif  }
	"Set csePVARRAY:pvInverterEff"	csePVARRAY:pvInverterEff	= {	if (IfValidAnd( Proj:PVWInverterEff[3] >  0 )) then  Proj:PVWInverterEff[3] / 100  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvSysLosses"		csePVARRAY:pvSysLosses		= {	if (IfValidAnd( Proj:PVWSysLosses[3]   >  0 )) then  Proj:PVWSysLosses[3]   / 100  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvCoverRefrInd"	csePVARRAY:pvCoverRefrInd	= {	if (IfValidAnd( Proj:PVWCoverRefrInd[3] >= 1 ) .AND. IfValidAnd( Proj:PVWModuleType[3] = 4 ))
																							then  Proj:PVWCoverRefrInd[3]   else  UNDEFINED  endif  }
	"Set csePVARRAY:pvTempCoeff"		csePVARRAY:pvTempCoeff		= {	if (IfValidAnd( Proj:PVWTempCoeff[3]  > -100 ) .AND. IfValidAnd( Proj:PVWModuleType[3] = 4 ))
																							then  Proj:PVWTempCoeff[3]      else  UNDEFINED  endif  }
	"Set csePVARRAY:pvUsePVWatts"		csePVARRAY:pvUsePVWatts		= {	if (IfValidAnd( Proj:UsePVWattsDLL     >  0 )) then  "Yes"  else  UNDEFINED  endif  }

	"Set csePVARRAY:pvElecMtr"			csePVARRAY:pvElecMtr			= {	if (Proj:Fuel_HaveElec > 0.5 .AND. GlobalCompAssigned( Proj:CSE_ElecMETER ))
																							then  Proj:CSE_ElecMETER  else  UNDEFINED  endif  }
;	"Set csePVARRAY:pvEndUse"			csePVARRAY:pvEndUse			= {	
END
;*************************************************************************
RULELIST "CreateCSE_PVArray_4" 1 0 0 0
	"Set csePVARRAY:pvDCSysSize"		csePVARRAY:pvDCSysSize		= {	Proj:PVWDCSysSize[4]  }			; already checked before PVARRAY created
	"Set csePVARRAY:pvModuleType"		csePVARRAY:pvModuleType		= {	if (IfValidAnd( Proj:PVWModuleType[4] > 0 ) .AND. IfValidAnd( Proj:PVWModuleType[4] < 5 ))
																							then	Proj:PVWModuleType[4]  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvArrayType"		csePVARRAY:pvArrayType		= {	if (IfValidAnd( Proj:PVWArrayType[4] > 0 ) .AND. IfValidAnd( Proj:PVWArrayType[4] < 6 ))
																							then	Proj:PVWArrayType[4]  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvTilt"				csePVARRAY:pvTilt				= {	Proj:PVWArrayTiltDeg[4]  }		; already checked before PVARRAY created
	"Set csePVARRAY:pvAzm"				csePVARRAY:pvAzm				= {	Proj:PVWAzm[4]  }					; already checked before PVARRAY created
;	"Set csePVARRAY:pvGrndRefl"		csePVARRAY:pvGrndRefl		= {	
	"Set csePVARRAY:pvGCR"				csePVARRAY:pvGCR				= {	if (IfValidAnd( Proj:PVWGCR[4]         >= 0 )) then  Proj:PVWGCR[4]                else  UNDEFINED  endif  }
	"Set csePVARRAY:pvDCtoACRatio"	csePVARRAY:pvDCtoACRatio	= {	if (IfValidAnd( Proj:PVWDCtoACRatio[4] >  0 )) then  Proj:PVWDCtoACRatio[4]        else  UNDEFINED  endif  }
	"Set csePVARRAY:pvInverterEff"	csePVARRAY:pvInverterEff	= {	if (IfValidAnd( Proj:PVWInverterEff[4] >  0 )) then  Proj:PVWInverterEff[4] / 100  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvSysLosses"		csePVARRAY:pvSysLosses		= {	if (IfValidAnd( Proj:PVWSysLosses[4]   >  0 )) then  Proj:PVWSysLosses[4]   / 100  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvCoverRefrInd"	csePVARRAY:pvCoverRefrInd	= {	if (IfValidAnd( Proj:PVWCoverRefrInd[4] >= 1 ) .AND. IfValidAnd( Proj:PVWModuleType[4] = 4 ))
																							then  Proj:PVWCoverRefrInd[4]   else  UNDEFINED  endif  }
	"Set csePVARRAY:pvTempCoeff"		csePVARRAY:pvTempCoeff		= {	if (IfValidAnd( Proj:PVWTempCoeff[4]  > -100 ) .AND. IfValidAnd( Proj:PVWModuleType[4] = 4 ))
																							then  Proj:PVWTempCoeff[4]      else  UNDEFINED  endif  }
	"Set csePVARRAY:pvUsePVWatts"		csePVARRAY:pvUsePVWatts		= {	if (IfValidAnd( Proj:UsePVWattsDLL     >  0 )) then  "Yes"  else  UNDEFINED  endif  }

	"Set csePVARRAY:pvElecMtr"			csePVARRAY:pvElecMtr			= {	if (Proj:Fuel_HaveElec > 0.5 .AND. GlobalCompAssigned( Proj:CSE_ElecMETER ))
																							then  Proj:CSE_ElecMETER  else  UNDEFINED  endif  }
;	"Set csePVARRAY:pvEndUse"			csePVARRAY:pvEndUse			= {	
END
;*************************************************************************
RULELIST "CreateCSE_PVArray_5" 1 0 0 0
	"Set csePVARRAY:pvDCSysSize"		csePVARRAY:pvDCSysSize		= {	Proj:PVWDCSysSize[5]  }			; already checked before PVARRAY created
	"Set csePVARRAY:pvModuleType"		csePVARRAY:pvModuleType		= {	if (IfValidAnd( Proj:PVWModuleType[5] > 0 ) .AND. IfValidAnd( Proj:PVWModuleType[5] < 5 ))
																							then	Proj:PVWModuleType[5]  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvArrayType"		csePVARRAY:pvArrayType		= {	if (IfValidAnd( Proj:PVWArrayType[5] > 0 ) .AND. IfValidAnd( Proj:PVWArrayType[5] < 6 ))
																							then	Proj:PVWArrayType[5]  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvTilt"				csePVARRAY:pvTilt				= {	Proj:PVWArrayTiltDeg[5]  }		; already checked before PVARRAY created
	"Set csePVARRAY:pvAzm"				csePVARRAY:pvAzm				= {	Proj:PVWAzm[5]  }					; already checked before PVARRAY created
;	"Set csePVARRAY:pvGrndRefl"		csePVARRAY:pvGrndRefl		= {	
	"Set csePVARRAY:pvGCR"				csePVARRAY:pvGCR				= {	if (IfValidAnd( Proj:PVWGCR[5]         >= 0 )) then  Proj:PVWGCR[5]                else  UNDEFINED  endif  }
	"Set csePVARRAY:pvDCtoACRatio"	csePVARRAY:pvDCtoACRatio	= {	if (IfValidAnd( Proj:PVWDCtoACRatio[5] >  0 )) then  Proj:PVWDCtoACRatio[5]        else  UNDEFINED  endif  }
	"Set csePVARRAY:pvInverterEff"	csePVARRAY:pvInverterEff	= {	if (IfValidAnd( Proj:PVWInverterEff[5] >  0 )) then  Proj:PVWInverterEff[5] / 100  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvSysLosses"		csePVARRAY:pvSysLosses		= {	if (IfValidAnd( Proj:PVWSysLosses[5]   >  0 )) then  Proj:PVWSysLosses[5]   / 100  else  UNDEFINED  endif  }
	"Set csePVARRAY:pvCoverRefrInd"	csePVARRAY:pvCoverRefrInd	= {	if (IfValidAnd( Proj:PVWCoverRefrInd[5] >= 1 ) .AND. IfValidAnd( Proj:PVWModuleType[5] = 4 ))
																							then  Proj:PVWCoverRefrInd[5]   else  UNDEFINED  endif  }
	"Set csePVARRAY:pvTempCoeff"		csePVARRAY:pvTempCoeff		= {	if (IfValidAnd( Proj:PVWTempCoeff[5]  > -100 ) .AND. IfValidAnd( Proj:PVWModuleType[5] = 4 ))
																							then  Proj:PVWTempCoeff[5]      else  UNDEFINED  endif  }
	"Set csePVARRAY:pvUsePVWatts"		csePVARRAY:pvUsePVWatts		= {	if (IfValidAnd( Proj:UsePVWattsDLL     >  0 )) then  "Yes"  else  UNDEFINED  endif  }

	"Set csePVARRAY:pvElecMtr"			csePVARRAY:pvElecMtr			= {	if (Proj:Fuel_HaveElec > 0.5 .AND. GlobalCompAssigned( Proj:CSE_ElecMETER ))
																							then  Proj:CSE_ElecMETER  else  UNDEFINED  endif  }
;	"Set csePVARRAY:pvEndUse"			csePVARRAY:pvEndUse			= {	
END
;*************************************************************************


;*************************************************************************
;*************************************************************************

ENDFILE
