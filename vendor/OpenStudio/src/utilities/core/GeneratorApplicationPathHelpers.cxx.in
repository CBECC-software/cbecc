/**********************************************************************
*  Copyright (c) 2008-2016, Alliance for Sustainable Energy.  
*  All rights reserved.
*  
*  This library is free software; you can redistribute it and/or
*  modify it under the terms of the GNU Lesser General Public
*  License as published by the Free Software Foundation; either
*  version 2.1 of the License, or (at your option) any later version.
*  
*  This library is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*  Lesser General Public License for more details.
*  
*  You should have received a copy of the GNU Lesser General Public
*  License along with this library; if not, write to the Free Software
*  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
**********************************************************************/

#include <sstream>
#include <boost/algorithm/string/case_conv.hpp>
#include <boost/filesystem/operations.hpp>
#include <boost/filesystem/path.hpp>
#include <iostream>

#ifdef WIN32
#include <Windows.h>
#else
#include <dlfcn.h>
#endif

namespace openstudio {

typedef boost::filesystem::path path;

openstudio::path getApplicationOutputDirectory(const std::string& outdir) {
  openstudio::path result(outdir);
  std::stringstream ss, tss;

  // turn relative path into absolute path
  result = boost::filesystem::system_complete(result);
  std::string dirStr = result.string();
  // create string used in error messages
  if (dirStr != outdir) { tss << " (" << dirStr << ")"; }

  // result cannot be a file
  if (boost::filesystem::is_regular_file(result)) {
    ss << "Invalid outdir, " << outdir << tss.str()
       << ", is a file instead of a directory with a valid parent_path.";
    throw std::runtime_error(ss.str().c_str());
  }

  // if result is not yet a directory
  if (!boost::filesystem::is_directory(result)) {
    // parent path must be an existing directory
    if (!boost::filesystem::is_directory(result.parent_path())) {
      ss << "Invalid outdir, " << outdir << tss.str()
         << ", has a parent_path, " << result.parent_path().string()
         << ", that is either invalid, or corresponds to a non-existent directory.";
      throw std::runtime_error(ss.str().c_str());
    }
    // make the output directory, if possible
    std::cout << "Creating output directory " << dirStr << "." << std::endl;
    bool ok = boost::filesystem::create_directory(result);
    if (!ok) {
      ss << "Unable to create outdir " << outdir << tss.str() << ".";
      throw std::runtime_error(ss.str().c_str());
    }
  }

  std::cout << std::endl << "All output will be directed to " << dirStr << "." 
            << std::endl << std::endl;
  return result;
}

} // openstudio
