/**********************************************************************
 *  Copyright (c) 2008-2016, Alliance for Sustainable Energy.
 *  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 **********************************************************************/

#ifndef MODEL_SCHEDULETYPELIMITS_IMPL_HPP
#define MODEL_SCHEDULETYPELIMITS_IMPL_HPP

#include "ModelAPI.hpp"
#include "ResourceObject_Impl.hpp"

#include "../utilities/units/Quantity.hpp"
#include "../utilities/units/OSOptionalQuantity.hpp"

namespace openstudio {
namespace model {

namespace detail {

  /** ScheduleTypeLimits_Impl is a ResourceObject_Impl that is the implementation class for ScheduleTypeLimits.*/
  class MODEL_API ScheduleTypeLimits_Impl : public ResourceObject_Impl {
    Q_OBJECT;

    Q_PROPERTY(boost::optional<double> lowerLimitValue READ lowerLimitValue WRITE setLowerLimitValue RESET resetLowerLimitValue);
    Q_PROPERTY(openstudio::OSOptionalQuantity lowerLimitValue_SI READ lowerLimitValue_SI WRITE setLowerLimitValue RESET resetLowerLimitValue);
    Q_PROPERTY(openstudio::OSOptionalQuantity lowerLimitValue_IP READ lowerLimitValue_IP WRITE setLowerLimitValue RESET resetLowerLimitValue);

    Q_PROPERTY(boost::optional<double> upperLimitValue READ upperLimitValue WRITE setUpperLimitValue RESET resetUpperLimitValue);
    Q_PROPERTY(openstudio::OSOptionalQuantity upperLimitValue_SI READ upperLimitValue_SI WRITE setUpperLimitValue RESET resetUpperLimitValue);
    Q_PROPERTY(openstudio::OSOptionalQuantity upperLimitValue_IP READ upperLimitValue_IP WRITE setUpperLimitValue RESET resetUpperLimitValue);

    Q_PROPERTY(boost::optional<std::string> numericType READ numericType WRITE setNumericType RESET resetNumericType);
    Q_PROPERTY(std::vector<std::string> numericTypeValues READ numericTypeValues);

    Q_PROPERTY(std::string unitType READ unitType WRITE setUnitType RESET resetUnitType);
    Q_PROPERTY(bool isUnitTypeDefaulted READ isUnitTypeDefaulted);
    Q_PROPERTY(std::vector<std::string> unitTypeValues READ unitTypeValues);

    // TODO: Add relationships for objects related to this one, but not pointed to by the underlying data.
    //       Such relationships can be generated by the GenerateRelationships.rb script.
   public:
    /** @name Constructors and Destructors */
    //@{

    ScheduleTypeLimits_Impl(const IdfObject& idfObject,
                            Model_Impl* model,
                            bool keepHandle);

    ScheduleTypeLimits_Impl(const openstudio::detail::WorkspaceObject_Impl& other,
                            Model_Impl* model,
                            bool keepHandle);

    ScheduleTypeLimits_Impl(const ScheduleTypeLimits_Impl& other,
                            Model_Impl* model,
                            bool keepHandle);

    virtual ~ScheduleTypeLimits_Impl() {}

    //@}

    /** @name Virtual Methods */
    //@{

    virtual const std::vector<std::string>& outputVariableNames() const override;

    virtual IddObjectType iddObjectType() const override;

    //@}
    /** @name Getters */
    //@{

    boost::optional<double> lowerLimitValue() const;

    OSOptionalQuantity getLowerLimitValue(bool returnIP=false) const;

    boost::optional<double> upperLimitValue() const;

    OSOptionalQuantity getUpperLimitValue(bool returnIP=false) const;

    boost::optional<std::string> numericType() const;

    std::string unitType() const;

    bool isUnitTypeDefaulted() const;

    boost::optional<Unit> units(bool returnIP=false) const;

    //@}
    /** @name Setters */
    //@{

    void setLowerLimitValue(boost::optional<double> lowerLimitValue);

    bool setLowerLimitValue(const OSOptionalQuantity& lowerLimitValue);

    void resetLowerLimitValue();

    void setUpperLimitValue(boost::optional<double> upperLimitValue);

    bool setUpperLimitValue(const OSOptionalQuantity& upperLimitValue);

    void resetUpperLimitValue();

    bool setNumericType(boost::optional<std::string> numericType);

    void resetNumericType();

    bool setUnitType(std::string unitType);

    void resetUnitType();

    //@}
    /** @name Other */
    //@{

    //@}
   protected:
    virtual OSOptionalQuantity getQuantityFromDouble(unsigned index,
                                                     boost::optional<double> value,
                                                     bool returnIP) const override;

    virtual boost::optional<double> getDoubleFromQuantity(unsigned index, Quantity q) const;

   private:
    REGISTER_LOGGER("openstudio.model.ScheduleTypeLimits");

    openstudio::OSOptionalQuantity lowerLimitValue_SI() const;
    openstudio::OSOptionalQuantity lowerLimitValue_IP() const;
    openstudio::OSOptionalQuantity upperLimitValue_SI() const;
    openstudio::OSOptionalQuantity upperLimitValue_IP() const;
    std::vector<std::string> numericTypeValues() const;
    std::vector<std::string> unitTypeValues() const;
  };

} // detail

} // model
} // openstudio

#endif // MODEL_SCHEDULETYPELIMITS_IMPL_HPP

