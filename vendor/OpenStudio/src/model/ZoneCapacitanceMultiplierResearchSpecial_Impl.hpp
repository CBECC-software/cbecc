/**********************************************************************
 *  Copyright (c) 2008-2016, Alliance for Sustainable Energy.
 *  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 **********************************************************************/

#ifndef MODEL_ZONECAPACITANCEMULTIPLIERRESEARCHSPECIAL_IMPL_HPP
#define MODEL_ZONECAPACITANCEMULTIPLIERRESEARCHSPECIAL_IMPL_HPP

#include "ModelAPI.hpp"
#include "ModelObject_Impl.hpp"

#include "../utilities/units/Quantity.hpp"
#include "../utilities/units/OSOptionalQuantity.hpp"

namespace openstudio {
namespace model {

namespace detail {

  /** ZoneCapacitanceMultiplierResearchSpecial_Impl is a ModelObject_Impl that is the implementation class for ZoneCapacitanceMultiplierResearchSpecial.*/
  class MODEL_API ZoneCapacitanceMultiplierResearchSpecial_Impl : public ModelObject_Impl {
    Q_OBJECT;

    Q_PROPERTY(double temperatureCapacityMultiplier READ temperatureCapacityMultiplier WRITE setTemperatureCapacityMultiplier RESET resetTemperatureCapacityMultiplier);
    Q_PROPERTY(openstudio::Quantity temperatureCapacityMultiplier_SI READ temperatureCapacityMultiplier_SI WRITE setTemperatureCapacityMultiplier RESET resetTemperatureCapacityMultiplier);
    Q_PROPERTY(openstudio::Quantity temperatureCapacityMultiplier_IP READ temperatureCapacityMultiplier_IP WRITE setTemperatureCapacityMultiplier RESET resetTemperatureCapacityMultiplier);
    Q_PROPERTY(bool isTemperatureCapacityMultiplierDefaulted READ isTemperatureCapacityMultiplierDefaulted);

    Q_PROPERTY(double humidityCapacityMultiplier READ humidityCapacityMultiplier WRITE setHumidityCapacityMultiplier RESET resetHumidityCapacityMultiplier);
    Q_PROPERTY(openstudio::Quantity humidityCapacityMultiplier_SI READ humidityCapacityMultiplier_SI WRITE setHumidityCapacityMultiplier RESET resetHumidityCapacityMultiplier);
    Q_PROPERTY(openstudio::Quantity humidityCapacityMultiplier_IP READ humidityCapacityMultiplier_IP WRITE setHumidityCapacityMultiplier RESET resetHumidityCapacityMultiplier);
    Q_PROPERTY(bool isHumidityCapacityMultiplierDefaulted READ isHumidityCapacityMultiplierDefaulted);

    Q_PROPERTY(double carbonDioxideCapacityMultiplier READ carbonDioxideCapacityMultiplier WRITE setCarbonDioxideCapacityMultiplier RESET resetCarbonDioxideCapacityMultiplier);
    Q_PROPERTY(openstudio::Quantity carbonDioxideCapacityMultiplier_SI READ carbonDioxideCapacityMultiplier_SI WRITE setCarbonDioxideCapacityMultiplier RESET resetCarbonDioxideCapacityMultiplier);
    Q_PROPERTY(openstudio::Quantity carbonDioxideCapacityMultiplier_IP READ carbonDioxideCapacityMultiplier_IP WRITE setCarbonDioxideCapacityMultiplier RESET resetCarbonDioxideCapacityMultiplier);
    Q_PROPERTY(bool isCarbonDioxideCapacityMultiplierDefaulted READ isCarbonDioxideCapacityMultiplierDefaulted);

    // TODO: Add relationships for objects related to this one, but not pointed to by the underlying data.
    //       Such relationships can be generated by the GenerateRelationships.rb script.
   public:
    /** @name Constructors and Destructors */
    //@{

    // constructor
    ZoneCapacitanceMultiplierResearchSpecial_Impl(const IdfObject& idfObject,
                                                  Model_Impl* model,
                                                  bool keepHandle);

    // construct from workspace
    ZoneCapacitanceMultiplierResearchSpecial_Impl(const openstudio::detail::WorkspaceObject_Impl& other,
                                                  Model_Impl* model,
                                                  bool keepHandle);

    // clone copy constructor
    ZoneCapacitanceMultiplierResearchSpecial_Impl(const ZoneCapacitanceMultiplierResearchSpecial_Impl& other,
                                                  Model_Impl* model,
                                                  bool keepHandle);

    // virtual destructor
    virtual ~ZoneCapacitanceMultiplierResearchSpecial_Impl() {}

    //@}

    /** @name Virtual Methods */
    //@{

    // return the parent object in the hierarchy
    virtual boost::optional<ParentObject> parent() const override;

    // set the parent, child may have to call methods on the parent
    virtual bool setParent(ParentObject& newParent) override;

    // Get all output variable names that could be associated with this object.
    virtual const std::vector<std::string>& outputVariableNames() const override;

    virtual IddObjectType iddObjectType() const override;

    //@}
    /** @name Getters */
    //@{

    double temperatureCapacityMultiplier() const;

    Quantity getTemperatureCapacityMultiplier(bool returnIP=false) const;

    bool isTemperatureCapacityMultiplierDefaulted() const;

    double humidityCapacityMultiplier() const;

    Quantity getHumidityCapacityMultiplier(bool returnIP=false) const;

    bool isHumidityCapacityMultiplierDefaulted() const;

    double carbonDioxideCapacityMultiplier() const;

    Quantity getCarbonDioxideCapacityMultiplier(bool returnIP=false) const;

    bool isCarbonDioxideCapacityMultiplierDefaulted() const;

    //@}
    /** @name Setters */
    //@{

    bool setTemperatureCapacityMultiplier(double temperatureCapacityMultiplier);

    bool setTemperatureCapacityMultiplier(const Quantity& temperatureCapacityMultiplier);

    void resetTemperatureCapacityMultiplier();

    bool setHumidityCapacityMultiplier(double humidityCapacityMultiplier);

    bool setHumidityCapacityMultiplier(const Quantity& humidityCapacityMultiplier);

    void resetHumidityCapacityMultiplier();

    bool setCarbonDioxideCapacityMultiplier(double carbonDioxideCapacityMultiplier);

    bool setCarbonDioxideCapacityMultiplier(const Quantity& carbonDioxideCapacityMultiplier);

    void resetCarbonDioxideCapacityMultiplier();

    //@}
    /** @name Other */
    //@{

    //@}
   protected:

   private:

    REGISTER_LOGGER("openstudio.model.ZoneCapacitanceMultiplierResearchSpecial");

    openstudio::Quantity temperatureCapacityMultiplier_SI() const;
    openstudio::Quantity temperatureCapacityMultiplier_IP() const;
    openstudio::Quantity humidityCapacityMultiplier_SI() const;
    openstudio::Quantity humidityCapacityMultiplier_IP() const;
    openstudio::Quantity carbonDioxideCapacityMultiplier_SI() const;
    openstudio::Quantity carbonDioxideCapacityMultiplier_IP() const;
  };

} // detail

} // model
} // openstudio

#endif // MODEL_ZONECAPACITANCEMULTIPLIERRESEARCHSPECIAL_IMPL_HPP

