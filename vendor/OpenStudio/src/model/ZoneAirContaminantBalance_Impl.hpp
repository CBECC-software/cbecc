/**********************************************************************
 *  Copyright (c) 2008-2016, Alliance for Sustainable Energy.
 *  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 **********************************************************************/

#ifndef MODEL_ZONEAIRCONTAMINANTBALANCE_IMPL_HPP
#define MODEL_ZONEAIRCONTAMINANTBALANCE_IMPL_HPP

#include "ModelAPI.hpp"
#include "ModelObject_Impl.hpp"

namespace openstudio {
namespace model {

// TODO: Check the following class names against object getters and setters.
class Schedule;

namespace detail {

  /** ZoneAirContaminantBalance_Impl is a ModelObject_Impl that is the implementation class for ZoneAirContaminantBalance.*/
  class MODEL_API ZoneAirContaminantBalance_Impl : public ModelObject_Impl {
    Q_OBJECT;

    Q_PROPERTY(bool carbonDioxideConcentration READ carbonDioxideConcentration WRITE setCarbonDioxideConcentration RESET resetCarbonDioxideConcentration);
    Q_PROPERTY(bool isCarbonDioxideConcentrationDefaulted READ isCarbonDioxideConcentrationDefaulted);

    // TODO: Add relationships for objects related to this one, but not pointed to by the underlying data.
    //       Such relationships can be generated by the GenerateRelationships.rb script.
    Q_PROPERTY(boost::optional<openstudio::model::ModelObject> outdoorCarbonDioxideSchedule READ outdoorCarbonDioxideScheduleAsModelObject WRITE setOutdoorCarbonDioxideScheduleAsModelObject RESET resetOutdoorCarbonDioxideSchedule);
   public:
    /** @name Constructors and Destructors */
    //@{

    // constructor
    ZoneAirContaminantBalance_Impl(const IdfObject& idfObject,
                                   Model_Impl* model,
                                   bool keepHandle);

    // construct from workspace
    ZoneAirContaminantBalance_Impl(const openstudio::detail::WorkspaceObject_Impl& other,
                                   Model_Impl* model,
                                   bool keepHandle);

    // clone copy constructor
    ZoneAirContaminantBalance_Impl(const ZoneAirContaminantBalance_Impl& other,
                                   Model_Impl* model,
                                   bool keepHandle);

    // virtual destructor
    virtual ~ZoneAirContaminantBalance_Impl() {}

    // return the parent object in the hierarchy
    virtual boost::optional<ParentObject> parent() const override;

    // set the parent, child may have to call methods on the parent
    virtual bool setParent(ParentObject& newParent) override;

    //@}

    /** @name Virtual Methods */
    //@{

    // Get all output variable names that could be associated with this object.
    virtual const std::vector<std::string>& outputVariableNames() const override;

    virtual IddObjectType iddObjectType() const override;

    virtual std::vector<ScheduleTypeKey> getScheduleTypeKeys(const Schedule& schedule) const override;

    //@}
    /** @name Getters */
    //@{

    bool carbonDioxideConcentration() const;

    bool isCarbonDioxideConcentrationDefaulted() const;

    // TODO: Check return type. From object lists, some candidates are: Schedule.
    boost::optional<Schedule> outdoorCarbonDioxideSchedule() const;

    //@}
    /** @name Setters */
    //@{

    void setCarbonDioxideConcentration(bool carbonDioxideConcentration);

    void resetCarbonDioxideConcentration();

    // TODO: Check argument type. From object lists, some candidates are: Schedule.
    bool setOutdoorCarbonDioxideSchedule(Schedule& schedule);

    void resetOutdoorCarbonDioxideSchedule();

    //@}
    /** @name Other */
    //@{

    //@}
   protected:

   private:

    REGISTER_LOGGER("openstudio.model.ZoneAirContaminantBalance");

    boost::optional<ModelObject> outdoorCarbonDioxideScheduleAsModelObject() const;

    bool setOutdoorCarbonDioxideScheduleAsModelObject(const boost::optional<ModelObject>& modelObject);
  };

} // detail

} // model
} // openstudio

#endif // MODEL_ZONEAIRCONTAMINANTBALANCE_IMPL_HPP

