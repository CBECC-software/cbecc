/**********************************************************************
 *  Copyright (c) 2008-2016, Alliance for Sustainable Energy.
 *  All rights reserved.
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 **********************************************************************/

#ifndef MODEL_SIMPLEGLAZING_IMPL_HPP
#define MODEL_SIMPLEGLAZING_IMPL_HPP

#include "ModelAPI.hpp"
#include "Glazing_Impl.hpp"

#include "../utilities/units/Quantity.hpp"
#include "../utilities/units/OSOptionalQuantity.hpp"

namespace openstudio {
namespace model {

namespace detail {

  /** SimpleGlazing_Impl is a Glazing_Impl that is the implementation class for SimpleGlazing.*/
  class MODEL_API SimpleGlazing_Impl : public Glazing_Impl {
    Q_OBJECT;

    Q_PROPERTY(double uFactor READ uFactor WRITE setUFactor);
    Q_PROPERTY(openstudio::Quantity uFactor_SI READ uFactor_SI WRITE setUFactor);
    Q_PROPERTY(openstudio::Quantity uFactor_IP READ uFactor_IP WRITE setUFactor);

    Q_PROPERTY(double solarHeatGainCoefficient READ solarHeatGainCoefficient WRITE setSolarHeatGainCoefficient);
    Q_PROPERTY(openstudio::Quantity solarHeatGainCoefficient_SI READ solarHeatGainCoefficient_SI WRITE setSolarHeatGainCoefficient);
    Q_PROPERTY(openstudio::Quantity solarHeatGainCoefficient_IP READ solarHeatGainCoefficient_IP WRITE setSolarHeatGainCoefficient);

    Q_PROPERTY(boost::optional<double> visibleTransmittance READ visibleTransmittance WRITE setVisibleTransmittance RESET resetVisibleTransmittance);
    Q_PROPERTY(openstudio::OSOptionalQuantity visibleTransmittance_SI READ visibleTransmittance_SI WRITE setVisibleTransmittance RESET resetVisibleTransmittance);
    Q_PROPERTY(openstudio::OSOptionalQuantity visibleTransmittance_IP READ visibleTransmittance_IP WRITE setVisibleTransmittance RESET resetVisibleTransmittance);

    // TODO: Add relationships for objects related to this one, but not pointed to by the underlying data.
    //       Such relationships can be generated by the GenerateRelationships.rb script.
   public:
    /** @name Constructors and Destructors */
    //@{

    SimpleGlazing_Impl(const IdfObject& idfObject,
                       Model_Impl* model,
                       bool keepHandle);

    SimpleGlazing_Impl(const openstudio::detail::WorkspaceObject_Impl& other,
                       Model_Impl* model,
                       bool keepHandle);

    SimpleGlazing_Impl(const SimpleGlazing_Impl& other,
                       Model_Impl* model,
                       bool keepHandle);

    virtual ~SimpleGlazing_Impl() {}

    //@}

    /** @name Virtual Methods */
    //@{

    virtual const std::vector<std::string>& outputVariableNames() const override;

    virtual IddObjectType iddObjectType() const override;

    virtual boost::optional<double> getVisibleTransmittance() const override;

    //@}
    /** @name Getters */
    //@{

    double uFactor() const;

    Quantity getUFactor(bool returnIP=false) const;

    double solarHeatGainCoefficient() const;

    Quantity getSolarHeatGainCoefficient(bool returnIP=false) const;

    boost::optional<double> visibleTransmittance() const;

    OSOptionalQuantity getVisibleTransmittance(bool returnIP=false) const;

    //@}
    /** @name Setters */
    //@{

    bool setUFactor(double uFactor);

    bool setUFactor(const Quantity& uFactor);

    bool setSolarHeatGainCoefficient(double solarHeatGainCoefficient);

    bool setSolarHeatGainCoefficient(const Quantity& solarHeatGainCoefficient);

    bool setVisibleTransmittance(boost::optional<double> visibleTransmittance);

    bool setVisibleTransmittance(const OSOptionalQuantity& visibleTransmittance);

    void resetVisibleTransmittance();

    //@}
    /** @name Other */
    //@{

    //@}
   protected:
   private:
    REGISTER_LOGGER("openstudio.model.SimpleGlazing");

    openstudio::Quantity uFactor_SI() const;
    openstudio::Quantity uFactor_IP() const;
    openstudio::Quantity solarHeatGainCoefficient_SI() const;
    openstudio::Quantity solarHeatGainCoefficient_IP() const;
    openstudio::OSOptionalQuantity visibleTransmittance_SI() const;
    openstudio::OSOptionalQuantity visibleTransmittance_IP() const;
  };

} // detail

} // model
} // openstudio

#endif // MODEL_SIMPLEGLAZING_IMPL_HPP

