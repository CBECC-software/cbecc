Steps performed to compile for Win32 via VC12 (Visual Studio 2013)

Read through Install.W32 - the following is an excerpt --

(1) Downloaded & installed Active Perl from ActiveState
		added perl path to PATH env (C:\Perl64\bin)

(2) from a std command prompt, run (from C:\WSF\devLibs\CompMgr\src\OpenSSL\openssl-1.0.1j):
   > perl Configure VC-WIN32 no-asm --prefix=C:\WSF\devLibs\CompMgr\src\OpenSSL\openssl-1.0.1j
   > ms\do_ms

(3) from the Visual Studio 2013 Command Prompt (and from C:\WSF\devLibs\CompMgr\src\OpenSSL\openssl-1.0.1j):
   > nmake -f ms\ntdll.mak


more info ---

 If all is well it should compile and you will have some DLLs and
 executables in out32dll. If you want to try the tests then do:
 
 > nmake -f ms\ntdll.mak test


 To install OpenSSL to the specified location do:

 > nmake -f ms\ntdll.mak install

 Tweaks:

 There are various changes you can make to the Win32 compile
 environment. By default the library is not compiled with debugging
 symbols. If you use the platform debug-VC-WIN32 instead of VC-WIN32
 then debugging symbols will be compiled in.

 By default in 1.0.0 OpenSSL will compile builtin ENGINES into the
 separate shared librariesy. If you specify the "enable-static-engine"
 option on the command line to Configure the shared library build
 (ms\ntdll.mak) will compile the engines into libeay32.dll instead.

 The default Win32 environment is to leave out any Windows NT specific
 features.

 If you want to enable the NT specific features of OpenSSL (currently
 only the logging BIO) follow the instructions above but call the batch
 file do_nt.bat instead of do_ms.bat.

 You can also build a static version of the library using the Makefile
 ms\nt.mak


